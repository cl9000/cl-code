<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Weichanglu</title>
  <icon>https://www.gravatar.com/avatar/749a0cb196d7f8d7b7f41d5a5fa372e4</icon>
  <subtitle>你知道的越多，你不知道的越多</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cl9000.github.io/"/>
  <updated>2020-11-05T10:37:43.857Z</updated>
  <id>https://cl9000.github.io/</id>
  
  <author>
    <name>cl9000</name>
    <email>cl9000@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python：ERROR:root:code for hash md5 was not found.</title>
    <link href="https://cl9000.github.io/2020/11/05/python-error-root-code-for-hash-md5/"/>
    <id>https://cl9000.github.io/2020/11/05/python-error-root-code-for-hash-md5/</id>
    <published>2020-11-05T10:35:48.000Z</published>
    <updated>2020-11-05T10:37:43.857Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="python-errorrootcode-for-hash-md5-was-not-found">python: ERROR:root:code for hash md5 was not found.</span></h3><h3><span id="解决方案错误日志在下面">解决方案（错误日志在下面👇）</span></h3><p><strong>解决方案</strong></p><ul><li>执行命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /usr/<span class="built_in">local</span>/Cellar/openssl</span></span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.0.2s</span><br></pre></td></tr></table></figure><ul><li>根据现有版本（<strong>根据自己终端的响应修改，例如1.0.2t</strong>），运行：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew switch openssl 1.0.2s</span></span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cleaning /usr/local/Cellar/openssl/1.0.2s</span><br><span class="line">Opt link created for /usr/local/Cellar/openssl/1.0.2s</span><br></pre></td></tr></table></figure><p>然后，在在Python 2.7 virtualenv中运行以下测试命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> hashlib;</span>m=hashlib.md5();print(m.hexdigest())</span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d41d8cd98f00b204e9800998ecf8427e</span><br></pre></td></tr></table></figure><p>如此便正常解决了</p><p><strong>如下错误日志：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">ERROR:root:code for hash md5 was not found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> <span class="keyword">md5</span></span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> <span class="keyword">sha1</span> was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> <span class="keyword">sha1</span></span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha224 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha224</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha256 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha256</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha384 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha384</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha512 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha512</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/bin/pip"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    load_entry_point(<span class="string">'pip==19.0.2'</span>, <span class="string">'console_scripts'</span>, <span class="string">'pip'</span>)()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">489</span>, <span class="keyword">in</span> load_entry_point</span><br><span class="line">    <span class="keyword">return</span> get_distribution(dist).load_entry_point(<span class="keyword">group</span>, <span class="keyword">name</span>)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2793</span>, <span class="keyword">in</span> load_entry_point</span><br><span class="line">    <span class="keyword">return</span> ep.load()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2411</span>, <span class="keyword">in</span> <span class="keyword">load</span></span><br><span class="line">    <span class="keyword">return</span> self.resolve()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2417</span>, <span class="keyword">in</span> resolve</span><br><span class="line">    <span class="keyword">module</span> = __import__(self.module_name, fromlist=[<span class="string">'__name__'</span>], <span class="keyword">level</span>=<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_internal/__init__.py"</span>, line <span class="number">19</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> pip._vendor.urllib3.exceptions <span class="keyword">import</span> DependencyWarning</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/__init__.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .connectionpool <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/connectionpool.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .connection <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/connection.py"</span>, line <span class="number">38</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .util.ssl_ <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/util/__init__.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .ssl_ <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/util/ssl_.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> hashlib <span class="keyword">import</span> <span class="keyword">md5</span>, <span class="keyword">sha1</span>, sha256</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> <span class="keyword">name</span> <span class="keyword">md5</span></span><br></pre></td></tr></table></figure><h3><span id="ref">ref</span></h3><ul><li><a href="https://stackoverflow.com/questions/59269208/errorrootcode-for-hash-md5-was-not-found-when-using-any-hg-mercurial-command#" target="_blank" rel="noopener">“ERROR:root:code for hash md5 was not found” when using any hg mercurial commands<br></a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;python-errorrootcode-for-hash-md5-was-not-found&quot;&gt;python: ERROR:root:code for hash md5 was not found.&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span id=
      
    
    </summary>
    
    
    
      <category term="python error" scheme="https://cl9000.github.io/tags/python-error/"/>
    
      <category term="ERROR:root:code" scheme="https://cl9000.github.io/tags/ERROR-root-code/"/>
    
  </entry>
  
  <entry>
    <title>iOS-virtualPositon</title>
    <link href="https://cl9000.github.io/2020/10/19/iOS-virtualPositon/"/>
    <id>https://cl9000.github.io/2020/10/19/iOS-virtualPositon/</id>
    <published>2020-10-19T04:18:29.000Z</published>
    <updated>2020-10-19T05:28:08.400Z</updated>
    
    <content type="html"><![CDATA[<p>使用<strong>i4</strong> 修改软件虚拟位置，步骤入下</p><ol><li>Mac appStore（或PC-i4官网）下载 i4（爱思助手）<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location001.png" alt="ios-location001.png"></li><li>数据线连接手机后，工具 - 虚拟定位<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location002.png" alt="ios-location002.png"></li><li>搜索位置或经纬度录入设置<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location003.png" alt="ios-location003.png"></li></ol><p><strong>注意</strong><br>iOS14系统仅支持3个小时，若恢复真实位置，需要重新启动手机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用&lt;strong&gt;i4&lt;/strong&gt; 修改软件虚拟位置，步骤入下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mac appStore（或PC-i4官网）下载 i4（爱思助手）&lt;br&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-i
      
    
    </summary>
    
    
    
      <category term="i4" scheme="https://cl9000.github.io/tags/i4/"/>
    
      <category term="工具" scheme="https://cl9000.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="虚拟定位" scheme="https://cl9000.github.io/tags/%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://cl9000.github.io/2020/01/17/Docker/"/>
    <id>https://cl9000.github.io/2020/01/17/Docker/</id>
    <published>2020-01-17T06:11:39.000Z</published>
    <updated>2020-04-26T08:40:08.731Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="docker">docker</span></h3><blockquote><p><a href="https://dashboard.daocloud.io/cluster-private/a8b80bb5-bc0f-4b58-80d7-270586d4692b" target="_blank" rel="noopener">DaoCloud Services - dashboard.daocloud</a><br><a href="http://guide-wiki.daocloud.io:8090/dcs/daocloud-services-9152632.html" target="_blank" rel="noopener">DaoCloud Services 文档</a><br><a href="https://www.runoob.com/docker/docker-compose.html" target="_blank" rel="noopener">菜鸟教程 - Docker</a><br><a href="https://blog.csdn.net/tony1130/article/details/53181071" target="_blank" rel="noopener">在MacOS下，Docker　images保存在哪个路径下</a><br><a href="https://blog.csdn.net/jiangyu1013/article/details/84572582" target="_blank" rel="noopener">Docker 方式 部署 vue 项目 （docker + vue + nginx）</a><br><a href="https://blog.csdn.net/jason_jeson/article/details/78200623" target="_blank" rel="noopener">Docker 通过Nginx镜像部署Vue项目</a><br><a href="https://yeasy.gitbooks.io/docker_practice/network/dns.html" target="_blank" rel="noopener">Docker —— 从入门到实践</a><br><a href="https://tvvo.gitbooks.io/cloud-insight-docs/content/chapter1.html" target="_blank" rel="noopener">Cloud Insight文档中心</a></p></blockquote><h3><span id="docker-compose">docker-compose</span></h3><p><strong>docker-compose ERROR</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ERROR</span>: <span class="keyword">Version</span> <span class="keyword">in</span> <span class="string">"./docker-compose.yml"</span> is unsupported. </span><br><span class="line">You might be seeing this <span class="keyword">error</span> because you're using the wrong Compose <span class="keyword">file</span> <span class="keyword">version</span>. </span><br><span class="line">Either specify a <span class="keyword">version</span> of <span class="string">"2"</span> (or <span class="string">"2.0"</span>) and place your service definitions </span><br><span class="line">under the `services` key, or omit the `<span class="keyword">version</span>` key and place your service definitions at the root of the <span class="keyword">file</span> to <span class="keyword">use</span> <span class="keyword">version</span> 1.</span><br><span class="line"><span class="keyword">For</span> <span class="keyword">more</span> <span class="keyword">on</span> the Compose <span class="keyword">file</span> <span class="keyword">format</span> versions, see https:<span class="comment">//docs.docker.com/compose/compose-file/</span></span><br></pre></td></tr></table></figure><p>参考方案：<br><a href="https://stackoverflow.com/questions/57456212/error-version-in-docker-compose-yml-is-unsupported" target="_blank" rel="noopener">1-ERROR: Version in “./docker-compose.yml” is unsupported</a><br><a href="https://stackoverflow.com/questions/42139982/version-in-docker-compose-yml-is-unsupported-you-might-be-seeing-this-error/49407448#49407448" target="_blank" rel="noopener">2-ERROR: Version in “./docker-compose.yml” is unsupported</a><br>解决方案：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose --version</span></span><br></pre></td></tr></table></figure><p><a href="https://www.hi-linux.com/posts/12554.html?spm=a2c4e.10696291.0.0.6b3219a4a5aIgH" target="_blank" rel="noopener">运维之美 - 使用 Docker-Compose 编排容器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;docker&quot;&gt;docker&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dashboard.daocloud.io/cluster-private/a8b80bb5-bc0f-4b58-80d7-2705
      
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://cl9000.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客部署到Coding、Gitee、GitHub</title>
    <link href="https://cl9000.github.io/2019/12/20/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Coding-gitee-GitHub/"/>
    <id>https://cl9000.github.io/2019/12/20/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Coding-gitee-GitHub/</id>
    <published>2019-12-20T03:01:53.000Z</published>
    <updated>2020-08-28T08:28:28.303Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="hexo博客部署到coding-gitee-github">Hexo博客部署到Coding、gitee、GitHub</span></h2><p>由于Coding平台进行了更新，Hexo博客部署到 新版Coding 和 gitee 等平台，GitHub已经前面介绍过，现在更新部署流程，希望能够帮到搭建博客的小伙伴们，如果教程有错，希望大家能够指出来，我会及时修改的，谢谢大家的支持！</p><!-- ![本地图片](/NationalDay70_1920x1080.jpg) --><h2><span id="coding平台">Coding平台</span></h2><ol><li>首先去去<a href="https://coding.net/" target="_blank" rel="noopener">Coding官网注册</a>账号，进入官网，选择免费注册。</li></ol><!-- ![本地图片](/0.jpg) --><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-0.jpg" width="400" height="600" alt="图片名称" align="center"><ol start="2"><li>注册完成之后就会进入主页面，然后点击创建新项目，如下图:<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-1.jpg" alt="本地图片"></li></ol><blockquote><ul><li>代码托管项目：用于托管代码仓库，支持多个仓库，并可选择开启 CI/CD 和制品库功能</li><li>项目管理项目：支持 Scrum 敏捷管理和传统任务管理项目，包含需求、任务和缺陷</li><li>DevOps项目：包含项目管理、代码托管、CI/CD 和制品库等功能，提供完整的研发流程</li></ul></blockquote><p><code>可以点进去看看各个项目模板的用处。</code><br>在这里我们选择第三个，DevOps项目，这个含有构建与部署功能。</p><ol start="3"><li><p>选择第三个DevOps项目后，会出现下面的页面：<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-2.jpg" alt="本地图片"></p></li><li><p>设置公钥，可以设置全局、针对单个项目的。<br>4.1、 单项目的公钥，如下图：<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-3.jpg" alt="本地图片"><br>4.2、 全局公钥 - (设置了真多项目的可以跳过这一步)<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-4.jpg" alt="本地图片"><br><strong>公钥可以使用Github，或原来已经生成的。</strong></p></li></ol><blockquote><p>Mac，查看<code>ssh</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~/.ssh  // 查看是否存在，不存在的话，可使用Mac自带的ssh 新生成一个。</span><br><span class="line">// 存在</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制 <code>ssh - 结尾</code>，粘贴到新增的密钥中，名称自定义，选择 <code>永久有效</code>，然后新建。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-5.jpg" alt="本地图片"><br>测试验证：<br><code>$ ssh -T git@git.coding.net</code><br>第一次建立连接会要求信任主机，输入相关的用户名或者密码，在控制台输入验证，验证成功即可。</p><ol start="5"><li>然后复制你的项目地址，粘贴到配置文件 <code>_config.yml</code>，如图所示：<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-6.jpg" alt="本地图片"><br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-7.jpg" alt="本地图片"></li></ol><p>然后再执行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> 部署，这是仓库中便有了部署代码。</p><ol start="6"><li>打开 coding 的管理页面，找到 静态网站，发布静态网站。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-8.jpg" alt="本地图片"><br>填写基本的信息，点击保存：<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-9.jpg" alt="本地图片"><br>点击保存，就会进入下一个页面：<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-10.jpg" alt="本地图片"><br>首次点击 <code>立即部署</code> ，之后就会有部署记录，若需要配置自己的域名，点击上图的 <code>设置</code> 进行设置：<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-11.jpg" alt="本地图片"></li><li>Coding 里面还有些其它的扩展功能，项目协调、制品库、测试管理、文档管理等。这也是一些公司的流程，自己可以尝试下。</li></ol><h2><span id="gitee平台码云">Gitee平台（码云）</span></h2><ol><li>流程基本一致，比较简单，<a href="https://gitee.com/" target="_blank" rel="noopener">码云官网注册</a></li><li>建立仓库，添加公钥，配置本地仓库地址<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-12.jpg" alt="本地图片"></li><li>上传部署博客代码 <code>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></li><li>点击 <code>服务 - Gitee Pages</code>，进入页面查看相关规则，点击部署即可，<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Hexo-Coding-Gitee-13.jpg" alt="本地图片"></li></ol><p>Gitee 平台，免费版不会自动部署<br>Gitee 可以同步其它的仓库代码，例如GitHub，如果已部署了GitHub可直接拉取，部署，更快捷。</p><h2><span id="参考">参考</span></h2><p><a href="https://cloud.tencent.com/developer/article/1580237" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1580237</a></p><br><blockquote style="border-left: 4px solid #3F51B5;padding: 16px 20px;font-size: 14px;border-radius: 0 2px 2px 0;">    <p>本文地址：    <a href="/2019/12/20/Hexo博客部署到Coding-gitee-GitHub/" target="_blank" rel="external">/2019/12/20/Hexo博客部署到Coding-gitee-GitHub/</a></p></blockquote><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;hexo博客部署到coding-gitee-github&quot;&gt;Hexo博客部署到Coding、gitee、GitHub&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;由于Coding平台进行了更新，Hexo博客部署到 新版Coding 和 gitee 等平台，GitHu
      
    
    </summary>
    
    
    
      <category term="HEXO" scheme="https://cl9000.github.io/tags/HEXO/"/>
    
      <category term="GitHub" scheme="https://cl9000.github.io/tags/GitHub/"/>
    
      <category term="Coding" scheme="https://cl9000.github.io/tags/Coding/"/>
    
      <category term="Gitee" scheme="https://cl9000.github.io/tags/Gitee/"/>
    
      <category term="码云" scheme="https://cl9000.github.io/tags/%E7%A0%81%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>国内解决 reCAPTCHA 无法访问</title>
    <link href="https://cl9000.github.io/2019/10/21/%E8%A7%A3%E5%86%B3recaptcha%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/"/>
    <id>https://cl9000.github.io/2019/10/21/%E8%A7%A3%E5%86%B3recaptcha%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/</id>
    <published>2019-10-21T03:08:32.000Z</published>
    <updated>2020-10-21T03:25:46.935Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/reCAPTCHA.png" alt="reCAPTCHA.png"></p><ol><li><p>打开 Chrome 或 Firefox 浏览器，此以Chrome为主</p></li><li><p>下载 gooreplacer <a href="https://pan.baidu.com/s/1n24QfvGstMfI27HpF3LVXw" target="_blank" rel="noopener">链接:https://pan.baidu.com/s/1n24QfvGstMfI27HpF3LVXw  密码:rb0d</a> 或方法二（此处不作具体介绍，内有详细操作方法）</p></li><li><p>打开 <code>chrome://extensions/</code>，将下载的 <code>gooreplacer.crx</code> 拖进扩展，添加安装</p></li><li><p>点击 Gooreplacer，打开 Gooreplacer操作面板</p></li><li><p>点击 <code>新增</code></p></li><li><p>在Source（匹配模式）框内填入 <code>www.google.com/recaptcha</code></p></li><li><p>在Destination （目标地址）栏填入 <code>recaptcha.net/recaptcha</code></p></li><li><p>点击 Submit （提交）</p></li><li><p>重启浏览器，然后访问需要recaptcha的网站</p></li></ol><p>注意：下载包内还有另一种方法，也可以尝试，此仅为收集方法，不做相关解释，不承担任何责任。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/reCAPTCHA.png&quot; alt=&quot;reCAPTCHA.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开 Chrome 或 Firefox 浏
      
    
    </summary>
    
    
    
      <category term="reCAPTCHA" scheme="https://cl9000.github.io/tags/reCAPTCHA/"/>
    
      <category term="Google人机验证" scheme="https://cl9000.github.io/tags/Google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81/"/>
    
      <category term="gooreplacer" scheme="https://cl9000.github.io/tags/gooreplacer/"/>
    
  </entry>
  
  <entry>
    <title>在GitHub搭建免费图床</title>
    <link href="https://cl9000.github.io/2019/09/26/Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <id>https://cl9000.github.io/2019/09/26/Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</id>
    <published>2019-09-26T10:43:32.000Z</published>
    <updated>2020-04-27T01:43:54.556Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="在github搭建免费图床-mac版本">在GitHub搭建免费图床 - Mac版本</span></h2><p>用到：<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>、 <a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a>、 <a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo</a>  或 <a href="https://apps.apple.com/cn/app/ipic-markdown-%E5%9B%BE%E5%BA%8A-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7/id1101244278?mt=12" target="_blank" rel="noopener">iPic</a>，这里使用 <strong>PicGo</strong></p><p><a href="https://toolinbox.net/iPic/" target="_blank" rel="noopener">iPic 参考</a></p><h2><span id="为甚">为甚</span></h2><p>之前为了托管突图片使用的图床是七牛云图床，用着还不错，但后来开始收费了，又迁移到新浪图床，币花光了，然后又放在了本地去加载，但后期发布其他平台不好使…，网上找了一堆图床都开始开始收费了，毕竟人家也要吃饭。</p><p>于是有了现在在Github上托管，直接访问的话，国内速度很慢，便借助了一个免费的CDN <a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a>，之前一直用其访问资源文件，速度还可以的，但基本只能用于个人项目。</p><h2><span id="下载picgo">下载PicGo</span></h2><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo下载链接</a> 查看不同的版本，根据系统平台下载对应程序，<strong>Mac</strong> 选择 <strong>dmg</strong> 文件进行下载即可。</p><h2><span id="配置-github">配置 GitHub</span></h2><p>首先去Github创建个图片仓库，名称自定义，配置时名称要写对</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/gh-wel-imgs-0.png" alt></p><p>新建 Personal access tokens， 名称自定义，自己用的话全部钩上。（其实权限只要 repo 即可）。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/gh-wel-imgs-1.png" alt></p><h2><span id="配置-picgo">配置 PicGo</span></h2><p>下载完成后安装打开，Mac设置下允许任何来源</p><p>运行 PicGo 并进行配置，带 <code>*</code> 的是必须设置项：<br><strong>仓库名称：</strong> <code>&lt;用户名&gt;/&lt;preject&gt;</code>  例如: cl9000/wel-imgs<br><strong>分支：</strong> <code>master</code><br><strong>token：</strong> 生成的 <code>Personal access tokens</code><br><strong>指定存储路径：</strong> <code>images/</code>   （PicGo上传文件时，将自动在Github仓库中创建此文件夹。注意末尾要加 <strong>/</strong>）<br><strong>自定义域名：</strong> <code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code><br>（如果设置了自定义域名，PicGo生成的访问链接，将是 <code>自定义域名+文件名</code> 的访问方式，这里使用 jsDelivr 加速访问。）</p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">PicGo配置文档</a></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/gh-wel-imgs-2.png" alt></p><p>iPic用法差不多， <a href="https://toolinbox.net/iPic/" target="_blank" rel="noopener">iPic 参考</a>。</p><h2><span id="后记">后记</span></h2><p><strong>注意：</strong> 这个软件目前不支持删除功能，删除需要去GitHub手动删除。<br>使用 <a href="https://www.electronjs.org/" target="_blank" rel="noopener">Electron</a> 开发。</p><h2><span id="refrence">Refrence</span></h2><ul><li><a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">PicGo</a></li><li><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo 下载地址</a></li><li><a href="https://cl9000.github.io/">在GitHub搭建免费图床 cl9000</a></li><li><a href="http://www.blossomingmay.com/blog/2019-08/%E5%A6%82%E4%BD%95%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/" target="_blank" rel="noopener">如何在自己的GitHub搭建图床</a></li><li><a href="https://www.cnblogs.com/lfri/p/12210721.html" target="_blank" rel="noopener">GitHub+jsDelivr+PicGo搭建快速免费图床</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;在github搭建免费图床-mac版本&quot;&gt;在GitHub搭建免费图床 - Mac版本&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;用到：&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitH
      
    
    </summary>
    
    
      <category term="Github" scheme="https://cl9000.github.io/categories/Github/"/>
    
      <category term="图床" scheme="https://cl9000.github.io/categories/Github/%E5%9B%BE%E5%BA%8A/"/>
    
    
      <category term="Github" scheme="https://cl9000.github.io/tags/Github/"/>
    
      <category term="图床" scheme="https://cl9000.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 反向代理解决跨域、Mac配置hosts</title>
    <link href="https://cl9000.github.io/2019/07/14/Nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E3%80%81Mac%E9%85%8D%E7%BD%AEhosts/"/>
    <id>https://cl9000.github.io/2019/07/14/Nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E3%80%81Mac%E9%85%8D%E7%BD%AEhosts/</id>
    <published>2019-07-14T05:23:31.000Z</published>
    <updated>2020-07-20T07:40:59.826Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="nginx-反向代理解决跨域-mac配置hosts">Nginx 反向代理解决跨域、Mac配置hosts</span></h2><blockquote><p>Nginx 是一个很强大的高性能Web和反向代理服务。利用好配置文件，将会很方便。<a href="https://baike.baidu.com/item/nginx" target="_blank" rel="noopener">Nginx 百度百科</a></p></blockquote><h3><span id="正向代理和反向代理">正向代理和反向代理</span></h3><p>正向代理的例子：隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都由代理服务器代替来请求。 <strong>VPN 就是正向代理</strong><br>反向代理的例子：反向代理隐藏了真实的服务端</p><h3><span id="使用node搭建简易服务器">使用node搭建简易服务器</span></h3><p>先用node写一个服务接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (req.url === <span class="string">'/favicon.ico'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> parseUrl = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'parseUrl'</span>, parseUrl.pathname)</span><br><span class="line">  <span class="keyword">if</span> (parseUrl.pathname === <span class="string">'/api/getData'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> list = &#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'张三'</span>&#125;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-Type'</span>:<span class="string">'text/html;charset=UTF-8'</span>&#125;)  </span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(list))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.write(<span class="string">`port: 8088`</span>)</span><br><span class="line">    res.end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8088</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is starting on port 8088'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行启动命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">node</span> <span class="title">index</span>.js</span><br></pre></td></tr></table></figure><p>访问测试一下，测试地址 <a href="http://localhost:8088/api/getData" target="_blank" rel="noopener">http://localhost:8088/api/getData</a><br>响应返回服务写入测试数据即可，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"张三"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="跨域问题">跨域问题</span></h3><h4><span id="简易测试接口页面">简易测试接口页面</span></h4><p>写一个简易的 ajax 请求页面，用http-server启动访问下，F12查看日志，可以发现请求跨域了：</p><blockquote><p>http-server 启动 访问接口为全地址： <code>http://127.0.0.1:8088/api/getData</code><br>Nginx 反向代理 访问接口为相对地址：  <code>/api/getData</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"never"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试跨域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  (<span class="function"><span class="keyword">function</span><span class="params">(para)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">/* 服务请求 */</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// get请求</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> SERVER_URL = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// ajax.open('GET', 'http://t.weather.sojson.com/api/weather/city/101030100');</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// ajax.open('GET', '/api/weather/city/101030100', true); // 或 http://localhost:80/api/weather/city/101030100</span></span></span><br><span class="line"><span class="actionscript">    ajax.open(<span class="string">'GET'</span>, <span class="string">'http://127.0.0.1:8088/api/getData'</span>, <span class="literal">true</span>); <span class="comment">// http-server 启动访问</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// ajax.open('GET', '/api/getData', true); // Nginx 反向代理</span></span></span><br><span class="line">    ajax.send();</span><br><span class="line"><span class="actionscript">    ajax.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">      if (ajax.readyState == 4 &amp;&amp; ajax.status == 200) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(ajax.responseText);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// post请求</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// var xhr = new XMLHttpRequest();</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// xhr.open('post', SERVER_URL + '/api/getData');</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// xhr.send('name=233');</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// xhr.onreadystatechange = function () &#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//     console.log(xhr.responseText);</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'id = '</span> + para.id);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'name = '</span> + para.name);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'url = '</span> + para.url);</span></span><br><span class="line">  &#125;)(&#123;</span><br><span class="line">    id: 13,</span><br><span class="line"><span class="actionscript">    name: <span class="string">'张三'</span>,</span></span><br><span class="line"><span class="actionscript">    url: <span class="string">'http://www.bing.com?'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器访问测试地址：<a href="http://localhost/html5/" target="_blank" rel="noopener">http://localhost/html5/</a>, 端口是80，可默认不带<br>跨域问题返回日志：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'http://127.0.0.1:8088/api/getData'</span> <span class="keyword">from</span> origin <span class="string">'http://127.0.0.1:8080'</span> has been blocked by CORS policy: No <span class="string">'Access-Control-Allow-Origin'</span> header is present on the requested resource.</span><br><span class="line">GET http:<span class="comment">//127.0.0.1:8088/api/getData net::ERR_FAILED</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/kuayulog.png" alt="kuayulog.png"></p><blockquote><p>关于跨域的问题一般是由后台添加请求头或CORS进行解决，或Nginx反向代理，前端不需要做额外操作，此处仅为前端单独测试。</p></blockquote><h4><span id="使用mac自带nginx或重新单独自定义安装">使用Mac自带Nginx，或重新单独自定义安装</span></h4><p>Mac 自带 Nginx 路径及启动关闭操作命令：</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>nginx    <span class="regexp">//</span> 符号链接路径</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/var/</span>www  <span class="regexp">//</span> 默认服务器根目录</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>nginx <span class="regexp">//</span> nginx配置目录，nginx配置相关的文件都在这个目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动 nginx</span></span><br><span class="line">nginx   <span class="regexp">//</span> or: <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>nginx</span><br><span class="line"><span class="comment">###  重新加载配置 | 重启 | 停止 |退出</span></span><br><span class="line">nginx -s reload|reopen|stop|quit </span><br><span class="line"><span class="comment"># 测试配置是否有语法错误</span></span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><h4><span id="nginxconf配置配置反向代理">nginx.conf配置，配置反向代理</span></h4><p>配置代理，下面意思就是我们请求中有 api 这样的就会代理到 <code>http://127.0.0.1:8088</code>，所以我们只要访问 <code>http://localhost:80/api/getData</code>，这个不跨域的接口，然后就会由Nginx截取接口并反向代理到 <code>http://localhost:8088/api/getData</code>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">      <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">      <span class="attribute">server_name</span> localhost,test2.com;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#charset koi8-r;</span></span><br><span class="line">      <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">      <span class="attribute">location</span> / &#123;</span><br><span class="line">          <span class="attribute">root</span>   html;</span><br><span class="line">          <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /html5 &#123;</span><br><span class="line">         <span class="attribute">alias</span> /Users/weichanglu/Desktop/Login;</span><br><span class="line">         </span><br><span class="line">         <span class="comment"># HTML5 History 模式配置</span></span><br><span class="line">         <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /html5/index.html;</span><br><span class="line">         <span class="comment">#index  index.html;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"># URL重写 仅将 /api 下的url反向代理到后端地址</span></span><br><span class="line">      <span class="attribute">location</span><span class="regexp"> ^~</span> /api &#123;</span><br><span class="line">          <span class="comment"># rewrite ^/api/(.*)$ /$1 break; ## /api/xxx 改为 /xxx</span></span><br><span class="line">          <span class="attribute">proxy_pass</span> http://127.0.0.1:8088; <span class="comment"># 转发地址</span></span><br><span class="line">          <span class="comment"># proxy_pass http://t.weather.sojson.com;</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>配置好之后需要重启一下 Nginx 服务，执行一下重启命名即可。若有问题，可先停掉 Ngix，再重新启动。<br>若 80 端口不可用，可换用其它端口，或者清掉Mac自带 Apache 的80端口<br>查看Nginx占用进程： <code>$ ps aux | grep nginx</code></p><h4><span id="验证跨域的解决">验证跨域的解决</span></h4><p>使用 Nginx 需要把 ajax 请求的接口换成相对地址，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax.open('GET', 'http://t.weather.sojson.com/api/weather/city/101030100');</span></span><br><span class="line"><span class="comment">// ajax.open('GET', '/api/weather/city/101030100', true);</span></span><br><span class="line"><span class="comment">// ajax.open('GET', 'http://127.0.0.1:8088/api/getData', true);</span></span><br><span class="line">   ajax.open(<span class="string">'GET'</span>, <span class="string">'/api/getData'</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>浏览器重新访问测试一下，地址 <a href="http://localhost/html5/" target="_blank" rel="noopener">http://localhost/html5/</a><br>现在就不会在有跨域的问题了。</p><h3><span id="自定义域名本地测试修改hosts文件">自定义域名，本地测试，修改hosts文件</span></h3><blockquote><p>Hosts是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。 <a href="https://baike.baidu.com/item/hosts/10474546" target="_blank" rel="noopener">hosts 百度百科</a></p></blockquote><h4><span id="nginx添加测试域名-修改hosts文件">Nginx添加测试域名、修改hosts文件</span></h4><p>在Nginx中添加自定义测试域名，并重启 Nginx</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost,test2.com;</span><br><span class="line"></span><br><span class="line"><span class="comment">#charset koi8-r;</span></span><br><span class="line"><span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>   html;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mac hosts文件路径(command + shift + G 快速前往文件夹)<br><code>/etc/hosts</code></p><blockquote><p>注意：host文件是个<code>文本编辑文稿类型</code>！！！需要复制到外部编辑完后，在进行验证替换即可生效，若不生效，后面或有清理 Chrom 浏览器的DNS链接方法。</p></blockquote><p>编辑 hosts 文件，参考其它新增一行：<br><code>127.0.0.1 test2.com</code><br>为了验证是否生效，可以再新增一行：<br><code>127.0.0.1 www.taobao.com</code><br>替换掉源文件后，浏览器输入 <a href="https://www.taobao.com/" target="_blank" rel="noopener">https://www.taobao.com/</a>，看是否还可以访问，不能正常访问说明已经生效。（验证完即可删除，否则原网站不可访问）</p><p>测试域名地址: <a href="http://test2.com/html5/" target="_blank" rel="noopener">http://test2.com/html5/</a>，正常访问，说明已生效</p><h4><span id="若hosts文件并不生效">若hosts文件并不生效</span></h4><p>Chrome浏览器输入：<a href="chrome://net-internals/#dns" target="_blank" rel="noopener">chrome://net-internals/#dns</a><br>选择 <code>DNS</code>  <strong>Host resolver cache</strong> 点击下 <strong>Clear host cache</strong><br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/chrome-dns.png" alt="chrome-dns.png"></p><p>再重新访问：<br><a href="http://test2.com/html5/" target="_blank" rel="noopener">http://test2.com/html5/</a> 正常访问，说明已生效</p><p><a href="https://www.taobao.com/" target="_blank" rel="noopener">https://www.taobao.com/</a> 不能正常访问说明已经生效。（验证完即可删除，否则原网站不可访问）</p><h3><span id="旧方法">旧方法</span></h3><ul><li>CORS 全称Cross-Origin Resource Sharing，是HTML5规范定义的如何跨域访问资源。<br>服务端进行设置CORS策略<br>Access-Control-Allow-Origin: <a href="http://test.com" target="_blank" rel="noopener">http://test.com</a><br>Access-Control-Allow-Methods: POST, GET, PUT, OPTIONS<br>Access-Control-Max-Age: 86400</li></ul><ul><li>JSONP通常以函数调用的形式返回<br>需要首先在页面中准备好回调函数，例如：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"jsonp"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"getData()"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 45px;"</span>&gt;</span>刷新请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 提前准备好的回调方法</span><br><span class="line">function refreshPrice(data) &#123;</span><br><span class="line">  var p = document.getElementById('jsonp');</span><br><span class="line">  p.innerHTML = '股票当前价格：' + data['0000001'].name +': ' + data['0000001'].price + '；' + data['1399001'].name + ': ' + data['1399001'].price; </span><br><span class="line">&#125;</span><br><span class="line">// 触发函数</span><br><span class="line">function getData() &#123;</span><br><span class="line">  var js = document.createElement('script'),</span><br><span class="line">      head = document.getElementsByTagName('head')[0];</span><br><span class="line">  js.src = 'http://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice';</span><br><span class="line">  head.appendChild(js);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就完成了跨域加载数据。建议主要用于测试，<br>跨域一般后台进行解决 CORS</p><h3><span id="参考">参考</span></h3><p><a href="https://zhuanlan.zhihu.com/p/94197713" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/94197713</a><br><a href="https://www.cnblogs.com/hustskyking/p/hosts-modify.html" target="_blank" rel="noopener">修改Hosts为何不生效，是DNS缓存？</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;nginx-反向代理解决跨域-mac配置hosts&quot;&gt;Nginx 反向代理解决跨域、Mac配置hosts&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Nginx 是一个很强大的高性能Web和反向代理服务。利用好配置文件，将会很方便。&lt;a h
      
    
    </summary>
    
    
    
      <category term="Nginx" scheme="https://cl9000.github.io/tags/Nginx/"/>
    
      <category term="跨域" scheme="https://cl9000.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="反向代理" scheme="https://cl9000.github.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="hosts" scheme="https://cl9000.github.io/tags/hosts/"/>
    
  </entry>
  
  <entry>
    <title>使用 Github，jsDelivr，TravisCI 搭建轻量 CDN</title>
    <link href="https://cl9000.github.io/2019/04/22/%E5%85%8D%E8%B4%B9-%E5%BF%AB%E9%80%9F-%E5%8F%AF%E9%9D%A0CDN/"/>
    <id>https://cl9000.github.io/2019/04/22/%E5%85%8D%E8%B4%B9-%E5%BF%AB%E9%80%9F-%E5%8F%AF%E9%9D%A0CDN/</id>
    <published>2019-04-22T05:55:58.000Z</published>
    <updated>2020-08-28T08:22:42.603Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="使用-githubjsdelivr-travisci-搭建轻量-cdn">使用 Github，jsDelivr， TravisCI 搭建轻量 CDN</span></h2><h2><span id="免费-快速-可靠-cdn">免费-快速-可靠 CDN</span></h2><p>内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。    <strong>---- [万维百科]</strong></p><h2><span id="jsdelivr-官网">jsDelivr 官网</span></h2><p><strong><a href="http://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr – Open Source CDN</a></strong></p><!-- ![jsDelivr-index.jpg](https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/jsDelivr-index.jpg) --><p><a href="/2019/04/22/免费-快速-可靠CDN/jsDelivr-index.jpg"><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/jsDelivr-index.jpg" width="100%" height="100%" alt="图片名称" align="center"></a><br><a href="/2019/04/22/免费-快速-可靠CDN/jsDelivr-points.jpg"><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/jsDelivr-points.jpg" width="100%" height="100%" alt="图片名称" align="center"></a></p><h2><span id="使用">使用</span></h2><h3><span id="1-使用方式-官网首页有各个平台的引用资源方式">1、使用方式 官网首页有各个平台的引用资源方式</span></h3><h4><span id="npm">#NPM</span></h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/<span class="regexp">/加载npm上托管的任何项目</span></span><br><span class="line"><span class="regexp">https:/</span><span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/package@version/file</span></span><br><span class="line"></span><br><span class="line">/<span class="regexp">/加载jQuery v3.2.1</span></span><br><span class="line"><span class="regexp">https:/</span><span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/jquery@3.2.1/dist</span><span class="regexp">/jquery.min.js</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/使用版本范围而不是特定版本</span></span><br><span class="line"><span class="regexp">https:/</span><span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/jquery@3.2/dist</span><span class="regexp">/jquery.min.js</span></span><br><span class="line"><span class="regexp">https:/</span><span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/jquery@3/dist</span><span class="regexp">/jquery.min.js</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/完全省略该版本以获取最新版本</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/您不应该在生产中使用它</span></span><br><span class="line"><span class="regexp">https:/</span><span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/jquery/dist</span><span class="regexp">/jquery.min.js</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/将“ .min”添加到任何JS /</span> CSS文件以获取缩小版本</span><br><span class="line">/<span class="regexp">/如果不存在，我们会为您生成</span></span><br><span class="line"><span class="regexp">https:/</span><span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/jquery@3.2.1/src</span><span class="regexp">/core.min.js</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/省略文件路径以获取默认文件</span></span><br><span class="line"><span class="regexp">https:/</span><span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/jquery@3.2</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/在末尾添加/</span>以获取目录列表</span><br><span class="line"><span class="symbol">https:</span>/<span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/jquery/</span></span><br></pre></td></tr></table></figure><h4><span id="github">#GitHub</span></h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span>加载任何GitHub版本，提交或分支</span><br><span class="line"><span class="string">//</span>注意：我们建议对支持npm的项目使用npm</span><br><span class="line">https:<span class="string">//cdn.jsdelivr.net/gh/user/repo</span>@<span class="keyword">version</span>/file</span><br><span class="line"><span class="string">...</span> <span class="string">...</span></span><br></pre></td></tr></table></figure><h4><span id="wordpress">#WordPress</span></h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//从WordPress.org插件SVN存储库中加载任何插件</span><br><span class="line">http<span class="variable">s:</span>//cdn.jsdelivr.net/<span class="keyword">wp</span>/plugins/project/<span class="keyword">tags</span>/<span class="keyword">version</span>/<span class="keyword">file</span></span><br><span class="line"></span><br><span class="line">//加载确切的版本</span><br><span class="line">http<span class="variable">s:</span>//cdn.jsdelivr.net/<span class="keyword">wp</span>/plugins/<span class="keyword">wp</span>-slimstat/<span class="keyword">tags</span>/<span class="number">4.6</span>.<span class="number">5</span>/<span class="keyword">wp</span>-slimstat.js</span><br><span class="line"></span><br><span class="line">//加载最新版本</span><br><span class="line">//您不应该在生产中使用它</span><br><span class="line">http<span class="variable">s:</span>//cdn.jsdelivr.net/<span class="keyword">wp</span>/plugins/<span class="keyword">wp</span>-slimstat/trunk/<span class="keyword">wp</span>-slimstat.js</span><br><span class="line"></span><br><span class="line">//从WordPress.org主题SVN存储库中加载任何主题</span><br><span class="line">http<span class="variable">s:</span>//cdn.jsdelivr.net/<span class="keyword">wp</span>/themes/project/<span class="keyword">version</span>/<span class="keyword">file</span></span><br><span class="line"></span><br><span class="line">//加载确切的版本</span><br><span class="line">http<span class="variable">s:</span>//cdn.jsdelivr.net/<span class="keyword">wp</span>/themes/twenty-十八teen / <span class="number">1.7</span> / assets / js / html5.js</span><br><span class="line"></span><br><span class="line">//将“ .<span class="built_in">min</span>”添加到任何JS / CSS文件以获取缩小版本</span><br><span class="line">//如果不存在，我们会为您生成</span><br></pre></td></tr></table></figure><p><strong>以下 使用<code>github</code>作为存储， jsDelivr 做 CDN 服务器</strong></p><blockquote><p>注：jsDeliver资源限制20M。</p></blockquote><h3><span id="2-新建github仓库不是重点自己新建">2、新建gitHub仓库（不是重点，自己新建）</span></h3><p>※ 新建仓库，并将仓库 clone 至本地，上传相关资源文件，并提交推送到仓库。<strong>下图已圈重点※</strong>：<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/jsDelivr-gitHub0.jpg" alt="jsDelivr-gitHub0.jpg"></p><p>※ 进入 <code>releases</code> 进行手动打包，如下图：<code>tu</code>；<strong>后面讲使用 <strong><a href="https://travis-ci.org/" target="_blank" rel="noopener">TravisCI</a></strong> 做自动更新</strong><br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/jsDelivr-gitHub1.jpg" alt="jsDelivr-gitHub1.jpg"></p><h3><span id="3-引用方式圈域名重点">3、引用方式（圈域名重点）</span></h3><p>※ 引用</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过一会就可以访问测试了</span></span><br><span class="line"><span class="meta">## GitHub 方式</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//cdn.jsdelivr.net/gh/user/repo@version/file</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//cdn.jsdelivr.net/gh/github用户名/项目名@版本号/...</span></span><br><span class="line">例如</span><br><span class="line"><span class="symbol">https:</span><span class="comment">//cdn.jsdelivr.net/gh/cl9000/jsDelivr-Test@1.0/images/2.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="meta">## NPM 方式</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//cdn.jsdelivr.net/npm/package@version/file</span></span><br></pre></td></tr></table></figure><p>※ 文件浏览和流量统计<br>jsDelivr 提供了一个可以看 CDN 文件和使用流量的地址：<a href="https://cdn.jsdelivr.net/gh/cl9000/jsDelivr-Test" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/cl9000/jsDelivr-Test</a> ，如下图：（新创建的要等段时间才会有统计结果）。</p><h2><span id="演示demo">演示DEMO</span></h2><blockquote><p><a href="https://cdn.jsdelivr.net/gh/cl9000/jsDelivr-Test@1.0/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/cl9000/jsDelivr-Test@1.0/</a><br><a href="https://cdn.jsdelivr.net/gh/cl9000/jsDelivr-Test@1.0/images/2.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/cl9000/jsDelivr-Test@1.0/images/2.jpg</a><br><a href="https://cdn.jsdelivr.net/gh/cl9000/jsDelivr-Test@1.0/js/wenzi.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/cl9000/jsDelivr-Test@1.0/js/wenzi.js</a></p></blockquote><h2><span id="jsdelivr参考">jsDelivr参考</span></h2><blockquote><p><a href="https://www.jsdelivr.com/package/gh/cl9000/jsDelivr-Test" target="_blank" rel="noopener">cl9000/jsDelivr-Test</a><br><a href="http://www.jsdelivr.com/" target="_blank" rel="noopener">http://www.jsdelivr.com/</a><br><a href="https://yremp.live/jsdeliver/" target="_blank" rel="noopener">https://yremp.live/jsdeliver/</a><br><a href="https://chi.miantiao.me/make-a-cdn-by-github-jsdelivr-travisci/" target="_blank" rel="noopener">https://chi.miantiao.me/make-a-cdn-by-github-jsdelivr-travisci/</a></p></blockquote><h2><span id="持续集成-ci">持续集成 CI</span></h2><p><a href="https://github.blog/2017-11-07-github-welcomes-all-ci-tools/" target="_blank" rel="noopener">CI Tools</a><br><a href="https://zhuanlan.zhihu.com/p/59686072" target="_blank" rel="noopener">CI</a><br>CI (Continuous Integration，持续集成)。<br>CI 软件监视仓库，可以在开发者发送提交后立刻执行自动测试、构建、部署。通过持续执行这样一个操作，提高效率，简化构建部署，一次配置…。<br>常见的CI有：　Travis CI 、 Jenkins 、Circle CI</p><h2><span id="travis-ci">Travis CI</span></h2><h2><span id="介绍">介绍</span></h2><p>Travis-CI是一个使用<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML</a>格式配置用于持续集成完成自动化测试构建部署的开源项目</p><p>目前 Travis-CI 分：</p><ul><li><a href="http://travis-ci.org/" target="_blank" rel="noopener">http://travis-ci.org/</a> ==  Github公开项目        <strong>&lt;本文讲这个&gt;</strong></li><li><a href="http://travis-ci.com/" target="_blank" rel="noopener">http://travis-ci.com/</a> ==  Github私有付费项目（私有库）<br>官方文档地址：<a href="https://docs.travis-ci.com/" target="_blank" rel="noopener">https://docs.travis-ci.com/</a></li></ul><h2><span id="travis-使用">Travis 使用</span></h2><p>Travis 注册登录 <strong><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI 官网 travis-ci.org</a></strong> ，使用 GitHub 账号授权登录即可，登录之后，Travis 就会实时同步你 GitHub 账号的仓库，然后打开个人页面并给你想要构建的项目启用 Travis，Travis 会监听这个仓库的所有变化。如下图：<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/TravisCI-0.jpg" alt="TravisCI-0.jpg"></p><h2><span id="travisyml-配置文件">.travis.yml 配置文件</span></h2><p>新建 <code>.travis.yml</code> 配置文件放到项目根目录下。 <code>（Mac可以使用</code>touch<code>命令创建此文件，显示隐藏文件快捷键：command+shift+. ）</code><br>Travis 会根据 .travis.yml 里的内容进行构建，下面是个简单的 构建并部署发布到 GitHub-releases 的配置。<code>&lt;使用 go（可使用其它语言），只是符合规则，必须设置一门语言&gt;</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">notifications:</span>  <span class="comment"># 每次构建的时候是否邮件通知</span></span><br><span class="line">  <span class="attr">email:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">language:</span> <span class="string">go</span> <span class="comment"># 指定项目语言</span></span><br><span class="line"><span class="attr">go:</span> <span class="number">1.10</span><span class="string">.x</span>   <span class="comment"># 指定语言版本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span> <span class="string">"echo before_install ==="</span></span><br><span class="line"><span class="attr">install:</span> <span class="literal">true</span> <span class="comment"># 跳过 install 阶段，因为已经定义了 before_install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span> <span class="string">"echo before_script ==="</span></span><br><span class="line"><span class="attr">script:</span> <span class="string">""</span> <span class="comment"># 执行脚本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_deploy:</span> <span class="string">"echo ready? - before_deploy ===="</span></span><br><span class="line"><span class="attr">after_deploy:</span> <span class="string">"echo end! - after_deploy ====="</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">releases</span> <span class="comment"># 部署到 GitHub Release，除此之外，Travis CI 还支持发布到 fir.im、AWS、Google App Engine 等</span></span><br><span class="line">  <span class="attr">api_key:</span> <span class="string">$&#123;GH_TOKEN&#125;</span> <span class="comment"># 填写 GitHub 的 token （Settings -&gt; Personal access tokens -&gt; Generate new token）</span></span><br><span class="line">  <span class="comment"># api_key:</span></span><br><span class="line">    <span class="comment"># secure: "GuH73nqFGRjOLL8me8/upKFBaro8pDMYogvDhK3McMbCH3A4uW68Sx9BRHMXbF67VU0Zmd4rh2kS6zF2NodiLK9HQHydUD4s4l1vwGQ4Hi67zXH3XSPVhMTx3SKLrO7gDmKha9npd/6g8A0gQL9H+XAsqTvcNCVCAfkqOV58DxEFHEQZFlgQawDTwhi3LFacrN2RfjtSzAx0MNHFW/2FTH8QAdYqTHCw/H8HIYg1PsheMVVKwBXgWPO4fXDAo5r7nJT95FR2NsI8sm2smeVp+aQ3jf32TSOIxNppn4qYh6qT307EmOkO4WKHWOWfH/WEyqx65336v6ltw8hQiQXcKXv/iwp69Zyvjva8Lq1pXRiB38oVSVyRRvTByqEMj2pyXNCBufM106YsfhAuB2V+9JwPvW3JRR+9qi68WzkpDE7BaB6oyTBoj4Plu/qf3aIdR02dxt1E+nLrAB42tWWbCUIqhnhhZ4yArjYa3v6S+u+BREIBLyM1ZBa2MQ7D3UwtRCIYbVfI9aJq2IjWOV9Fo4si7l3/muSbmeCJ5alulLQNMLK6eN/GKTfKhok5ajVb3YuzcAf24VZPDsdFfTQ2SbKfY9uER0rvwi5OV0T+yVbJAeMkk5Pvt58au1m/psiPPlAqNMwHT/bb2OZyNPgV6e7wATLpPfN8r9wS07GFP0s="</span></span><br><span class="line">    <span class="comment"># secure: $&#123;GH_TOKEN&#125; # (Octokit::Unauthorized) 使用 Travis 对token进行的加密</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">jsDelivr-Test.zip</span> <span class="comment"># 部署文件路径、文件名</span></span><br><span class="line">  <span class="attr">skip_cleanup:</span> <span class="literal">true</span>  <span class="comment"># 设置为 true 以跳过清理</span></span><br><span class="line">  <span class="attr">draft:</span> <span class="literal">true</span> <span class="comment"># 不发表drafs</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">cl9000/jsDelivr-Test</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># tags 设置为 true 表示只有在有 tag 的情况下才部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="comment"># 将其添加到 Travis 的环境变量中</span></span><br><span class="line">    <span class="comment"># - GH_URL: github.com:cl9000/jsDelivr-Test.git</span></span><br></pre></td></tr></table></figure><p>具体的配置详情可参阅官网文档：</p><h5><span id="travis-官网文档配置"><strong>· <a href="https://docs.travis-ci.com/" target="_blank" rel="noopener">Travis 官网文档配置</a></strong></span></h5><h5><span id="部署方式-deployment"><strong>· <a href="https://docs.travis-ci.com/user/deployment" target="_blank" rel="noopener">部署方式 /deployment</a></strong></span></h5><h5><span id="加密密钥-encryption-keys"><strong>· <a href="https://docs.travis-ci.com/user/encryption-keys#stq=&amp;stp=0" target="_blank" rel="noopener">加密密钥 /Encryption keys</a></strong></span></h5><h5><span id="github发布上传releases-github-releases-uploading"><strong>· <a href="https://docs.travis-ci.com/user/deployment/releases/" target="_blank" rel="noopener">GitHub发布上传releases /GitHub Releases Uploading</a></strong></span></h5><h5><span id="官方模板-github发布上传releases-github-releases-uploading"><strong>· <a href="https://docs.travis-ci.com/user/deployment/releases/" target="_blank" rel="noopener">官方模板 - GitHub发布上传releases - GitHub Releases Uploading</a></strong></span></h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">releases</span></span><br><span class="line">  <span class="attr">api_key:</span> <span class="string">"GITHUB OAUTH TOKEN"</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">"FILE TO UPLOAD"</span></span><br><span class="line">  <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2><span id="加密构建中使用到的密码和toke">加密构建中使用到的密码和toke</span></h2><p>TODO: 待补充。。。。<br>自动化构建中需要用到密码和证书，必须保证的安全性。为此Travis CI为此提供了2种解决方案：</p><ul><li>一种是对敏感信息、密码、证书、token等进行对称加密，在CI构建环境时解密；</li><li>一种是将密码等通过Travis CI的控制台（即网站）设置为构建时的环境变量；</li></ul><h2><span id="创建-github-personal-access-token">创建 Github Personal Access Token</span></h2><p>三方CI，无论是发布到GitHub，还是其它三方仓库，都需要验证身份的授权密钥，或账户密码。<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>里用的就是<a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line" target="_blank" rel="noopener">Personal access tokens</a>。<br>首先去GitHub 新建一个 <code>Personal access tokens</code>，具体的权限可按自己的需要设置，提交会生成一个token，先保存下来备用。</p><blockquote><p>（Github Personal Access Token 创建后退出，无法再次查看；忘记了token就只有重新生成 token。）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/TravisCI-GH-Token-0.jpg" alt="TravisCI-GH-Token-0.jpg"></p><p>生成了Github Personal Access Token后就将其应用到 .travis.yml中。</p><h2><span id="travis-应用-github-personal-access-token的两种方案">Travis 应用 Github Personal Access Token的两种方案</span></h2><h3><span id="一-将-token-直接设置为环境变量参数">一、将 Token 直接设置为环境变量参数</span></h3><ul><li>进入 Travis 对应的项目页面，点击 <code>More options 中的 settings</code> 进入项目的设置环境；</li><li>在 <code>Environment Variables</code> 添加环境变量：例如 <code>GH_TOKEN</code> 变量名称，值为之前生成的<code>Personal Access Token</code>，并确保<code>Display value in build log</code>为<code>FF</code>状态。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/TravisCI-GH-Token-1.jpg" alt="TravisCI-GH-Token-1.jpg"></li></ul><p>然后在.travis.yml文件中使用该环境变量：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证方式 - 生效</span></span><br><span class="line"><span class="attr">api_key:</span> <span class="string">$&#123;GH_TOKEN&#125;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证方式 - 会报异常 待加密验证测试</span></span><br><span class="line"><span class="comment"># api_key:</span></span><br><span class="line"><span class="comment">#     secure: $&#123;GH_TOKEN&#125;</span></span><br></pre></td></tr></table></figure><h3><span id="二-使用-travis-提供的加密环境对其进行加密">二、使用 Travis 提供的加密环境对其进行加密</span></h3><p><strong><a href="https://docs.travis-ci.com/user/encryption-keys#stq=&amp;stp=0" target="_blank" rel="noopener">官网 Encryption keys 参考链接</a></strong></p><h4><span id="加密环境安装-ruby-gem">加密环境安装、ruby、gem</span></h4><ul><li>查询最新的Travis CI的版本： <code>$ gem search travis</code></li><li>安装指定版本： <code>$ gem install travis</code></li><li>测试安装完成： <code>$ travis version</code>，默认即可</li><li>查看环境： <code>$ travis report --org</code></li></ul><h4><span id="开始加密">开始加密</span></h4><ul><li><p>首次运行，travis会提示需要登录，可以使用下命令登录：&lt;2选1&gt;</p><ol><li><code>$ travis login --github-token &lt;github-token&gt;</code></li><li><code>travis login</code> 输入Github用户名密码进行登录；</li></ol></li><li><p><strong>方式一：</strong><br>本地项目目录执行 <code>$ travis encrypt SOMEVAR=&quot;secretvalue&quot;</code> 或 <code>$ travis encrypt SOMEVAR=&quot;secretvalue&quot; --add</code> 自动添加到配置文件<br>终端将输出一个类似于以下内容的字符串，如下。将其放置在 <code>.travis.yml</code> 文件中，</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">secure:</span> <span class="string">".... encrypted data ...."</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">secure:</span> <span class="string">".... encrypted data ...."</span></span><br></pre></td></tr></table></figure><p><code>&amp;&amp;-1：</code> 手动位置官网有说法：<code>&lt;env: - global: - secure: &quot;... ...&quot;&gt;</code> <a href="https://docs.travis-ci.com/user/encryption-keys#usage" target="_blank" rel="noopener">参阅 - travis encrypt SOMEVAR=“secretvalue”</a></p><ul><li><strong>方式二：</strong><br>&lt;1&gt; 本地项目目录执行命令：<br>の   <code>$ travis encrypt &lt;github-token&gt; -r &lt;owner&gt;/&lt;project&gt;</code><br>或 <code>$ travis encrypt &lt;github-token&gt; -r &lt;owner&gt;/&lt;project&gt; --add</code> Y 自动添加到配置文件<br>或 <code>$ travis encrypt &lt;github-token&gt; --add</code> Y 自动添加到配置文件<br>其中 <code>-r</code> 用于指定仓库。如下：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">api_key:</span></span><br><span class="line">        <span class="attr">secure:</span> <span class="string">".... encrypted data ...."</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">secure:</span> <span class="string">".... encrypted data ...."</span></span><br></pre></td></tr></table></figure><p>&lt;2&gt; 将环境变量参数一起加密：<br>本地项目目录执行命令：<br><code>$ travis encrypt GITHUB_TOKEN=&lt;github-token&gt; -r &lt;owner&gt;/&lt;project&gt;</code><br>加密环境变量： <strong>GITHUB_TOKEN</strong>  一同被加密，Travis解密之后得到 <code>GITHUB_TOKEN=&lt;ithub-token&gt;</code> 不仅仅是 <code>github-token</code><br>对于加密环境变量 <code>GITHUB_TOKEN</code> 的形式，需这样使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">api_key:</span></span><br><span class="line">    <span class="attr">secure:</span> <span class="string">$&#123;GITHUB_TOKEN&#125;</span></span><br><span class="line"><span class="comment"># ... ...</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">secure:</span> <span class="string">".... encrypted data ...."</span></span><br></pre></td></tr></table></figure><ul><li><strong>方式三：</strong><br>较直接简单的方式，在本地项目目录直接执行下命令，按照提示输入即可自动生成配置：<br><code>$ travis setup releases</code></li></ul><blockquote><p>Travis 提供了多种加密方式，可以根据项目的级别设置，具体可以参阅<a href="https://docs.travis-ci.com/" target="_blank" rel="noopener">Travis CI 官方文档</a>；</p></blockquote><p><strong>Travis 提供了验证配置文件的规则性：</strong><br>在线验证：<a href="http://lint.travis-ci.org/" target="_blank" rel="noopener">http://lint.travis-ci.org/</a><br>本地验证：<code>$ travis lint .travis.yml</code></p><p><strong>主要的配置文件完成了，其它的就比较简单了</strong></p><h2><span id="部署-deployment">部署 deployment</span></h2><p><a href="https://docs.travis-ci.com/user/deployment#supported-providers" target="_blank" rel="noopener">Travis - deployment</a><br><a href="https://docs.travis-ci.com/user/deployment/releases/" target="_blank" rel="noopener">Travis - GitHub Releases Uploading</a></p><h3><span id="部署到-github-releases">部署到 GitHub Releases</span></h3><h3><span id="这只说明-部署到-github-releases发布版本tag时才发布releases">这只说明 部署到 GitHub Releases，发布版本，Tag时才发布releases</span></h3><p>通常只会在发布版本时才发布 release 。可以通过下面这个设置可以只在Push Tag时，才触发deploy流程：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># 发布  tag版 时才进行发包   </span></span><br><span class="line">  <span class="attr">draft:</span> <span class="literal">false</span> <span class="comment"># 不发表drafs</span></span><br></pre></td></tr></table></figure><h3><span id="发布流程">发布流程</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改代码文件</span><br><span class="line">git add . &amp;&amp; git commit -m "first commit" &amp;&amp; git push -u origin master   # 指定分支 &lt;master分支&gt;</span><br><span class="line"></span><br><span class="line">git tag v2.0 -m "备注信息"</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打 Tag 仍报错：Skipping a deployment with the xxx provider because this is not a tagged commit</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="string">--delete</span> <span class="string">origin</span> <span class="string">v2.0</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">v2.0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/TravisCI-deploy-0.jpg" alt="TravisCI-deploy-0.jpg"><br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/TravisCI-deploy-1.jpg" alt="TravisCI-deploy-1.jpg"><br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/TravisCI-deploy-2.jpg" alt="TravisCI-deploy-2.jpg"><br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/TravisaCI-GH-releases-0.jpg" alt="TravisaCI-GH-releases-0.jpg"></p><h2><span id="问题参阅">问题参阅</span></h2><ol><li><p><a href="https://travis-ci.community/t/skipping-a-deployment-with-the-xxx-provider-because-this-is-not-a-tagged-commit/1714" target="_blank" rel="noopener">Skipping a deployment with the xxx provider because this is not a tagged commit - 解决方案</a></p></li><li><p>预后设置tagName <a href="https://docs.travis-ci.com/user/deployment/releases/#deploying-only-on-tagged-builds" target="_blank" rel="noopener">https://docs.travis-ci.com/user/deployment/releases/#deploying-only-on-tagged-builds</a></p></li><li><p>(Octokit::Unauthorized) 使用 Travis 对token进行的加密方式有误</p></li></ol><h2><span id="补充">补充</span></h2><p><strong>git tag 常用命令</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git <span class="keyword">tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> [<span class="keyword">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [<span class="keyword">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [<span class="keyword">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [<span class="keyword">tag</span>]</span><br></pre></td></tr></table></figure><h2><span id="travisci-参考">TravisCI 参考</span></h2><h6><span id="travis-ci-官网-travis-ciorg"><strong>· <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI 官网 travis-ci.org</a></strong></span></h6><h6><span id="travis-官网文档"><strong>· <a href="https://docs.travis-ci.com/" target="_blank" rel="noopener">Travis 官网文档</a></strong></span></h6><h6><span id="部署方式-deployment"><strong>· <a href="https://docs.travis-ci.com/user/deployment" target="_blank" rel="noopener">部署方式 /deployment</a></strong></span></h6><h6><span id="加密密钥-encryption-keys"><strong>· <a href="https://docs.travis-ci.com/user/encryption-keys#stq=&amp;stp=0" target="_blank" rel="noopener">加密密钥 /Encryption keys</a></strong></span></h6><h6><span id="github发布上传releases-github-releases-uploading"><strong>· <a href="https://docs.travis-ci.com/user/deployment/releases/" target="_blank" rel="noopener">GitHub发布上传releases /GitHub Releases Uploading</a></strong></span></h6><blockquote></blockquote><p><a href="https://github.com/nukc/how-to-use-travis-ci" target="_blank" rel="noopener">如何简单入门使用Travis-CI持续集成</a><br><a href="https://www.jianshu.com/p/7517255bc056" target="_blank" rel="noopener">使用Travis-CI构建Android项目并自动打包部署到GitHub-Release</a><br><a href="https://www.cnblogs.com/morang/p/7228488.html" target="_blank" rel="noopener">使用travis-ci自动部署github上的项目</a><br><a href="https://my.oschina.net/ahaoboy/blog/3175492" target="_blank" rel="noopener">github 配置 travis 自动发布 release</a><br><a href="https://www.jianshu.com/p/807f8c989679" target="_blank" rel="noopener">使用travis自动上传github releases</a><br><a href="https://chi.miantiao.me/make-a-cdn-by-github-jsdelivr-travisci/" target="_blank" rel="noopener">使用 Github，jsDelivr， TravisCI 搭建一个轻量靠谱的 CDN</a><br><a href="https://www.jianshu.com/p/5f96c27baaa5" target="_blank" rel="noopener">从Travis回GitHub</a><br><a href="https://www.jianshu.com/p/951ce2fb255d" target="_blank" rel="noopener">Github与Travis CI测试与部署</a><br><a href="https://www.jianshu.com/p/3025c3814961" target="_blank" rel="noopener">Travis-CI持续构建生产实践</a><br><a href="https://qinyuanpei.github.io/posts/1113828794/" target="_blank" rel="noopener">基于Travis CI实现 Hexo 在 Github 和 Coding 的同步部署</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;使用-githubjsdelivr-travisci-搭建轻量-cdn&quot;&gt;使用 Github，jsDelivr， TravisCI 搭建轻量 CDN&lt;/span&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;span id=&quot;免费-快速-可靠-cdn&quot;&gt;免费-快速-可靠 CD
      
    
    </summary>
    
    
    
      <category term="npm" scheme="https://cl9000.github.io/tags/npm/"/>
    
      <category term="GitHub" scheme="https://cl9000.github.io/tags/GitHub/"/>
    
      <category term="jsDelivr" scheme="https://cl9000.github.io/tags/jsDelivr/"/>
    
      <category term="CDN" scheme="https://cl9000.github.io/tags/CDN/"/>
    
      <category term="免费CDN" scheme="https://cl9000.github.io/tags/%E5%85%8D%E8%B4%B9CDN/"/>
    
  </entry>
  
  <entry>
    <title>【HBuilderX】uniapp-cli更新/语法提示库</title>
    <link href="https://cl9000.github.io/2019/03/09/HBuilderX-uniapp-cli%E6%9B%B4%E6%96%B0-%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BA%E5%BA%93/"/>
    <id>https://cl9000.github.io/2019/03/09/HBuilderX-uniapp-cli%E6%9B%B4%E6%96%B0-%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BA%E5%BA%93/</id>
    <published>2019-03-09T08:51:55.000Z</published>
    <updated>2020-09-09T09:03:51.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote style="border-left: 4px solid #3F51B5;padding: 16px 20px;color: black;font-weight:300;border-radius: 0 2px 2px 0;">    那些疯狂到认为自己能够改变世界的人，才能真正改变世界。——<strong>史蒂夫·乔布斯</strong><br></blockquote><br><h3><span id="缘由">缘由：</span></h3><p>&lt;语法提示库&gt;、&lt;uniapp-cli依赖包node_modules全更新&gt;、&lt;Browserslist：caniuse-lite is outdated&gt;</p><h3><span id="hbuilderx-更新脚手架uniapp-cli依赖包node_modules">HBuilderX 更新脚手架(uniapp-cli)依赖包node_modules</span></h3><p>目录路径 <code>HBuilderX\plugins\uniapp-cli\</code></p><p>进入uniapp-cli目录下，删除<code>node_modules</code>和<code>package-lock.json</code>文件，执行命令<code>$ npm install</code></p><p>替换旧版本软件路径下的文件(建议删除原node_modules文件夹)：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HBuilderX<span class="symbol">\p</span>lugins<span class="symbol">\u</span>niapp-cli<span class="symbol">\n</span>ode_modules</span><br><span class="line">HBuilderX<span class="symbol">\p</span>lugins<span class="symbol">\u</span>niapp-cli<span class="symbol">\p</span>ackage.json</span><br><span class="line">HBuilderX<span class="symbol">\p</span>lugins<span class="symbol">\u</span>niapp-cli<span class="symbol">\p</span>ackage-lock.json</span><br></pre></td></tr></table></figure><p>刷新，退出重新启动生效。</p><h3><span id="hbuilderx语法提示库">HBuilderX语法提示库</span></h3><p>目录路径 <code>HBuilderX\plugins\</code><br>外网HX自动下载语法提示库，下载完成后，进入路径<code>HBuilderX\plugins\</code>，拷贝 <code>ls 和 jre</code>文件夹备用</p><p>进入旧版本软件路径 <code>HBuilderX\plugins\</code>，粘贴 <code>ls 和 jre</code>文件夹，刷新重启即可。<br>另还有个 <code>nodeserver</code>文件夹，也可以按照上述方法同时拷贝至目录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote style=&quot;border-left: 4px solid #3F51B5;padding: 16px 20px;color: black;font-weight:300;border-radius: 0 2px 2px 0;&quot;&gt;
    那些疯狂到认为自
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://cl9000.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="HBuilderX" scheme="https://cl9000.github.io/tags/HBuilderX/"/>
    
      <category term="uniapp-cli" scheme="https://cl9000.github.io/tags/uniapp-cli/"/>
    
      <category term="脚手架" scheme="https://cl9000.github.io/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
      <category term="依赖包" scheme="https://cl9000.github.io/tags/%E4%BE%9D%E8%B5%96%E5%8C%85/"/>
    
      <category term="npm" scheme="https://cl9000.github.io/tags/npm/"/>
    
      <category term="node_modules" scheme="https://cl9000.github.io/tags/node-modules/"/>
    
      <category term="语法提示库" scheme="https://cl9000.github.io/tags/%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BA%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>mysql错误 ER_TRUNCATED_WRONG_VALUE_FOR_FIELD</title>
    <link href="https://cl9000.github.io/2018/11/03/mysql%E9%94%99%E8%AF%AFER-TRUNCATED-WRONG-VALUE-FOR-FIELD/"/>
    <id>https://cl9000.github.io/2018/11/03/mysql%E9%94%99%E8%AF%AFER-TRUNCATED-WRONG-VALUE-FOR-FIELD/</id>
    <published>2018-11-03T10:12:59.000Z</published>
    <updated>2020-11-03T10:16:03.198Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="er_truncated_wrong_value_for_field-incorrect-string-value">ER_TRUNCATED_WRONG_VALUE_FOR_FIELD: Incorrect string value</span></h2><p>Mac系统下<code>mysql</code>报错：<code>ER_TRUNCATED_WRONG_VALUE_FOR_FIELD: Incorrect string value</code></p><p>这种原因是<code>mysql</code>字符集编码导致。</p><ol><li>查看 mysql 字符集编码<br>进入<code>mysql</code>，终端执行<br><code>$ mysql -u root -p</code><br>登录成功后在<code>mysql</code>中执行<br><code>$ show variables like '%character%';</code></li></ol><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="emphasis">'%character%'</span>;</span><br><span class="line"><span class="code">+--------------------------+</span>----------------------------------+</span><br><span class="line">| Variable<span class="emphasis">_name            | Value                            |</span></span><br><span class="line"><span class="emphasis">+--------------------------+----------------------------------+</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_client     | utf8                             |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_connection | utf8                             |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_database   | latin1                           |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_filesystem | binary                           |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_results    | utf8                             |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_server     | latin1                           |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_system     | utf8                             |</span></span><br><span class="line"><span class="emphasis">| character_</span>sets<span class="emphasis">_dir       | /usr/local/mysql/share/charsets/ |</span></span><br><span class="line"><span class="emphasis">+--------------------------+----------------------------------+</span></span><br><span class="line"><span class="emphasis">8 rows in set (0.00 sec)</span></span><br></pre></td></tr></table></figure><p>错误就是这个<code>character_set_server |latin1</code>导致的，下面进行修改。</p><ol start="2"><li>修改配置 my.cnf<br>进入路径：<br><code>$ cd /usr/local/mysql/support-files/</code><br>或快捷键 <code>command + shift + g</code> 快速进入目录<br>查看是否存在文件<code>my.cnf</code></li></ol><ul><li><strong>存在 my.cnf</strong><br>修改内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8</span><br><span class="line">...</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">init_connect = &apos;SET NAMES utf8&apos;</span><br></pre></td></tr></table></figure><p>保存后，重启 mysql 生效</p><ul><li><strong>不存在 my.cnf</strong></li></ul><ol><li><p>终端命令直接创建：<br><code>$ cd /etc &amp;&amp; sudo vim my.cnf</code> 键盘键入 <code>i</code>后，<code>insert</code>编辑模式下，复制粘贴本文末配置脚本（<strong>修改项如上</strong>），键盘顺序键入  <code>esc</code>退出编辑模式，英文<code>:wq!</code>，强制保存退出。重启mysql</p></li><li><p>快捷键 <code>command + shift + g</code> 快速进入目录  <code>/etc</code> ，手动创建<code>my.cnf</code>文件，修改内容保存退出，重启mysql。</p></li><li><p>修改后验证字符集编码<br>进入<code>mysql</code> 执行 <code>$ show variables like '%character%';</code></p></li></ol><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------+----------------------------------+</span><br><span class="line">|<span class="string"> Variable_name            </span>|<span class="string"> Value                            </span>|</span><br><span class="line">+--------------------------+----------------------------------+</span><br><span class="line">|<span class="string"> character_set_client     </span>|<span class="string"> utf8                             </span>|</span><br><span class="line">|<span class="string"> character_set_connection </span>|<span class="string"> utf8                             </span>|</span><br><span class="line">|<span class="string"> character_set_database   </span>|<span class="string"> utf8                             </span>|</span><br><span class="line">|<span class="string"> character_set_filesystem </span>|<span class="string"> binary                           </span>|</span><br><span class="line">|<span class="string"> character_set_results    </span>|<span class="string"> utf8                             </span>|</span><br><span class="line">|<span class="string"> character_set_server     </span>|<span class="string"> utf8                             </span>|</span><br><span class="line">|<span class="string"> character_set_system     </span>|<span class="string"> utf8                             </span>|</span><br><span class="line">|<span class="string"> character_sets_dir       </span>|<span class="string"> /usr/local/mysql/share/charsets/ </span>|</span><br><span class="line">+--------------------------+----------------------------------+</span><br><span class="line">8 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>验证生效。</p><ol start="4"><li>未生效查看此处<br><strong>未生效原因：</strong><br>在 mysql 中，是允许存在多个 my.cnf 配置文件的，有的能对整个系统环境产生影响，例如：/etc/my.cnf。有的则只能影响个别用户，例如：~/.my.cnf。<br>mysql 读取各个 my.cnf 配置文件的先后顺序是：</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/<span class="keyword">my</span>.cnf</span><br><span class="line">/etc/mysql/<span class="keyword">my</span>.cnf</span><br><span class="line">/usr/<span class="keyword">local</span>/mysql/etc/<span class="keyword">my</span>.cnf</span><br><span class="line">~/.<span class="keyword">my</span>.cnf</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong><br>为了简单，便于查找，将 etc 目录下的 <code>my.cnf</code> 文件复制至路径 <code>/usr/local/mysql/etc/my.cnf</code> 下，并将原ect目录下my.cnf文件删除，即可。其它路径也可以，注意顺序</p><h4><span id="navicat-中文乱码或-解决方案">Navicat 中文乱码或 ？？？解决方案</span></h4><p>数据库右键 – 编辑连接 – 常规 – 编码 – 设置为‘自动’</p><h3><span id="mycnf-参数配置修改后">my.cnf 参数配置（修改后）</span></h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Example MySQL config file for medium systems.</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># This is for a system with little memory (32M - 64M) where MySQL plays</span></span><br><span class="line"><span class="meta"># an important part, or systems up to 128M where MySQL is used together with</span></span><br><span class="line"><span class="meta"># other programs (such as a web server)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># MySQL programs look for option files in a set of</span></span><br><span class="line"><span class="meta"># locations which depend on the deployment platform.</span></span><br><span class="line"><span class="meta"># You can copy this option file to one of those</span></span><br><span class="line"><span class="meta"># locations. For information about these locations, see:</span></span><br><span class="line"><span class="meta"># http://dev.mysql.com/doc/mysql/en/option-files.html</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># In this file, you can use all long options that a program supports.</span></span><br><span class="line"><span class="meta"># If you want to know which options a program supports, run the program</span></span><br><span class="line"><span class="meta"># with the "--help" option.</span></span><br><span class="line"><span class="meta"># The following options will be passed to all MySQL clients</span></span><br><span class="line">[client]</span><br><span class="line"><span class="keyword">default</span>-character-<span class="keyword">set</span> = utf8</span><br><span class="line"><span class="meta">#password = your_password</span></span><br><span class="line">port = <span class="number">3306</span></span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line"><span class="meta"># Here follows entries for some specific programs</span></span><br><span class="line"><span class="meta"># The MySQL server</span></span><br><span class="line">[mysqld]</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">character-<span class="keyword">set</span>-server = utf8</span><br><span class="line">init_connect = <span class="string">'SET NAMES utf8'</span></span><br><span class="line">port = <span class="number">3306</span></span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">skip-external-locking</span><br><span class="line">key_buffer_size = <span class="number">16</span>M</span><br><span class="line">max_allowed_packet = <span class="number">1</span>M</span><br><span class="line">table_open_cache = <span class="number">64</span></span><br><span class="line">sort_buffer_size = <span class="number">512</span>K</span><br><span class="line">net_buffer_length = <span class="number">8</span>K</span><br><span class="line">read_buffer_size = <span class="number">256</span>K</span><br><span class="line">read_rnd_buffer_size = <span class="number">512</span>K</span><br><span class="line">myisam_sort_buffer_size = <span class="number">8</span>M</span><br><span class="line"><span class="meta"># Don't listen on a TCP/IP port at all. This can be a security enhancement,</span></span><br><span class="line"><span class="meta"># if all processes that need to connect to mysqld run on the same host.</span></span><br><span class="line"><span class="meta"># All interaction with mysqld must be made via Unix sockets or named pipes.</span></span><br><span class="line"><span class="meta"># Note that using this option without enabling named pipes on Windows</span></span><br><span class="line"><span class="meta"># (via the "enable-named-pipe" option) will render mysqld useless!</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#skip-networking</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Replication Master Server (default)</span></span><br><span class="line"><span class="meta"># binary logging is required for replication</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="meta"># binary logging format - mixed recommended</span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"></span><br><span class="line"><span class="meta"># required unique id between 1 and 2^32 - 1</span></span><br><span class="line"><span class="meta"># defaults to 1 if master-host is not set</span></span><br><span class="line"><span class="meta"># but will not function as a master if omitted</span></span><br><span class="line">server-id = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Replication Slave (comment out master section to use this)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># To configure this host as a replication slave, you can choose between</span></span><br><span class="line"><span class="meta"># two methods :</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># 1) Use the CHANGE MASTER TO command (fully described in our manual) -</span></span><br><span class="line"><span class="meta"># the syntax is:</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># CHANGE MASTER TO MASTER_HOST=&lt;host&gt;, MASTER_PORT=&lt;port&gt;,</span></span><br><span class="line"><span class="meta"># MASTER_USER=&lt;user&gt;, MASTER_PASSWORD=&lt;password&gt; ;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># where you replace &lt;host&gt;, &lt;user&gt;, &lt;password&gt; by quoted strings and</span></span><br><span class="line"><span class="meta"># &lt;port&gt; by the master's port number (3306 by default).</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># Example:</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># CHANGE MASTER TO MASTER_HOST='125.564.12.1', MASTER_PORT=3306,</span></span><br><span class="line"><span class="meta"># MASTER_USER='joe', MASTER_PASSWORD='secret';</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># OR</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># 2) Set the variables below. However, in case you choose this method, then</span></span><br><span class="line"><span class="meta"># start replication for the first time (even unsuccessfully, for example</span></span><br><span class="line"><span class="meta"># if you mistyped the password in master-password and the slave fails to</span></span><br><span class="line"><span class="meta"># connect), the slave will create a master.info file, and any later</span></span><br><span class="line"><span class="meta"># change in this file to the variables' values below will be ignored and</span></span><br><span class="line"><span class="meta"># overridden by the content of the master.info file, unless you shutdown</span></span><br><span class="line"><span class="meta"># the slave server, delete master.info and restart the slaver server.</span></span><br><span class="line"><span class="meta"># For that reason, you may want to leave the lines below untouched</span></span><br><span class="line"><span class="meta"># (commented) and instead use CHANGE MASTER TO (see above)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># required unique id between 2 and 2^32 - 1</span></span><br><span class="line"><span class="meta"># (and different from the master)</span></span><br><span class="line"><span class="meta"># defaults to 2 if master-host is set</span></span><br><span class="line"><span class="meta"># but will not function as a slave if omitted</span></span><br><span class="line"><span class="meta">#server-id = 2</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># The replication master for this slave - required</span></span><br><span class="line"><span class="meta">#master-host = &lt;hostname&gt;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># The username the slave will use for authentication when connecting</span></span><br><span class="line"><span class="meta"># to the master - required</span></span><br><span class="line"><span class="meta">#master-user = &lt;username&gt;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># The password the slave will authenticate with when connecting to</span></span><br><span class="line"><span class="meta"># the master - required</span></span><br><span class="line"><span class="meta">#master-password = &lt;password&gt;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># The port the master is listening on.</span></span><br><span class="line"><span class="meta"># optional - defaults to 3306</span></span><br><span class="line"><span class="meta">#master-port = &lt;port&gt;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># binary logging - not required for slaves, but recommended</span></span><br><span class="line"><span class="meta">#log-bin=mysql-bin</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Uncomment the following if you are using InnoDB tables</span></span><br><span class="line"><span class="meta">#innodb_data_home_dir = /usr/local/mysql/data</span></span><br><span class="line"><span class="meta">#innodb_data_file_path = ibdata1:10M:autoextend</span></span><br><span class="line"><span class="meta">#innodb_log_group_home_dir = /usr/local/mysql/data</span></span><br><span class="line"><span class="meta"># You can set .._buffer_pool_size up to 50 - 80 %</span></span><br><span class="line"><span class="meta"># of RAM but beware of setting memory usage too high</span></span><br><span class="line"><span class="meta">#innodb_buffer_pool_size = 16M</span></span><br><span class="line"><span class="meta">#innodb_additional_mem_pool_size = 2M</span></span><br><span class="line"><span class="meta"># Set .._log_file_size to 25 % of buffer pool size</span></span><br><span class="line"><span class="meta">#innodb_log_file_size = 5M</span></span><br><span class="line"><span class="meta">#innodb_log_buffer_size = 8M</span></span><br><span class="line"><span class="meta">#innodb_flush_log_at_trx_commit = 1</span></span><br><span class="line"><span class="meta">#innodb_lock_wait_timeout = 50</span></span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = <span class="number">16</span>M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"><span class="meta"># Remove the next comment character if you are not familiar with SQL</span></span><br><span class="line"><span class="meta">#safe-updates</span></span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size = <span class="number">20</span>M</span><br><span class="line">sort_buffer_size = <span class="number">20</span>M</span><br><span class="line">read_buffer = <span class="number">2</span>M</span><br><span class="line">write_buffer = <span class="number">2</span>M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><h3><span id="ref">ref</span></h3><p><a href="https://www.cnblogs.com/langdashu/p/5889352.html" target="_blank" rel="noopener">参数项说明参考</a><br><a href="https://blog.csdn.net/xingxingchance/article/details/77366383" target="_blank" rel="noopener"> ER_TRUNCATED_WRONG_VALUE_FOR_FIELD</a><br><a href="https://maomin.blog.csdn.net/article/details/90476710" target="_blank" rel="noopener"> ER_TRUNCATED_WRONG_VALUE_FOR_FIELD</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;er_truncated_wrong_value_for_field-incorrect-string-value&quot;&gt;ER_TRUNCATED_WRONG_VALUE_FOR_FIELD: Incorrect string value&lt;/span&gt;&lt;/
      
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://cl9000.github.io/tags/mysql/"/>
    
      <category term="my.cnf" scheme="https://cl9000.github.io/tags/my-cnf/"/>
    
  </entry>
  
  <entry>
    <title>RegEx-正则表达式</title>
    <link href="https://cl9000.github.io/2018/08/28/RegEx-Test/"/>
    <id>https://cl9000.github.io/2018/08/28/RegEx-Test/</id>
    <published>2018-08-28T07:24:07.000Z</published>
    <updated>2020-08-28T08:35:08.743Z</updated>
    
    <content type="html"><![CDATA[<br><blockquote style="border-left: 4px solid #3F51B5;padding: 16px 20px;color: black;font-weight:300;border-radius: 0 2px 2px 0;">    那些疯狂到认为自己能够改变世界的人，才能真正改变世界。——<strong>史蒂夫·乔布斯</strong></blockquote><br><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/RegEx-Test00.png" alt="RegEx-Test.png"></p><p>正则表达式在我们的编码过程中经常会用到，正确解读正则表达式是个非常考验功底的活。有没有办法通过机器帮我们解决这个问题呢？<br>这里推荐一个网站：<strong><a href="https://regexper.com" target="_blank" rel="noopener">https://regexper.com</a></strong>，官网如上图。</p><p>下面是一组常用正则表达式</p><h2><span id="一-数字测试">一、数字测试</span></h2><ol><li><p>数字：<code>^[0-9]*$</code></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/RegEx-Test1.png" alt></p></li><li><p>n 位的数字：<code>^\d{n}$</code> 如： <code>^\d{3}$</code></p></li><li><p>至少 n 位的数字：<code>^\d{n,}$</code>  如： <code>^\d{3,}$</code></p></li><li><p>m-n 位的数字：<code>^\d{m,n}$</code>， 如：<code>^\d{3,10}$</code></p></li><li><p>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p></li><li><p>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p></li></ol><ol start="7"><li><p>带 1-2 位小数的正数或负数：<code>^(\-)?\d+(\.\d{1,2})?$</code></p></li><li><p>正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code></p></li><li><p>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p></li><li><p>有 1~3 位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p></li><li><p>非零的正整数：<code>^[1-9]\d*$</code> 或 <code>^([1-9][0-9]*){1,3}$</code> 或 <code>^\+?[1-9][0-9]*$</code></p></li><li><p>非零的负整数：<code>^\-[1-9][0-9]*$</code> 或 <code>^-[1-9]\d*$</code></p></li><li><p>非负整数：<code>^\d+$</code> 或 <code>^[1-9]\d*|0$</code></p></li><li><p>非正整数：<code>^(-[1-9]\d*|0)$</code> 或 <code>^((-\d+)|(0+))$</code></p></li><li><p>非负浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></p></li><li><p>非正浮点数：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code> 或 <code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></p></li><li><p>正浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</code> 或 <code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></p></li><li><p>负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code> 或 ^<code>(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></p></li><li><p>浮点数：<code>^(-?\d+)(\.\d+)?$</code> 或 <code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></p></li></ol><h2><span id="二-校验字符的表达式">二、校验字符的表达式</span></h2><ol><li><p>汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></p></li><li><p>英文和数字：<code>^[A-Za-z0-9]+$</code> 或 <code>^[A-Za-z0-9]{4,40}$</code></p></li><li><p>长度为 3-20 的所有字符：<code>^.{3,20}$</code></p></li><li><p>由 26 个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p></li><li><p>由 26 个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p></li><li><p>由 26 个小写英文字母组成的字符串：<code>^[a-z]+$</code></p></li><li><p>由数字和 26 个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p></li><li><p>由数字、26 个英文字母或者下划线组成的字符串：<code>^\w+$</code> 或 <code>^\w{3,20}$</code></p></li><li><p>中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></p></li><li><p>中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code> 或 <code>^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></p></li><li><p>含有<code>^%&amp;amp;',;=?$\&quot;</code>等字符：<code>[\^%&amp;amp;',;=?$\x22]+</code></p></li><li><p>不含有含有~的字符：<code>[^~\x22]+</code></p></li></ol><h2><span id="三-特定要求的表达式">三、特定要求的表达式</span></h2><ol><li><p>Email 地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></p></li><li><p>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\/.?</code></p></li><li><p>InternetURL：<code>[a-zA-z]+:\/\/[^\s]*</code> 或 <code>^http:\/\/([\w-]+\.)+[\w-]+(\/[\w-.\/?%&amp;amp;=]*)?$</code></p></li><li><p>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></p></li><li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>(\d{3,4}-)?\d{7,8}$</code></p></li><li><p>国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></p></li><li><p>身份证号(15 位、18 位数字)：<code>^(\d{15}|\d{18})$</code></p></li><li><p>短身份证号码(数字、字母 x 结尾)：<code>^([0-9]){7,18}(x|X)?$</code> 或 <code>^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p></li><li><p>帐号是否合法(字母开头，允许 5-16 字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p></li><li><p>密码(以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></p></li><li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></p></li><li><p>日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></p></li><li><p>一年的 12 个月(01 ～ 09 和 1 ～ 12)：<code>^(0?[1-9]|1[0-2])$</code></p></li><li><p>一个月的 31 天(01 ～ 09 和 1 ～ 31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p></li><li><p>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[0-9]+(\.[0-9]+)?\$</code></p></li><li><p>xml 文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</code></p></li><li><p>中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></p></li><li><p>双字节字符：<code>[^\x00-\xff]</code>(&lt;包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)&gt;)</p></li><li><p>空白行的正则表达式：<code>\n\s*\r</code> (可以用来删除空白行)</p></li><li><p>HTML 标记的正则表达式：<code>&amp;lt;(\S*?)[^&amp;gt;]*&amp;gt;.*?&amp;lt;\/\1&amp;gt;|&amp;lt;.*? \/&amp;gt;</code></p></li><li><p>首尾空白字符的正则表达式：<code>^\s*|\s*$</code>或<code>(^\s*)|(\s*$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p></li><li><p>腾讯 QQ 号：<code>[1-9][0-9]{4,}</code> (腾讯 QQ 号从 10000 开始)</p></li><li><p>中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为 6 位数字)</p></li><li><p>IP 地址：<code>\d+\.\d+\.\d+\.\d+</code> (提取 IP 地址时有用)</p></li><li><p>抽取注释：<code>&amp;lt;!--(.*?)--&amp;gt;</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;
&lt;blockquote style=&quot;border-left: 4px solid #3F51B5;padding: 16px 20px;color: black;font-weight:300;border-radius: 0 2px 2px 0;&quot;&gt;
    那些疯
      
    
    </summary>
    
    
    
      <category term="RegEx" scheme="https://cl9000.github.io/tags/RegEx/"/>
    
      <category term="正则" scheme="https://cl9000.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="正则表达式" scheme="https://cl9000.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS原生ajax请求、fetch</title>
    <link href="https://cl9000.github.io/2018/07/15/JS%E5%8E%9F%E7%94%9Fajax%E8%AF%B7%E6%B1%82%E3%80%81fetch/"/>
    <id>https://cl9000.github.io/2018/07/15/JS%E5%8E%9F%E7%94%9Fajax%E8%AF%B7%E6%B1%82%E3%80%81fetch/</id>
    <published>2018-07-15T08:18:44.000Z</published>
    <updated>2020-07-15T08:23:56.117Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="js原生ajax请求-fetch">JS原生ajax请求、fetch</span></h2><blockquote><p>Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，无需重新加载整个网页的情况下，能够更新部分网页的技术。<br>通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<a href="https://baike.baidu.com/item/ajax/8425" target="_blank" rel="noopener">ajax 百度百科</a></p></blockquote><h3><span id="ajax基本结构">ajax基本结构</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// 新建XMLHttpRequest对象</span></span><br><span class="line">ajax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 状态发生变化时，函数被回调</span></span><br><span class="line">    <span class="keyword">if</span> (ajax.readyState === <span class="number">4</span>) &#123; <span class="comment">// 成功完成</span></span><br><span class="line">        <span class="comment">// 判断响应结果:</span></span><br><span class="line">        <span class="keyword">if</span> (ajax.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 成功，通过responseText拿到响应的文本:</span></span><br><span class="line">            <span class="keyword">return</span> success(<span class="built_in">JSON</span>.parse(ajax.responseText)); <span class="comment">// 转JSON</span></span><br><span class="line">            <span class="comment">// 方法二</span></span><br><span class="line">            <span class="comment">// return success(eval("("+ ajax.responseText +")"));</span></span><br><span class="line">            <span class="comment">// 解析xml</span></span><br><span class="line">            <span class="comment">// var parser = new DOMParser();</span></span><br><span class="line">            <span class="comment">// var res = parser.parseFromString(request.responseText, "text/xml")</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败，根据响应码判断失败原因:</span></span><br><span class="line">            <span class="keyword">return</span> fail(ajax.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// HTTP请求还在继续...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ajax.open(<span class="string">'GET'</span>, <span class="string">'/api/test.json'</span>, <span class="literal">true</span>); <span class="comment">// 默认 true 异步</span></span><br><span class="line">ajax.send();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// post请求</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ajax.readyState === <span class="number">4</span>) &#123; <span class="comment">// 成功完成</span></span><br><span class="line">        <span class="keyword">if</span> (ajax.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> success(ajax.responseText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fail(ajax.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// HTTP请求还在继续...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'/api/test.json'</span>);</span><br><span class="line">xhr.send(<span class="string">'name=233'</span>);</span><br></pre></td></tr></table></figure><p>对于低版本的IE，需要换一个ActiveXObject对象:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajax = <span class="keyword">new</span> <span class="type">ActiveXObject</span>(<span class="string">'Microsoft.XMLHTTP'</span>); <span class="comment">// 新建Microsoft.XMLHTTP对象</span></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">整合IE</span><br><span class="line"><span class="keyword">var</span> ajax;</span><br><span class="line"><span class="keyword">if</span> (window.XMLHttpRequest) &#123;</span><br><span class="line">    ajax = <span class="keyword">new</span> <span class="type">XMLHttpRequest</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ajax = <span class="keyword">new</span> <span class="type">ActiveXObject</span>(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="注意事项">注意事项</span></h4><blockquote><p>ajax执行了同步操作⚠️：<br>Synchronous XMLHttpRequest on the main thread is deprecated<br>ajax执行了同步操作，即async设置为False，当然它并不影响程序的运行,建议使用 true (不设置默认为 true )。</p></blockquote><h4><span id="状态">状态</span></h4><h5><span id="readystate状态值">readyState（状态值）</span></h5><p>readyState是XMLHttpRequest对象的一个属性，用来标识当前XMLHttpRequest对象处于什么状态。</p><blockquote><p>0：初始化，XMLHttpRequest对象还没有完成初始化<br>1：载入，XMLHttpRequest对象开始发送请求<br>2：载入完成，XMLHttpRequest对象的请求发送完成<br>3：解析，XMLHttpRequest对象开始读取服务器的响应<br>4：完成，XMLHttpRequest对象读取服务器响应结束</p></blockquote><h5><span id="status状态码">status（状态码）</span></h5><p>status是XMLHttpRequest对象的一个属性，表示响应的HTTP状态码</p><blockquote><p>1xx：信息响应类，表示接收到请求并且继续处理<br>2xx：处理成功响应类，表示动作被成功接收、理解和接受<br>3xx：重定向响应类，为了完成指定的动作，必须接受进一步处理<br>4xx：客户端错误，客户请求包含语法错误或者是不能正确执行<br>5xx：服务端错误，服务器不能正确执行一个正确的请求<br> <br>100——客户必须继续发出请求<br>101——客户要求服务器根据请求转换HTTP协议版本<br>200——交易成功<br>201——提示知道新文件的URL<br>202——接受和处理、但处理未完成<br>203——返回信息不确定或不完整<br>204——请求收到，但返回信息为空<br>205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件<br>206——服务器已经完成了部分用户的GET请求<br>300——请求的资源可在多处得到<br>301——删除请求数据<br>302——在其他地址发现了请求数据<br>303——建议客户访问其他URL或访问方式<br>304——客户端已经执行了GET，但文件未变化<br>305——请求的资源必须从服务器指定的地址得到<br>306——前一版本HTTP中使用的代码，现行版本中不再使用<br>307——申明请求的资源临时性删除<br>400——错误请求，如语法错误<br>401——请求授权失败<br>402——保留有效ChargeTo头响应<br>403——请求不允许<br>404——没有发现文件、查询或URl<br>405——用户在Request-Line字段定义的方法不允许<br>406——根据用户发送的Accept拖，请求资源不可访问<br>407——类似401，用户必须首先在代理服务器上得到授权<br>408——客户端没有在用户指定的时间内完成请求<br>409——对当前资源状态，请求不能完成<br>410——服务器上不再有此资源且无进一步的参考地址<br>411——服务器拒绝用户定义的Content-Length属性请求<br>412——一个或多个请求头字段在当前请求中错误<br>413——请求的资源大于服务器允许的大小<br>414——请求的资源URL长于服务器允许的长度<br>415——请求资源不支持请求项目格式<br>416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段<br>417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求<br>500——服务器产生内部错误<br>501——服务器不支持请求的函数<br>502——服务器暂时不可用，有时是为了防止发生系统过载<br>503——服务器过载或暂停维修<br>504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长<br>505——服务器不支持或拒绝支请求头中指定的HTTP版本</p></blockquote><h2><span id="fetch">fetch</span></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">fetch MDN</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个基本的 fetch 请求</span></span><br><span class="line">fetch(<span class="string">'http://example.com/movies.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.json();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">myJson</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myJson);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(data), <span class="comment">// must match 'Content-Type' header</span></span><br><span class="line">    cache: <span class="string">'no-cache'</span>, <span class="comment">// *default, no-cache, reload, force-cache, only-if-cached</span></span><br><span class="line">    credentials: <span class="string">'same-origin'</span>, <span class="comment">// include, same-origin, *omit</span></span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'user-agent'</span>: <span class="string">'Mozilla/4.0 MDN Example'</span>,</span><br><span class="line">      <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    method: <span class="string">'POST'</span>, <span class="comment">// *GET, POST, PUT, DELETE, etc.</span></span><br><span class="line">    mode: <span class="string">'cors'</span>, <span class="comment">// no-cors, cors, *same-origin</span></span><br><span class="line">    redirect: <span class="string">'follow'</span>, <span class="comment">// manual, *follow, error</span></span><br><span class="line">    referrer: <span class="string">'no-referrer'</span>, <span class="comment">// *client, no-referrer</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()) <span class="comment">// parses response to JSON</span></span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, error))</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Success:'</span>, response));</span><br></pre></td></tr></table></figure><h4><span id="浏览器兼容性">浏览器兼容性</span></h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">fetch MDN</a></p><h3><span id="参考">参考</span></h3><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023022332902400" target="_blank" rel="noopener">Ajax</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">Fetch</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;js原生ajax请求-fetch&quot;&gt;JS原生ajax请求、fetch&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指
      
    
    </summary>
    
    
    
      <category term="ajax" scheme="https://cl9000.github.io/tags/ajax/"/>
    
      <category term="fetch" scheme="https://cl9000.github.io/tags/fetch/"/>
    
      <category term="原生" scheme="https://cl9000.github.io/tags/%E5%8E%9F%E7%94%9F/"/>
    
      <category term="js" scheme="https://cl9000.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Karma + Jasmine 构建 Web 测试环境</title>
    <link href="https://cl9000.github.io/2018/03/18/Karma-Jasmine-%E6%9E%84%E5%BB%BA-Web-%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/"/>
    <id>https://cl9000.github.io/2018/03/18/Karma-Jasmine-%E6%9E%84%E5%BB%BA-Web-%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</id>
    <published>2018-03-18T09:38:50.000Z</published>
    <updated>2020-04-26T09:45:25.071Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="karma-jasmine-构建-web-测试环境">Karma + Jasmine 构建 Web 测试环境</span></h3><h3><span id="jasmine-简介">Jasmine 简介</span></h3><!-- <img src="https://cdn.wispx.cn/wallpaper/bing/2019/02/12/d4f42aedc672561334500d26f3f846f5.jpg!blog.thumb" alt=""> --><!-- ![](https://jasmine.github.io/images/jasmine-white-horizontal.svg) --><p><img src="https://jasmine.github.io/images/jasmine-horizontal.svg" alt><br><code>Jasmine</code> 是一款 JavaScript BDD（行为驱动开发）测试框架，它不依赖于其他任何 JavaScript 组件。它有干净清晰的语法，让您可以很简单的写出测试代码。<br>它的主要特点：</p><ul><li>不依赖于任何其它的 JavaScript 框架</li><li>不需要 DOM</li><li>结构简单</li><li>可以运行在 Node.JS 或者 Html 中</li><li>基于行为驱动开发 Jasmine<br><a href="http://jasmine.github.io/" target="_blank" rel="noopener">Jasmine项目Git 仓库地址</a><br><a href="https://www.ibm.com/developerworks/cn/web/wa-lo-use-karma-jasmine-build-test-environment/index.html#icomments" target="_blank" rel="noopener">参考</a><br><a href="http://jasmine.github.io/1.3/introduction.html" target="_blank" rel="noopener">jasmine基础语法</a><br><a href="http://www.cnblogs.com/zhcncn/p/4330112.html" target="_blank" rel="noopener">jasmine基础语法</a></li></ul><h3><span id="karma-简介">Karma 简介</span></h3><ul><li>Karma是Testacular的新名字，在2012年google开源了Testacular，2013年Testacular改名为Karma。</li><li>Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流 Web 浏览器，也可以集成到 CI（Continuous integration）工具，还可以和其他代码编辑器一起使用。</li><li>Karma的主要目的是使您的测试驱动开发变得容易，快速和有趣。</li><li>Karma不是测试框架，也不是断言库。Karma只是启动HTTP服务器，并生成您可能已经从最喜欢的测试框架中了解的测试运行器HTML文件。因此，出于测试目的，您可以使用几乎任何您喜欢的东西。大多数常见测试框架已经有插件：</li></ul><blockquote><ul><li><a href="https://github.com/karma-runner/karma-jasmine" target="_blank" rel="noopener">Jasmine</a></li><li><a href="https://github.com/karma-runner/karma-mocha" target="_blank" rel="noopener">Mocha</a></li><li><a href="QUnit">QUnit</a></li><li><a href="https://www.npmjs.org/browse/keyword/karma-adapter" target="_blank" rel="noopener">and many others</a><br>支持所有的主流浏览器</li></ul></blockquote><h3><span id="karma-安装">Karma 安装</span></h3><p><strong>在项目中建议使用项目独立的 <code>node_modules</code>,包括上面的安装其它的依赖，这有利于迁移。</strong><br>Mac安装命令（i 是 install 命令的缩写，-D 是 --save-dev 的缩写。）<br>// 局部（单项目）安装。安装 Karma 命令到当前 node_modules 目录下，此时，如果需要执行 karma 命令，就需要这样 <code>$ ./node_modules/.bin/karma</code><br><code>$ npm install karma --save-dev</code><br>// 全局安装 - Mac安装路径：<code>/usr/local/bin/node</code><br><code>$ nom install karma -g</code><br>测试是否安装成功 <code>$ karma start</code> ，成功会出现提示打开浏览器 <a href="http://localhost:9876/" target="_blank" rel="noopener">http://localhost:9876/</a> 访问成功页面。</p><h3><span id="karma-初始化配置">Karma 初始化配置</span></h3><p>安装完成之后，切换到目标项目根目录，运行：<br><code>$ karma init</code> or <code>$ karma init **.conf.js</code><br>执行命令后，会被问到一系列的问题</p><ul><li><code>What testing framework do you want to use?</code><br>默认情况下 Jasmine, Mocha, QUnit 都已经被安装了，这里我们可以直接使用它们的名称。如果在应用中用到了其它的测试框架，那就需要我们安装它们所对应的插件，并在配置文件中标注它们（详见 karma.conf.js 中的 plugins 项）</li></ul><ul><li><code>Do you want to use Require.js?</code><br>This will add Require.js plugin.<br>Require.js 是异步加载规范（AMD）的实现。常被作为基础代码库，应用在了很多的项目与框架之中，例如 Dojo, AngularJs 等、</li></ul><ul><li><code>Do you want to capture a browser automatically?</code><br>选择需要运行测试用例的浏览器。需要注意的就是，必须保证所对应的浏览器插件已经安装成功。</li></ul><ul><li><code>What is the location of your source and test files?</code><br>You can use glob patterns, eg.  <strong>js/*.js&quot; or &quot;test/**/*Spec.js</strong>.<br>选择测试用例所在的目录位置。Karma 支持通配符的方式配置文件或目录，例如 <strong>js/*.js&quot; or &quot;test/**/*Spec.js</strong> 等。如果目录或文件使用相对位置，要清楚地是，此时的路径是相对于当前运行 karma 命令时所在的目录。</li></ul><ul><li><code>Should any of the files included by the previous patterns be excluded?</code><br>You can use glob patterns, eg. <strong>**/*.swp</strong>.<br>目录中不包括的那些文件。</li></ul><ul><li><code>Do you want Karma to watch all the files and run tests on change?</code><br>是否需要 Karma 自动监听文件？并且文件一旦被修改，就重新运行测试用例？</li></ul><p>最终 Karma 生成如下的配置文件 <code>karma.conf.js</code>，如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">// Karma configuration</span><br><span class="line">// Generated <span class="keyword">on</span> Wed Mar <span class="number">18</span> <span class="number">2018</span> <span class="number">14</span>:<span class="number">36</span>:<span class="number">01</span> GMT+<span class="number">0800</span> (GMT+<span class="number">08</span>:<span class="number">00</span>)</span><br><span class="line"></span><br><span class="line">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(config)</span> &#123;</span></span><br><span class="line">  config.<span class="keyword">set</span>(&#123;</span><br><span class="line"></span><br><span class="line">    // base path that will <span class="keyword">be</span> used <span class="keyword">to</span> <span class="built_in">resolve</span> <span class="keyword">all</span> patterns (eg. <span class="keyword">files</span>, exclude)</span><br><span class="line">    basePath: <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // frameworks <span class="keyword">to</span> use</span><br><span class="line">    // available framework<span class="variable">s:</span> http<span class="variable">s:</span>//npmjs.org/<span class="keyword">browse</span>/keyword/karma-adapter</span><br><span class="line">    framework<span class="variable">s:</span> [<span class="string">'jasmine'</span>],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // <span class="keyword">list</span> of <span class="keyword">files</span> / patterns <span class="keyword">to</span> load in the browser</span><br><span class="line">    <span class="keyword">file</span><span class="variable">s:</span> [</span><br><span class="line">      <span class="string">"test/**/*.js"</span>,</span><br><span class="line">      <span class="string">"test/**/*Spec.js"</span>,</span><br><span class="line">      // &#123;</span><br><span class="line">      //   pattern: <span class="string">'test/**/*.js'</span>,</span><br><span class="line">      //   // false 表示初始化的时候不会使用 script 标签直接将相关 js 引入到浏览器，需要自己写代码加载</span><br><span class="line">      //   included: false</span><br><span class="line">      // &#125;,</span><br><span class="line">      // &#123;</span><br><span class="line">      //   pattern: <span class="string">'test/**/*Spec.js'</span>,</span><br><span class="line">      //   included: false</span><br><span class="line">      // &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // <span class="keyword">list</span> of <span class="keyword">files</span> / patterns <span class="keyword">to</span> exclude</span><br><span class="line">    exclude: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // preprocess matching <span class="keyword">files</span> before serving them <span class="keyword">to</span> the browser</span><br><span class="line">    // available preprocessor<span class="variable">s:</span> http<span class="variable">s:</span>//npmjs.org/<span class="keyword">browse</span>/keyword/karma-preprocessor</span><br><span class="line">    preprocessor<span class="variable">s:</span> &#123;<span class="string">'test/**/*.js'</span>: <span class="string">'coverage'</span> &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // test results reporter <span class="keyword">to</span> use</span><br><span class="line">    // possible value<span class="variable">s:</span> <span class="string">'dots'</span>, <span class="string">'progress'</span></span><br><span class="line">    // available reporter<span class="variable">s:</span> http<span class="variable">s:</span>//npmjs.org/<span class="keyword">browse</span>/keyword/karma-reporter</span><br><span class="line">    reporter<span class="variable">s:</span> [<span class="string">'progress'</span>, <span class="string">'coverage'</span>],</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // 覆盖率报告器配置</span><br><span class="line">    coverageReporter: &#123;</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">'html'</span>,</span><br><span class="line">      dir: <span class="string">'coverage/'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // web server port</span><br><span class="line">    por<span class="variable">t:</span> <span class="number">9876</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // enable / disable colors in the output (reporters <span class="built_in">and</span> logs)</span><br><span class="line">    color<span class="variable">s:</span> true,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // level of logging</span><br><span class="line">    // possible value<span class="variable">s:</span> config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span><br><span class="line">    logLeve<span class="variable">l:</span> config.LOG_INFO,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // enable / disable watching <span class="keyword">file</span> <span class="built_in">and</span> executing tests whenever any <span class="keyword">file</span> <span class="keyword">changes</span></span><br><span class="line">    autoWatch: true,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // start these browsers</span><br><span class="line">    // available browser launcher<span class="variable">s:</span> http<span class="variable">s:</span>//npmjs.org/<span class="keyword">browse</span>/keyword/karma-launcher</span><br><span class="line">    // - Chrome, ChromeCanary, Firefox, Opera, Safari (<span class="keyword">only</span> Mac), PhantomJS,</span><br><span class="line">    // IE (<span class="keyword">only</span> Windows) </span><br><span class="line">    browser<span class="variable">s:</span> [<span class="string">'Chrome'</span>],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Continuous Integration <span class="keyword">mode</span></span><br><span class="line">    // <span class="keyword">if</span> true, Karma captures browsers, runs the tests <span class="built_in">and</span> exits</span><br><span class="line">    singleRun: false,</span><br><span class="line"></span><br><span class="line">    // Concurrency level</span><br><span class="line">    // how many browser should <span class="keyword">be</span> started simultaneous</span><br><span class="line">    concurrency: Infinity</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    // 参考其他配置</span><br><span class="line">    // will <span class="keyword">be</span> resolved <span class="keyword">to</span> basePath (in the same way <span class="keyword">as</span> <span class="keyword">files</span>/exclude patterns) </span><br><span class="line">    junitReporter: &#123;outputFile: <span class="string">'test-results.xml'</span>&#125;, </span><br><span class="line"></span><br><span class="line">    // If browser does not capture in given timeout [ms], kill it </span><br><span class="line">    captureTimeou<span class="variable">t:</span> <span class="number">20000</span>, </span><br><span class="line"></span><br><span class="line">    // report which specs are slower than <span class="number">500</span>ms </span><br><span class="line">    reportSlowerThan: <span class="number">500</span>, </span><br><span class="line"></span><br><span class="line">    plugin<span class="variable">s:</span> [</span><br><span class="line">    <span class="string">'karma-jasmine'</span></span><br><span class="line">    ] </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="karma-jasminae-自动化单元测试">Karma + Jasminae 自动化单元测试</span></h3><p>测试项目 <code>Karma-test</code> 目录为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Karma-test</span><br><span class="line"><span class="bullet">    - </span>corverage (此目录会在后面覆盖率自动生成，暂忽略)</span><br><span class="line"><span class="bullet">        - </span>...</span><br><span class="line"><span class="bullet">    - </span>test</span><br><span class="line"><span class="bullet">        - </span>index.js</span><br><span class="line"><span class="bullet">        - </span>indexSpec.js</span><br><span class="line"><span class="bullet">    - </span>karma.conf.js</span><br></pre></td></tr></table></figure><ol><li>创建源文件(**.js 例：index.js)：用于实现某种业务逻辑的文件，平时写的js脚本；<br>在 <code>index.js</code> 实现一个求和运算：</li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">add</span>(number) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">number</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建测试文件(**Spec.js 例：indexSpec.js)：符合 <code>JasmineAPI</code> 的测试JS脚本；<br>在 <code>indexSpec.js</code> 中实现测试结果：</li></ol><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"test add function"</span>, function () &#123;</span><br><span class="line">    it(<span class="string">"test function"</span>, function () &#123;</span><br><span class="line">        expect(<span class="name">add</span>(<span class="number">1</span>)).toBe(<span class="number">2</span>)<span class="comment">;    // add(1)是index.js中的方法，toBe(2)是期望的结果。</span></span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>修改 <code>karma.conf.js</code> 配置文件；</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本片段，以初始化生成为准</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    config.set(&#123;</span><br><span class="line"></span><br><span class="line">        preprocessors: &#123;<span class="string">'test/**/*.js'</span>: <span class="string">'coverage'</span> &#125;,</span><br><span class="line">        reporters: [<span class="string">'progress'</span>, <span class="string">'coverage'</span>],</span><br><span class="line">        <span class="comment">// 覆盖率报告器配置</span></span><br><span class="line">        coverageReporter: &#123;</span><br><span class="line">            type: <span class="string">'html'</span>,</span><br><span class="line">            dir: <span class="string">'coverage/'</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li>启动karma 单元测试全自动执行<br><code>$ karma start karma.conf.js</code>  OR <code>$ karma start karma.conf.js --log-level debug --single-run</code> // 此时，Karma 会自动打开浏览器，并运行相应的测试用例，而执行结果会输出到控制台。<br><strong>输出如下：</strong></li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*****deMacBook-Pro:Karma-test *****$ karma start karma.conf.js</span><br><span class="line"><span class="number">18</span> <span class="number">03</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">08.978</span>:WARN [filelist]: All files matched by <span class="string">"/Users/weichanglu/Desktop/Karma-test/test/**/*Spec.js"</span> were excluded <span class="keyword">or</span> matched by prior matchers.</span><br><span class="line"><span class="number">18</span> <span class="number">03</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">09.111</span>:WARN [karma]: No captured browser, open http:<span class="comment">//localhost:9876/</span></span><br><span class="line"><span class="number">18</span> <span class="number">03</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">09.167</span>:INFO [karma-server]: Karma v4<span class="number">.4</span><span class="number">.1</span> server started at http:<span class="comment">//0.0.0.0:9876/</span></span><br><span class="line"><span class="number">18</span> <span class="number">03</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">09.167</span>:INFO [launcher]: Launching browsers Chrome with concurrency unlimited</span><br><span class="line"><span class="number">18</span> <span class="number">03</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">09.181</span>:INFO [launcher]: Starting browser Chrome</span><br><span class="line"><span class="number">18</span> <span class="number">03</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">12.770</span>:INFO [Chrome <span class="number">79.0</span><span class="number">.3945</span> (Mac OS X <span class="number">10.15</span><span class="number">.1</span>)]: Connected on socket fNwvZpUHRXSnHHXsAAAA with id <span class="number">33904973</span></span><br><span class="line">Chrome <span class="number">79.0</span><span class="number">.3945</span> (Mac OS X <span class="number">10.15</span><span class="number">.1</span>): Executed <span class="number">1</span> of <span class="number">1</span> SUCCESS (<span class="number">0.005</span> secs / <span class="number">0.001</span> secs)</span><br><span class="line">TOTAL: <span class="number">1</span> SUCCESS</span><br></pre></td></tr></table></figure><p>浏览器会自动打开页面，内容如下;</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Karma v4<span class="number">.4</span><span class="number">.1</span> - connected                                              DEBUG</span><br><span class="line"></span><br><span class="line">Chrome <span class="number">79.0</span><span class="number">.3945</span> (Mac OS X <span class="number">10.15</span><span class="number">.1</span>) <span class="keyword">is</span> idle</span><br></pre></td></tr></table></figure><ol start="5"><li>调试及其他<br>很多时候，我们只想要运行某一个suite中的所有测试用例，而不是整个工程，比如在Jasmine中：</li></ol><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"test sum function"</span>, function () &#123;</span><br><span class="line">    it(<span class="string">"test function"</span>, function () &#123;</span><br><span class="line">        expect(<span class="name">sum</span>(<span class="number">1</span>)).toBe(<span class="number">2</span>)<span class="comment">;    //sum(1)是index.js中的方法，toBe(2)是期望的结果。</span></span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>只需要将 <code>describe</code> 修改为 <code>ddescribe</code> 即可，类似的，如果只需要运行某一个测试用例，只需要将 <code>it</code> 修改为 <code>iit</code> 即可。<br>另外，Karma还提供了debugger功能，在测试用例中加入： <code>debugger;</code><br>由于在运行时，karma实际上会启动一个真实地浏览器，所以可以在浏览器的developer-tool中进行实际的调试。需要注意的是，当进入调试模式时，需要启动developer-tool(在Karma启动的那个浏览器窗口中)。</p><p>通过修改验证测试结果文件 <code>indexSpec.js</code> 进行测试即可，由于karma.conf.js配置文件中 <code>autoWatch: true</code> , <code>indexSpec.js</code> 文件保存后，会自动执行单元测试。<br>查看执行日志，验证测试结果：</p><ol><li><strong>终端日志</strong></li><li><strong>浏览器F12开发者模式</strong></li></ol><h3><span id="karma-代码覆盖率">Karma 代码覆盖率</span></h3><ol><li>需要安装依赖 <code>karma-coverage</code> 命令：<code>$ npm install karma-coverage --save-dev</code>，还是建议安装到项目目录中，以便于迁移。</li><li>修改<code>karma.conf.js</code>配置文件</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">reporters</span>: [<span class="string">'progress'</span>, <span class="string">'coverage'</span>],</span><br><span class="line"></span><br><span class="line"><span class="attribute">preprocessors</span>: &#123;<span class="string">'test/**/*.js'</span>: <span class="string">'coverage'</span> &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆盖率报告器配置</span></span><br><span class="line"><span class="attribute">coverageReporter</span>: &#123;</span><br><span class="line">  <span class="attribute">type</span>: <span class="string">'html'</span>,</span><br><span class="line">  <span class="attribute">dir</span>: <span class="string">'coverage/'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li>启动 <code>karma start karma.conf.js</code> ，会在项目根目录下生成 <code>coverage</code> 目录，在其下面找到index.html文件（coverage/chrome/index.html），浏览器打开，便看到代码测试覆盖绿报告。<br>通过修改业务代码（index.js），来观测覆盖率变化。<br>为了产品的质量要尽量达到更多的覆盖率，一般对于JAVA项目来说，能达到80%就是相当高的标准了。</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">All files</span><br><span class="line"><span class="number">100</span>% Statements <span class="number">4</span>/<span class="number">4100</span>% Branches <span class="number">0</span>/<span class="number">0100</span>% Functions <span class="number">3</span>/<span class="number">3100</span>% Lines <span class="number">4</span>/<span class="number">4</span></span><br><span class="line">Press n <span class="keyword">or</span> j to go to the next uncovered block, b, p <span class="keyword">or</span> k <span class="keyword">for</span> the previous block.</span><br><span class="line"></span><br><span class="line">FileStatementsBranchesFunctionsLines</span><br><span class="line">index.js</span><br><span class="line"><span class="number">100</span>%<span class="number">1</span>/<span class="number">1</span><span class="number">100</span>%<span class="number">0</span>/<span class="number">0</span><span class="number">100</span>%<span class="number">1</span>/<span class="number">1</span><span class="number">100</span>%<span class="number">1</span>/<span class="number">1</span></span><br><span class="line">indexSpec.js</span><br><span class="line"><span class="number">100</span>%<span class="number">3</span>/<span class="number">3</span><span class="number">100</span>%<span class="number">0</span>/<span class="number">0</span><span class="number">100</span>%<span class="number">2</span>/<span class="number">2</span><span class="number">100</span>%<span class="number">3</span>/<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong><u><a href="https://github.com/cl9000/Karma-test" target="_blank" rel="noopener">测试代码git地址</a></u></strong></p><h3><span id="参考资源">参考资源</span></h3><p><a href="http://karma-runner.github.io/1.0/index.html" target="_blank" rel="noopener">Karma 官网</a><br><a href="https://jasmine.github.io/tutorials/your_first_suite" target="_blank" rel="noopener">Jasmine 官网</a><br><a href="https://www.npmjs.com/search?q=keywords:karma-plugin" target="_blank" rel="noopener">Karma 官网 plugins 部分</a><br><a href="https://www.ibm.com/developerworks/cn/web/wa-lo-use-karma-jasmine-build-test-environment/index.html#icomments" target="_blank" rel="noopener">使用 Karma + Jasmine 构建 Web 测试环境</a><br><a href="http://icodeit.org/2013/10/using-karma-as-the-javascript-test-runner/" target="_blank" rel="noopener">使用Karma运行JavaScript测试</a><br><a href="http://blog.fens.me/nodejs-karma-jasmine/" target="_blank" rel="noopener">Karma和Jasmine自动化单元测试</a><br><a href="https://yq.aliyun.com/articles/4194" target="_blank" rel="noopener">karma 测试框架的前世今生</a><br><a href="https://www.cnblogs.com/jasmine-95/p/6054839.html" target="_blank" rel="noopener">Karma+Jasmine实现自动化单元测试</a><br><a href="https://www.cnblogs.com/haogj/p/5204126.html" target="_blank" rel="noopener">Karma：1. 集成 Karma 和 Jasmine 进行单元测试</a><br><a href="https://segmentfault.com/a/1190000005848842" target="_blank" rel="noopener">karma 入门</a><br><a href="https://blog.csdn.net/anneCoder/article/details/80854101" target="_blank" rel="noopener">JS测试工具karma及应用</a><br><a href="https://blog.csdn.net/xishaoguo/article/details/82621019?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">前端单元测试工具——karma安装使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;karma-jasmine-构建-web-测试环境&quot;&gt;Karma + Jasmine 构建 Web 测试环境&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span id=&quot;jasmine-简介&quot;&gt;Jasmine 简介&lt;/span&gt;&lt;/h3&gt;
&lt;!-- &lt;img 
      
    
    </summary>
    
    
      <category term="Karma" scheme="https://cl9000.github.io/categories/Karma/"/>
    
      <category term="Jasmine" scheme="https://cl9000.github.io/categories/Karma/Jasmine/"/>
    
      <category term="Web测试" scheme="https://cl9000.github.io/categories/Karma/Jasmine/Web%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Karma" scheme="https://cl9000.github.io/tags/Karma/"/>
    
      <category term="Jasmine" scheme="https://cl9000.github.io/tags/Jasmine/"/>
    
      <category term="Web测试" scheme="https://cl9000.github.io/tags/Web%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>iOS利用 Jenkins 实现自动化打包（SVN版）</title>
    <link href="https://cl9000.github.io/2017/12/24/iOS%E5%88%A9%E7%94%A8Jenkins%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%EF%BC%88SVN%E7%89%88%EF%BC%89/"/>
    <id>https://cl9000.github.io/2017/12/24/iOS%E5%88%A9%E7%94%A8Jenkins%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%EF%BC%88SVN%E7%89%88%EF%BC%89/</id>
    <published>2017-12-24T14:58:38.000Z</published>
    <updated>2020-04-27T01:56:19.818Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="mac上安装jekins简单介绍">Mac上安装Jekins简单介绍</span></h2><p>在此记录权当作为笔记，或提供给需要的同学参考，如有问题请及时提出，谢谢大家审阅。</p><h2><span id="jenkins安装">Jenkins安装</span></h2><p>1、手动安装 去 <a href="https://jenkins.io/index.html" target="_blank" rel="noopener">jenkins官网</a>下载 <code>Mac</code> 版本安装包进行安装<br>2、也可以使用 <code>Homebrew</code> 安装，执行下面命令：<br><code>$ brew install jenkins</code></p><p>安装jenkins完成后，在终端输入：<br><code>$ jenkins start 或者 jenkins</code></p><p>启动jenkins；然后浏览器打开jenkins：<br><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><p>进入Getting Started 页面会去提示Unlock Jenkins，重新设置用户与密码，拷贝当前页面提示的<strong>路径</strong>(红色)，在终端输入：<br><code>$ sudo cat 路径</code></p><p>回车后，在终端会有一串字符串输出，拷贝到Administrator password输入框中，continue<br><code>（或者按照提示，找到**上面路径** 这个目录下，这个目录虽然是共享目录，但是有权限的，非Jenkins用户/secrets/目录是没有读写权限的，打开initialAdminPassword文件，复制出密码）</code></p><p><code>continue</code> 后 默认安装插件，完后回去输入个用户信息，以后便使用此用户去登陆了。</p><h2><span id="安装插件">安装插件</span></h2><p>进入jenkins 首页后，进入 系统管理\管理插件 \ 可选插件<img src="http://upload-images.jianshu.io/upload_images/4665802-55558cae4e93d10e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>安装GitLab插件:<br>因为我们用的是GitLab来管理源代码，Jenkins本身并没有自带GitLab插件，所以我们需要依次选择 系统管理-&gt;管理插件，在“可选插件”中选中“GitLab Plugin”和“Gitlab Hook Plugin”这两项，然后安装。</p></blockquote><blockquote><p>安装Xcode插件:<br>同安装GitLab插件的步骤一样，我们依次选择系统管理-&gt;管理插件，在“可选插件”中选中“Xcode integration”安装。</p></blockquote><blockquote><p>安装签名证书管理插件:<br>iOS打包内测版时，需要发布证书及相关签名文件，因此这两个插件对于管理iOS证书非常方便。还是在系统管理-&gt;管理插件，在“可选插件”中选中“Credentials Plugin”和“Keychains and Provisioning Profiles Management”安装。</p></blockquote><blockquote><p>安装脚本插件:<br>这个插件的功能主要是用于在build后执行相关脚本。在系统管理-&gt;管理插件，在“可选插件”中选中“Post-Build Script Plug-in”安装。</p></blockquote><p>以后可根据需求去添加相关的组件。</p><h2><span id="jenkins构建项目">jenkins构建项目</span></h2><p>1、<strong>IOS证书管理和修正</strong><br>系统管理-&gt; Keychains and Provisioning Profiles Management<br><img src="http://upload-images.jianshu.io/upload_images/4665802-716faa6a6698d48d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">进入此路径~/Library/Keychain/login.keychain（我是拷贝到桌面后上传的）根据提示输入相关内容<br>点击Add Code Signing Identity添加对应的签名<img src="http://upload-images.jianshu.io/upload_images/4665802-e66343f261224ade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>上传Provisioning Profiles文件，xcode的profile存放在~/Library/MobileDevice/Provisioning Profiles/中，找到你要的profile，上传<img src="http://upload-images.jianshu.io/upload_images/4665802-65ce8e0e50ae953d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>2、<strong>新建项目</strong><br>New Item ------- 选择FreeStyle project<br><img src="http://upload-images.jianshu.io/upload_images/4665802-e524bbf435e411cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>关联SVN，用于从svn下载代码<br><img src="http://upload-images.jianshu.io/upload_images/4665802-a4b17745042b17d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>Poll SCM</strong>  (poll source code management)  轮询源码管理<br>需要设置源码的路径才能起到轮询的效果。一般设置为类似结果： 0/5 * * * * 每5分钟轮询一次</p><p><strong>Build periodically</strong> (定时build)<br>一般设置为类似： 00 20 * * *   每天 20点执行定时build 。当然两者的设置都是一样可以通用的。</p><p><strong>格式:</strong><br>分钟(0-59) 小时(0-23) 日期(1-31) 月(1-12) 周几(0-7,0和7都是周日) <a href="https://link.jianshu.com?t=http://www.scmgalaxy.com/scm/setting-up-the-cron-jobs-in-jenkins-using-build-periodically-scheduling-the-jenins-job.html" target="_blank" rel="noopener">更加详细的设置看这里</a><img src="http://upload-images.jianshu.io/upload_images/4665802-b5a416ef249dfd47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>3、<strong>构建环境设置</strong><br>iOS打包需要签名文件和证书，所以这部分我们勾选“Keychains and Code Signing Identities”和“Mobile Provisioning Profiles”。<br>这里我们又需要用到Jenkins的插件，在系统管理页面，选择“Keychains and Provisioning Profiles Management”， （此处是个上面已经配置好login.keychain、证书和pp文件 ）。回到我们新建的item，找到构建环境，按下图选好自己的相关证书和签名文件(图是借用的)<br><img src="http://upload-images.jianshu.io/upload_images/4665802-c7365f1f2a6f1c36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>4、<strong>添加Xcode构建步骤</strong><br>构建的方式有编写脚本和Xcode两种常用方式。编写脚本的话会更加灵活，但是脚本写起来比较麻烦。这里我选择用Xcode的方式进行构建。<br><img src="http://upload-images.jianshu.io/upload_images/4665802-b8ff4d4878115d1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/4665802-fb3adbadc4851bf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/4665802-960a72da31cec978.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><strong>此处的 shema 若有问题 可填写工程名</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/4665802-b3f823517949c02a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>填写完毕后可以立即构建工作，成功或失败可在Console Output查看日志（去解决 ）。或者使用实时查看日志命令<code>tail -f **.log路径</code></p><p>5、<strong>构建后操作</strong><br>打包完成自动化上传 <code>fir / 蒲公英</code> 第三方平台<br>要上传到 <code>fir / 蒲公英</code> 第三方平台，都需要注册一个账号，获得 <code>token</code>，之后才能进行脚本化操作。</p><ol><li><p>自动化上传fir<br>安装fir-clifir的命令行工具 需要先装好ruby再执行<br><code>gem install fir-cli</code><br>#上传到fir<br><code>fir publish ${ipa_path} -T fir_token -c &quot;${commit_msg}&quot;</code></p></li><li><p>自动化上传蒲公英(<a href="https://www.pgyer.com" target="_blank" rel="noopener">极光官方文档</a>)</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#蒲公英上的User Key</span><br><span class="line">uKey=<span class="string">"7381f97070*****c01fae439fb8b24e"</span></span><br><span class="line">#蒲公英上的API Key</span><br><span class="line">apiKey=<span class="string">"0b27b5c145*****718508f2ad0409ef4"</span></span><br><span class="line">#要上传的ipa文件路径</span><br><span class="line">IPA_PATH=<span class="string">"文件路径.ipa"</span></span><br><span class="line"></span><br><span class="line">rm -rf ***.ipa</span><br><span class="line"></span><br><span class="line">#执行上传至蒲公英的命令</span><br><span class="line">echo <span class="string">"++++++++++++++upload+++++++++++++"</span></span><br><span class="line">curl -F <span class="string">"file=@$&#123;IPA_PATH&#125;"</span> -F <span class="string">"uKey=$&#123;uKey&#125;"</span> -F <span class="string">"_api_key=$&#123;apiKey&#125;"</span> http:<span class="comment">//www.pgyer.com/apiv1/app/upload</span></span><br></pre></td></tr></table></figure><p>将上述脚本保存到一个 <code>*.sh</code> 文件中， 截图（图借的）中改为 <strong>/bin/sh  脚本文件路径</strong> （不要用paython，会报错），保存后再次构建即可上传到蒲公英了<br><img src="http://upload-images.jianshu.io/upload_images/4665802-1e343bf8195ddea6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>暂时记录，详细再更新。。。。。</strong></p><h2><span id="refrence">Refrence</span></h2><p><a href="http://m.blog.csdn.net/lijuan3203/article/details/69950229" target="_blank" rel="noopener">一步一步教你自动化构建（Jenkins+SVN+fir+CocoaPods）</a><br><a href="https://www.jianshu.com/p/371595ef08fe" target="_blank" rel="noopener">Jenkins+ Xcode+ 蒲公英 实现IOS自动化打包和分发</a><br><a href="https://www.pgyer.com/doc/view/jenkins_ios" target="_blank" rel="noopener">使用 Jenkins 实现持续集成 (iOS)</a><br><a href="http://blog.csdn.net/zhonggaorong/article/details/51436275" target="_blank" rel="noopener">iOS开发之Mac+jenkins+svn自动化构建</a><br><a href="http://blog.csdn.net/u013602835/article/details/54632843" target="_blank" rel="noopener">搭建iOS自动化打包平台(利用Jenkins持续集成iOS项目)</a><br><a href="http://www.jianshu.com/p/382596b1f120" target="_blank" rel="noopener">iOS利用Jenkins实现自动化打包（SVN版）</a><br><a href="https://www.jianshu.com/p/41ecb06ae95f" target="_blank" rel="noopener">手把手教你利用Jenkins持续集成iOS项目</a><br><a href="http://blog.csdn.net/syg90178aw/article/details/52221765" target="_blank" rel="noopener"> Jenkins自动打包 配置mac slave节点</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;mac上安装jekins简单介绍&quot;&gt;Mac上安装Jekins简单介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在此记录权当作为笔记，或提供给需要的同学参考，如有问题请及时提出，谢谢大家审阅。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;jenkins安装&quot;&gt;Jenkin
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://cl9000.github.io/categories/iOS/"/>
    
      <category term="Jenkins" scheme="https://cl9000.github.io/categories/iOS/Jenkins/"/>
    
      <category term="自动化打包" scheme="https://cl9000.github.io/categories/iOS/Jenkins/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
    
    
      <category term="iOS" scheme="https://cl9000.github.io/tags/iOS/"/>
    
      <category term="Jenkins" scheme="https://cl9000.github.io/tags/Jenkins/"/>
    
      <category term="自动化打包" scheme="https://cl9000.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>[Extension] Chrome扩展程序开发</title>
    <link href="https://cl9000.github.io/2017/09/11/Extension-Chrome%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>https://cl9000.github.io/2017/09/11/Extension-Chrome%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</id>
    <published>2017-09-11T09:50:35.000Z</published>
    <updated>2020-03-12T03:06:22.933Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="chrome-extension">Chrome Extension</span></h4><h4><span id="缘由">缘由</span></h4><p>鉴于经常使用Chrome浏览器，一些用着比较顺手的 <code>Chrome扩展</code> 对于提高生活幸福效率有着很大好处。随即翻阅了下关于 <code>Chrome扩展</code> 开发相关的资料。随即整理如下；<br><a href="https://developer.chrome.com/extensions" target="_blank" rel="noopener">Chrome Extensions developer - API文档</a></p><h4><span id="简要说明">简要说明</span></h4><p><code>Chrome扩展</code> 是一个用Web技术开发、用来增强浏览器功能的软件，一个由HTML、CSS、JS、images等资源组成后经编译发包的一个 <code>**.crx</code> 后缀的压缩包。扩展可以定制爬虫、屏蔽广告、网页实时数据、修改http(s)请求头等等。可以根据自己的需求定制满足自己功能的扩展（Extension）。</p><h5><span id="chrome命令">Chrome://命令</span></h5><blockquote><p>直接在 <code>Chrome</code> 地址栏输入回车</p></blockquote><table><thead><tr><th>chrome://命令</th><th>描述</th></tr></thead><tbody><tr><td><strong><code>chrome://about</code></strong></td><td>查看所有chrome:// 列表</td></tr><tr><td><code>chrome://extensions</code></td><td>显示扩展</td></tr><tr><td><code>chrome://settings</code></td><td>设置</td></tr><tr><td><code>chrome://version</code></td><td>显示当前版本</td></tr><tr><td><code>chrome://history</code></td><td>历史记录</td></tr><tr><td><code>chrome://downloads</code></td><td>下载文件</td></tr><tr><td><code>chrome://newtab</code></td><td>创建新标签</td></tr><tr><td><code>chrome://bookmarks</code></td><td>收藏的标签</td></tr><tr><td><code>chrome://apps</code></td><td>应用操作界面</td></tr><tr><td><code>chrome://components</code></td><td>组件信息</td></tr><tr><td><code>chrome://net-internals</code></td><td>网络事件信息</td></tr><tr><td><code>chrome://memory-redirect</code></td><td>内存使用的统计信息</td></tr><tr><td><code>chrome://dns</code></td><td>显示主机名列表、DNS 状态</td></tr><tr><td><code>chrome://devices</code></td><td>连接的设备</td></tr><tr><td><code>chrome://flags</code></td><td>实验项目，加“#项目名称”锚点可以直接定位到项目</td></tr><tr><td><code>chrome://translate-internals</code></td><td>内置翻译功能页面</td></tr><tr><td><code>chrome://quit</code></td><td>退出浏览器</td></tr><tr><td><code>chrome://restart</code></td><td>重启浏览器</td></tr></tbody></table><h4><span id="扩展结构">扩展结构</span></h4><h5><span id="配置文件-manifestjson">配置文件 - <code>manifest.json</code></span></h5><blockquote><p>扩展必须有 <code>manifest.json</code> 文件，文件基本如下，<br>官方模板 <strong><a href="https://developer.chrome.com/extensions/manifest" target="_blank" rel="noopener">manifest.json</a></strong>。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">    <span class="attr">"manifest_version"</span>: <span class="number">2</span>,  <span class="comment">// 清单文件的版本，固定值 2</span></span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"test echarts - 插件的名称"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"插件的描述"</span>,</span><br><span class="line">    <span class="attr">"icons"</span>: &#123;</span><br><span class="line">        <span class="attr">"16"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">        <span class="attr">"48"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">        <span class="attr">"64"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">        <span class="attr">"128"</span>: <span class="string">"img/icon.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"commands"</span>: &#123;</span><br><span class="line">        <span class="attr">"_execute_browser_action"</span>: &#123;</span><br><span class="line">            <span class="attr">"suggested_key"</span>: &#123;</span><br><span class="line">                <span class="attr">"default"</span>: <span class="string">"Ctrl+Shift+V"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 扩展图标设置，browser_action、page_action、app必须三选一</span></span><br><span class="line">    <span class="attr">"browser_action"</span>: &#123;</span><br><span class="line">        <span class="attr">"default_popup"</span>: <span class="string">"index.html"</span>,</span><br><span class="line">        <span class="attr">"default_icon"</span>: <span class="string">"icon00.png"</span>,</span><br><span class="line">        <span class="attr">"default_title"</span>: <span class="string">"图标悬停时的title"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件的运行环境</span></span><br><span class="line">    <span class="attr">"background"</span>: &#123; <span class="comment">// 2种指定方式，若设置了scripts字段，那么会自动生成一个背景页</span></span><br><span class="line">        <span class="attr">"page"</span>: <span class="string">"background.html"</span></span><br><span class="line">        <span class="comment">//"scripts": ["js/background.js"]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 权限申请</span></span><br><span class="line">    <span class="attr">"permissions"</span>: [</span><br><span class="line">        <span class="string">"contextMenus"</span>, <span class="comment">// 右键菜单</span></span><br><span class="line">        <span class="string">"tabs"</span>, <span class="comment">// 标签</span></span><br><span class="line">        <span class="string">"notifications"</span>, <span class="comment">// 通知</span></span><br><span class="line">        <span class="string">"webRequest"</span>, <span class="comment">// web请求</span></span><br><span class="line">        <span class="string">"webRequestBlocking"</span>,</span><br><span class="line">        <span class="string">"storage"</span>, <span class="comment">// 插件本地存储</span></span><br><span class="line">        <span class="string">"http://*/*"</span>, <span class="comment">// 可以通过executeScript或者insertCSS访问的网站</span></span><br><span class="line">        <span class="string">"https://*/*"</span> <span class="comment">// 可以通过executeScript或者insertCSS访问的网站</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 对页面内容进行操作的脚本</span></span><br><span class="line">    <span class="attr">"content_scripts"</span>: [ </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//"matches": ["http://*/*", "https://*/*"], // 满足条件执行该插件 </span></span><br><span class="line">            <span class="comment">// "&lt;all_urls&gt;" 表示匹配所有地址 </span></span><br><span class="line">            <span class="attr">"matches"</span>: [<span class="string">"&lt;all_urls&gt;"</span>],</span><br><span class="line">            <span class="comment">// 多个JS按顺序注入</span></span><br><span class="line">            <span class="attr">"js"</span>: [<span class="string">"js/jquery-1.8.3.js"</span>, <span class="string">"js/content-script.js"</span>],</span><br><span class="line">            <span class="attr">"css"</span>: [<span class="string">"css/custom.css"</span>],</span><br><span class="line">            <span class="comment">// 代码注入的时间，可选值： "document_start", "document_end", or "document_idle"，最后一个表示页面空闲时，默认document_idle</span></span><br><span class="line">            <span class="attr">"run_at"</span>: <span class="string">"document_start"</span> <span class="comment">// 在document加载时执行该脚本</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的</span></span><br><span class="line">    <span class="attr">"web_accessible_resources"</span>: [<span class="string">"js/inject.js"</span>],</span><br><span class="line">    <span class="comment">// 插件主页，打开扩展程序主页</span></span><br><span class="line">    <span class="attr">"homepage_url"</span>: <span class="string">"https://www.bing.com"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="配置字段说明">配置字段说明</span></h5><h6><span id="browser_action"><strong>browser_action</strong></span></h6><ol><li><p>如果 <code>browser action</code> 设置了<code>default_popup</code>，popup 可以包含任意你想要的HTML内容，并且会自适应大小。popup 会在用户点击图标后出现。若没有设置default_popup，将执行 <code>chrome.browserAction.onClicked</code> 的内容，若没有设置，就什么都不执行了。</p></li><li><p>和 <code>browser_action</code> 对应的还有一个 <code>page_action</code>，区别在于：<code>browser_action</code> 对在浏览器中加载的所有网页都生效；<code>page_action</code> 针对特定的网页生效。一个<code>Extension</code>最多可以有一个 <code>browser_action</code> 或  <code>page_action</code>。</p></li></ol><h6><span id="background"><strong>background</strong></span></h6><ol><li><p><code>background</code>是插件的运行环境。若设置了<code>scripts</code>字段，浏览器的扩展系统会自动根据scripts字段指定的所有js文件自动生成背景页。也可使用 <code>page</code> 字段指定背景页，<code>**二者只能设置一个**</code>。</p></li><li><p>一般情况下，会将扩展的主要逻辑都放在 <code>background</code> 中比较便于管理。其它页面可以通过消息传递的机制与 <code>background</code> 进行通讯。理论上 <code>content scripts</code> 与 popup 之间也可以传递消息，但不建议这么做。</p></li></ol><h6><span id="content-scripts">content-scripts</span></h6><ol><li><code>content-scripts</code> 是Chrome扩展向页面注入脚本的一种形式（可包含css文件），借助<code>content-scripts</code> 可实现通过配置的方式轻松向指定页面注入<code>JS、CSS</code>（如需要动态注入，可以参考下文），最常见的比如：广告屏蔽、页面CSS定制，等等。</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"content_scripts"</span>: [&#123;  <span class="regexp">//</span>对页面内容进行操作的脚本</span><br><span class="line">     <span class="string">"matches"</span>: [<span class="string">"http://*/*"</span>,<span class="string">"https://*/*"</span>], <span class="regexp">//</span>满足条件执行该插件 </span><br><span class="line">     <span class="regexp">//</span><span class="string">"matches"</span>: [<span class="string">"&lt;all_urls&gt;"</span>], <span class="regexp">//</span> <span class="string">"&lt;all_urls&gt;"</span> 表示匹配所有地址 </span><br><span class="line">     <span class="string">"js"</span>: [<span class="string">"js/jquery-1.9.1.min.js"</span>, <span class="string">"js/js.js"</span>],</span><br><span class="line">     <span class="string">"css"</span>: [<span class="string">"css/custom.css"</span>],</span><br><span class="line">     <span class="string">"run_at"</span>: <span class="string">"document_start"</span>,  <span class="regexp">//</span>在document加载时执行该脚本</span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></figure><h5><span id="桌面通知">桌面通知</span></h5><p>Chrome提供了一个 <code>chrome.notifications</code> API以便插件推送桌面通知</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chrome</span><span class="selector-class">.notifications</span><span class="selector-class">.create</span>(<span class="selector-tag">null</span>, &#123;</span><br><span class="line">    <span class="attribute">type</span>: <span class="string">'basic'</span>,</span><br><span class="line">    iconUrl: <span class="string">'img/icon.png'</span>,</span><br><span class="line">    title: <span class="string">'标题'</span>,</span><br><span class="line">    message: <span class="string">'桌面通知'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5><span id="消息通信">消息通信</span></h5><p><a href="https://developer.chrome.com/extensions/messaging" target="_blank" rel="noopener">官网 - 消息通信文档</a></p><h6><span id="普通的消息传递"><strong>普通的消息传递</strong></span></h6><p>通过<code>runtime</code>的<code>onMessage</code>、<code>sendMessage</code>等方法，可以在各个JS之间传递并监听消息。<br>在popup.js中，我们让它初始化之后发送一个消息：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chrome</span><span class="selector-class">.runtime</span><span class="selector-class">.sendMessage</span>(&#123;</span><br><span class="line">  <span class="attribute">method</span>: <span class="string">'showAlert'</span></span><br><span class="line">&#125;, <span class="selector-tag">function</span>(<span class="selector-tag">response</span>) &#123;&#125;);</span><br></pre></td></tr></table></figure><p>然后在background.js中，监听消息的接收，并进行处理：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.onMessage.addListener(function(<span class="class"><span class="keyword">message</span>, <span class="title">sender</span>, sendResponse) </span>&#123;</span><br><span class="line">  if (<span class="class"><span class="keyword">message</span>.<span class="title">method</span> === 'showAlert') </span>&#123;</span><br><span class="line">    alert('showAlert');</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><code>chrome.runtime</code> 的常用方法：</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前扩展程序中正在运行的后台网页的 JavaScript window 对象</span></span><br><span class="line">chrome.runtime.getBackgroundPage(<span class="function"><span class="keyword">function</span> <span class="params">(backgroundPage)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// backgroundPage 即 window 对象</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">chrome.runtime.sendMessage(message, <span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// response 代表消息回复，可以接受到通过 sendResponse 方法发送的消息回复</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听消息</span></span><br><span class="line">chrome.runtime.onMessage.addListener(<span class="function"><span class="keyword">function</span><span class="params">(message, sender, sendResponse)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// message 就是你发送的 message</span></span><br><span class="line">  <span class="comment">// sender 代表发送者，可以通过 sender.tab 判断消息是否是从内容脚本发出</span></span><br><span class="line">  <span class="comment">// sendResponse 可以直接发送回复，如：</span></span><br><span class="line">  sendResponse(&#123;</span><br><span class="line">    method: <span class="string">'response'</span>,</span><br><span class="line">    message: <span class="string">'send a response'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>需要注意的是，即便你在多个JS中注册了消息监听<code>onMessage.addListener</code>，也只有一个监听者能收到通过<code>runtime.sendMessage</code>发送出去的消息。如果需要不同的监听者分别监听消息，则需要使用<code>chrome.tab</code> API来指定消息接收对象</p><h6><span id="长-短连接">长、短连接</span></h6><p>Chrome插件中有2种通信方式：<br>短连接（<code>chrome.tabs.sendMessage</code>、<code>chrome.runtime.sendMessage</code>）</p><p>通过<code>chrome.runtime.connect</code>（或者<code>chrome.tabs.connect</code>）可以建立起不同类型JS之间的长链接。<br><strong>长连接：</strong><br><strong>popup.js</strong> 信息的发送者需要制定独特的信息类型，发送并监听信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var<span class="built_in"> port </span>= chrome.runtime.connect(&#123;type: <span class="string">"connection"</span>&#125;);</span><br><span class="line">port.postMessage(&#123;</span><br><span class="line">  method: <span class="string">"add"</span>,</span><br><span class="line">  datas: [1, 2, 3]</span><br><span class="line">&#125;);</span><br><span class="line">port.onMessage.addListener(function(msg) &#123;</span><br><span class="line">  <span class="keyword">if</span> (msg.method === <span class="string">"answer"</span>) &#123;</span><br><span class="line">      console.log(msg.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>content-script.js</strong> 而接受者则要注册监听，并判断消息的类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听长连接</span></span><br><span class="line">chrome.runtime.onConnect.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">port</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.assert(port.type == <span class="string">"connection"</span>);</span><br><span class="line">  port.onMessage.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.method == <span class="string">"add"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> result = msg.datas.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousValue, currentValue, index, array</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> previousValue + currentValue;</span><br><span class="line">  &#125;);</span><br><span class="line">      port.postMessage(&#123;</span><br><span class="line">        method: <span class="string">"answer"</span>,</span><br><span class="line">        data: result</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6><span id="chrometabs"><strong><code>chrome.tabs</code></strong></span></h6><p>要使用这个API则需要先在<code>manifest.json</code>中注册：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"permissions"</span>: [</span><br><span class="line">  <span class="string">"tabs"</span>,</span><br><span class="line">  <span class="string">//</span> <span class="string">...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取到当前的Tab</span></span><br><span class="line">chrome.tabs.getCurrent(<span class="function"><span class="keyword">function</span><span class="params">(tab)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 通过 tab.id 可以拿到标签页的ID</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 queryInfo，以Array的形式筛选出符合条件的tabs</span></span><br><span class="line">chrome.tabs.query(queryInfo, <span class="function"><span class="keyword">function</span><span class="params">(tabs)</span> </span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精准的给某个页面的`content_scripts`发送消息</span></span><br><span class="line">chrome.tabs.sendMessage(tabId, message, <span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>例子 在background.js中，我们获取到当前Tab，并发送消息：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chrome.tabs.getCurrent(<span class="function"><span class="keyword">function</span><span class="params">(tab)</span> </span>&#123;</span><br><span class="line">  chrome.tabs.sendMessage(tab.id, &#123;</span><br><span class="line">    method: <span class="string">'tab'</span>,</span><br><span class="line">    message: <span class="string">'get active tab'</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">chrome.tabs.query(&#123;active: <span class="literal">true</span>, currentWindow: <span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span><span class="params">(tabs)</span> </span>&#123;</span><br><span class="line">  chrome.tabs.sendMessage(tabs[<span class="number">0</span>].id, &#123;</span><br><span class="line">    method: <span class="string">'tab'</span>,</span><br><span class="line">    message: <span class="string">'get active tab'</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在content_scripts中，进行消息监听：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.onMessage.addListener(function(<span class="class"><span class="keyword">message</span>, <span class="title">sender</span>, sendResponse) </span>&#123;</span><br><span class="line">  if (<span class="class"><span class="keyword">message</span>.<span class="title">method</span> === 'tab') </span>&#123;</span><br><span class="line">    console.log(<span class="class"><span class="keyword">message</span>.<span class="title">message</span>);</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;);</span></span><br></pre></td></tr></table></figure><h6><span id="chromestorage"><strong><code>chrome.storage</code></strong></span></h6><p><code>chrome.storage</code> 是一个基于<code>localStorage</code>的本地储存，但chrome对其进行了IO的优化，可以储存对象形式的数据，也不会因为浏览器完全关闭而清空。<br>使用这个API需要先在<code>manifest.json</code>中注册：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"permissions"</span>: [</span><br><span class="line">  <span class="string">"storage"</span>,</span><br><span class="line">  <span class="string">//</span> <span class="string">...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>chrome.storage</code> 有两种形式，<code>chrome.storage.sync</code> 和 <code>chrome.storage.local</code>：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据储存</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">StorageArea</span>.</span></span>set(object items, <span class="keyword">function</span> callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据获取</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">StorageArea</span>.</span></span>get(<span class="built_in">string</span> <span class="keyword">or</span> <span class="built_in">array</span> <span class="keyword">of</span> <span class="built_in">string</span> <span class="keyword">or</span> object keys, <span class="keyword">function</span> callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据移除</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">StorageArea</span>.</span></span>remove(<span class="built_in">string</span> <span class="keyword">or</span> <span class="built_in">array</span> <span class="keyword">of</span> <span class="built_in">string</span> keys, <span class="keyword">function</span> callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空全部储存</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">StorageArea</span>.</span></span>clear(<span class="keyword">function</span> callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听储存的变化</span></span><br><span class="line">chrome.storage.onChanged.add<span class="constructor">Listener(<span class="params">function</span>(<span class="params">changes</span>, <span class="params">namespace</span>)</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p>例如 在<code>browser_action</code>完成了用户的登录/注册操作，将部分用户信息储存在storage中。每次初始化时，都会检查是否有储存，没有的话则需要用户登录，成功后再添加：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// browser_action</span><br><span class="line">// js.popup.js</span><br><span class="line"></span><br><span class="line">chrome.<span class="keyword">storage</span>.sync.<span class="keyword">get</span>(<span class="string">'user'</span>, <span class="keyword">function</span>(result) &#123;</span><br><span class="line">  // 通过 result.<span class="keyword">user</span> 获取到储存的 <span class="keyword">user</span> 对象</span><br><span class="line">  result &amp;&amp; setPopDOM(result.<span class="keyword">user</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> setPopDOM(<span class="keyword">user</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">user</span> &amp;&amp; <span class="keyword">user</span>.userId) &#123;</span><br><span class="line">    // <span class="keyword">show</span> <span class="keyword">user</span> UI</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    // <span class="keyword">show</span> <span class="keyword">login</span> UI</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">'login'</span>).onclick = <span class="keyword">function</span>() &#123;</span><br><span class="line">  // <span class="keyword">login</span> <span class="keyword">user</span>..</span><br><span class="line">  // 通过 ajax 请求异步登录，获取到成功的回调后，将返回的 <span class="keyword">user</span> 对象储存在 <span class="keyword">storage</span> 中</span><br><span class="line">  chrome.<span class="keyword">storage</span>.sync.<span class="keyword">set</span>(&#123;<span class="keyword">user</span>: <span class="keyword">user</span>&#125;, <span class="keyword">function</span>(result) &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在其他环境的JS里，我们可以监听storage的变化：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// background</span><br><span class="line">// js/background.js</span><br><span class="line"></span><br><span class="line">// 一个全局的 <span class="keyword">user</span> <span class="title">对象，用来保存用户信息，以便在异步时发生 userId</span></span><br><span class="line">var <span class="keyword">user</span> <span class="title">= null</span>;</span><br><span class="line"></span><br><span class="line">chrome.storage.onChanged.addListener(function(changes, namespace) &#123;</span><br><span class="line">  for (key <span class="keyword">in</span> changes) &#123;</span><br><span class="line">    if (key === 'user') &#123;</span><br><span class="line">      console.log('<span class="keyword">user</span> <span class="title">storage</span> changed!');</span><br><span class="line">      <span class="keyword">user</span> <span class="title">= changes</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li><strong>chrome不允许扩展中的HTML页面内直接内嵌js脚本，而要求所有的脚本都作为外部src来引入</strong></li><li><strong>json 文件不允许有注释</strong></li></ol><h5><span id="正式发布">正式发布</span></h5><p><a href="https://segmentfault.com/a/1190000006035525" target="_blank" rel="noopener">如何成为一名Chrome应用开发者</a><br><a href="https://www.cnblogs.com/xishuai/p/google-chrome-webstore-developer-upload-program.html" target="_blank" rel="noopener">Google Chrome 应用商店上传扩展程序</a></p><h5><span id="参考">参考</span></h5><p>了解以上东西就可以自己整理一个 Chrome扩展，若要深入功能丰富的 extension，便需要参考官网文档（Chrome暂时需要梯子）</p><blockquote><p>参考链接：</p></blockquote><ul><li><a href="https://developer.chrome.com/extensions" target="_blank" rel="noopener">Chrome扩展官网</a></li><li><a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html" target="_blank" rel="noopener">Chrome插件(扩展)开发全攻略</a></li><li><a href="https://segmentfault.com/a/1190000006949838" target="_blank" rel="noopener">Chrome 扩展开发——编写一个自己的浏览器插件</a></li><li><a href="https://www.jianshu.com/p/51c650f98d9c" target="_blank" rel="noopener">谷歌(Chrome)浏览器插件开发教程</a></li><li><a href="https://segmentfault.com/a/1190000005896962" target="_blank" rel="noopener">从零开始写一个 Chrome 扩展</a></li><li><a href="https://segmentfault.com/a/1190000007182038" target="_blank" rel="noopener">Chrome扩展程序开发</a><br>感谢以上老师整理的文章。</li></ul><h5><span id="一些插件网址">一些插件网址</span></h5><p><a href="https://chrome.zzzmh.cn/#index" target="_blank" rel="noopener">极简插件</a></p><p><a href="https://github.com/cl9000/Chrome-Extensions-Demos.git" target="_blank" rel="noopener">字数统计插件</a><br><strong>此仅为整理个人笔记，以作备忘，不做商用，请知悉，谢谢。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4&gt;&lt;span id=&quot;chrome-extension&quot;&gt;Chrome Extension&lt;/span&gt;&lt;/h4&gt;
&lt;h4&gt;&lt;span id=&quot;缘由&quot;&gt;缘由&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;鉴于经常使用Chrome浏览器，一些用着比较顺手的 &lt;code&gt;Chrome扩展&lt;/c
      
    
    </summary>
    
    
      <category term="Chrome Extension" scheme="https://cl9000.github.io/categories/Chrome-Extension/"/>
    
    
      <category term="Chrome" scheme="https://cl9000.github.io/tags/Chrome/"/>
    
      <category term="Chrome Extension" scheme="https://cl9000.github.io/tags/Chrome-Extension/"/>
    
  </entry>
  
  <entry>
    <title>在iOS中Protocol Buffer(v3.3.0)的使用</title>
    <link href="https://cl9000.github.io/2017/08/14/%E5%9C%A8iOS%E4%B8%ADProtocol-Buffer-v3-3-0-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://cl9000.github.io/2017/08/14/%E5%9C%A8iOS%E4%B8%ADProtocol-Buffer-v3-3-0-%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2017-08-14T07:03:13.000Z</published>
    <updated>2020-04-27T02:18:27.009Z</updated>
    
    <content type="html"><![CDATA[<h2><span id></span></h2><p>在此仅做笔记记录，以便后期查阅，如有问题，及时联系，多谢大家审阅。</p><h2><span id="一-protocol-buffer">一、Protocol Buffer</span></h2><p>最新版本Protobuf3.3.0 在iOS中的使用（OC与Swift使用一样）<br>具体使用<a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">参考官方文档</a>(需要翻墙)</p><p>protocol buffers是一种灵活，高效，自动化的结构化数据序列化机制。类似于我们现在使用的XML和JSON。是Google公司推出出的。但是（<strong>__但是__的前面都他妈是废话</strong>）与传统的XML和JSON不同的是，它是一种二进制格式，免去了文本格式转换的各种困扰，并且转换效率非常快，由于它的跨平台、跨编程语言的特点，它越来越普及，尤其是网络数据交换信息量较大方面使用起来更加便利。</p><p>Protobuf是一种平台无关、语言无关、可扩展且轻便高效的序列化数据结构的协议，可以用于网络通信和数据存储。</p><h2><span id="pb目前托管在github">PB目前托管在GitHub</span></h2><p>链接地址：<br><a href="https://github.com/google/protobuf" target="_blank" rel="noopener">https://github.com/google/protobuf</a>，<br>或者<a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">https://github.com/google/protobuf/releases</a>(尽量选择后者，找到你所需的语言安装包)<br>源码的主要功能可以分为两部分:</p><blockquote><p>1、PB编译器：源码生成器，将PB格式定义文件**.proto(PB数据格式的一种定义文件)转换为对象源码(支持C++，JAVA，Python，Objective-C，Javascript，PHP等格式)，主要使用命令行操作。<br>2、PB基础库：完成序列化与反序列化转换过程的支持</p><ul><li>对 象  **&gt;&gt;&gt;&gt;**二进制（序列化）</li><li>二进制 **&gt;&gt;&gt;&gt;**对 象（反序列化）<br>*（把 <code>对象转换为字节序列</code> 的过程称为 <code>对象的序列化</code>；把 <code>字节序列恢复为对象</code> 的过程称为 <code>对象的反序列化</code>。）</li></ul></blockquote><h2><span id="三-protoc-编辑器环境配置">三、Protoc 编辑器环境配置</span></h2><h2><span id="配置protobuf编译器">配置protobuf编译器</span></h2><p>首先将文件下载下来<a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">https://github.com/google/protobuf/releases</a></p><h3><span id="1-配置protobuf编译器环境">1、 配置protobuf编译器环境</span></h3><p>打开终端执行命令进入到文件的根目录：<br><code>$ cd protobuf-3.3.0</code><br>然后依次执行：<br><code>$ ./configure</code><br><code>$ make</code><br><code>$ make check</code><br><code>$ sudo make install</code><br>检测安装完毕-使用命令：<br><code>$ protoc --version 或者查看帮助$ protoc -h</code><br>如果编译顺利的话，便可以使用protoc命令了，以后便可以用这个命令将.proto文件转换为不同语言的源代码文件了。</p><h3><span id="2-使用pb编译器编译proto文件">2、使用PB编译器编译.proto文件</span></h3><p>安装好PB，使用PB编译器来生成我们需要的数据类型文件。<br>在桌面touch个文件夹名为Class，<br><code>$ cd desktop</code>  -&gt;   <code>$ touch Class</code> -&gt; <code>$ cd Class</code></p><p>在空文件夹Class 创建一个Person.proto文件（名字自定义）<br><code>$ touch Person.proto</code></p><p>创建好后就定义一些数据类型(使用终端或编辑器都可以)<br>按照官方标准语法<a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">https://developers.google.com/protocol-buffers/</a> 编写通用代码<br>文件中写入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line">  string name = <span class="number">1</span>;</span><br><span class="line">  int32 uid = <span class="number">2</span>;</span><br><span class="line">  string email = <span class="number">3</span>;</span><br><span class="line">  enum PhoneType &#123;</span><br><span class="line">    MOBILE = <span class="number">0</span>;</span><br><span class="line">    HOME = <span class="number">1</span>;</span><br><span class="line">    WORK = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  message PhoneNumber &#123;</span><br><span class="line">    string number = <span class="number">1</span>;</span><br><span class="line">    PhoneType type = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   repeated PhoneNumber phone = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存退出，命令行确保在Class文件夹中，执行命令：<br><code>$ protoc *.proto --objc_out=../Class</code></p><p>若没问题，这是文件夹中应该已经生成了model文件。<br>若报错，1、请检查命令；2、检测***.proto文件中的标点符号；</p><h3><span id="3-引入ios工程">3、引入iOS工程</span></h3><h4><span id="lt1gt-一种使用pod方式引入">&lt;1&gt; 一种使用Pod方式引入</span></h4><p>新建工程PBDemo，终端执行：<br><code>$ cd PBDemo</code></p><p>创建 Podfile文件<br><code>$ touch Podfile</code></p><p>编辑 Podfile文件<br><code>$ vim Podfile</code><br>进入文件后点击键盘(英文输入法) <strong>i</strong> 进入  __insert__状态 开始编辑（<strong>注意标点符号</strong>）</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">platform</span> :ios,<span class="string">'8.0'</span></span><br><span class="line">target <span class="string">'PBDemo'</span> <span class="keyword">do</span> </span><br><span class="line">truepod <span class="string">'Protobuf'</span>,<span class="string">'~&gt;3.3.0'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>然后执行保存， 点击<strong>esc</strong> 输入  <strong>:wq</strong>，回车。<br>注意上面的 <code>pod 'Protobuf','~&gt;3.3.0'</code>   否则没有3.3.0版本，以后若有新版本，可先使用 <code>$ pod search Protobuf</code>查询下。<br>使用Pod来导入库<br><code>$ pod install</code><br>完成后退出工程，再次进入就会看到PB依赖库了。以后使用的时候切记如下两点：<br>① 从此以后需要使用Cocoapods生成的 .xcworkspace文件来打开工程，而不是使用以前的.xcodeproj文件。<br>② 每次更改了Podfile文件，都需要重新执行一次pod update命令。</p><p><strong>补充：</strong> 执行 <code>pod install</code> 后，除了Podfile，还会生成一个名为<br><code>Podfile.lock</code> 的文件，它会锁定当前各依赖库的版本，之后即使多次执行pod install也不会更改版本，只有执行pod update才会改变Podfile.lock，这在多人协作的时候，这样也可以防止第三方库升级时候造成大家各自的第三方库版本不一致。所以在提交版本的时候不能把它落下，也不要添加到.gitignore中。（转）</p><p>pod install 完后重新打开 PBDemo**.xcworkspace** 工程，<br>将编译好的PB文件引入工程，如图：<br><img src="http://upload-images.jianshu.io/upload_images/4665802-982be28a0a704017.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着，生成的文件是不支持ARC，需要手动转一下</p><blockquote><p>点击工程—Build Phases —Compile Source 中的Person.pbobjc.m文件添加<code>-fno-objc-arc</code>保存变编译suc。<br>如图：<img src="http://upload-images.jianshu.io/upload_images/4665802-c5991e1ea29c4903.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p></blockquote><p>到此，使用Pod引入ProtocolBuffer就完了，就是一些测试了，如下：</p><blockquote><p>在ViewController中引入 <code>Person.pbobjc.h</code> 头文件<br>加入测试代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 创建对象</span><br><span class="line">Person *person = [Person new];</span><br><span class="line">person.name = @&quot;weiCL&quot;;</span><br><span class="line">person.uid = 20170810;</span><br><span class="line">person.email = @&quot;cl9000@126.com&quot;;</span><br><span class="line"></span><br><span class="line">// 序列化为Data</span><br><span class="line">NSData *data = [person data];</span><br><span class="line">NSLog(@&quot;NSData= %@&quot;, data);</span><br><span class="line"></span><br><span class="line">// 反序列化为对象</span><br><span class="line">Person *person2 = [Person parseFromData:data error:NULL];</span><br><span class="line">NSLog(@&quot;name:%@ uid:%d email:%@&quot;,person2.name,person2.uid,person2.email);</span><br></pre></td></tr></table></figure><p>OK，下一种方式<strong>直接引入</strong>经常会出现的错误，解决方法具体请看下面</p><h3><span id="lt2gt另一种方式直接将相关类文件拖入工程">&lt;2&gt;另一种方式直接将相关类文件拖入工程</span></h3><ol><li><p>新建一个工程PBDemo3，show in Finder 创建文件夹名称为：protocolbuf （此名称可自定义，但后面面要使用其路径）,和创建个Lib文件夹备用</p></li><li><p>打开下载好的protobuf-3.3.0（或最新版本），会有个objectivec的文件夹。拷贝里面所有的文件，放到上面创建的protocolbuf 文件夹中。<br><img src="http://upload-images.jianshu.io/upload_images/4665802-e24ab8787b08fd8d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="http://upload-images.jianshu.io/upload_images/4665802-db5068a4468de667.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p></li><li><p>使用Xcode打开工程，将Lib文件夹引入工程，然后选中Lib文件夹，点击左下角“+”（Add Files to PBDemo3）， 引用protocolBuffer源文件到工程中<br>(源文件里面有两个工程配置文件：ProtocolBuffers_iOS.xcodeproj和ProtocolBuffers_OSX.xcodeproj，引用ProtocolBuffers_iOS.xcodeproj就好)。这里我们只引入库文件，另创建Lib文件只是为了方便管理。<br><img src="http://upload-images.jianshu.io/upload_images/4665802-6ced643bedce50a6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p></li><li><p>选中工程: targets —&gt;  Build Phases  —&gt;  Link Binary With Libraries， 引用源码静态库文件：<strong>libProtocolBuffers.a</strong><br><img src="http://upload-images.jianshu.io/upload_images/4665802-f9104b785f031e3a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p></li><li><p>在工程设置搜索静态库的头文件（pb文件在protocolbuf文件夹里面）:<br>targets —&gt;  Build Setting  —&gt;  Search Paths  —&gt; Header Search Paths, 写入：<code>$(PROJECT)/protocolbuf</code><br><img src="http://upload-images.jianshu.io/upload_images/4665802-29740fc905dab2f0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>完成后 build 一下，<strong>success</strong></p></li></ol><p>6、 将我们上面通过PB编译器生成的数据模型文件Class文件夹（内含Person.proto，Person.pbobjc.h和Person.pbobjc.m）<br>拖入工程，（尽量使用Add File to …引入）<br>因为不支持arc, 所以需要在*.pbobjc.m设置<code>-fno-objc-arc</code>, 然后就可以使用了。具体目录如图：<br><img src="http://upload-images.jianshu.io/upload_images/4665802-c1b322ec484eaa97.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Build一下、<strong>success</strong> 、进行测试、测试代码如上不重复了这里。</p><ul><li>Demo源码 : <a href="https://github.com/cl9000/ProtocolBufferDemo.git" target="_blank" rel="noopener">https://github.com/cl9000/ProtocolBufferDemo.git</a></li></ul><h2><span id="refrence">Refrence</span></h2><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/index.html" target="_blank" rel="noopener">IBM Google Protocol Buffer 的使用和原理</a><br>方式一：使用Pod<br><a href="http://www.jianshu.com/p/8c6c009bc500/" target="_blank" rel="noopener">ProtocolBuffer for Objective-C 运行环境配置及使用</a><br><a href="http://www.cnblogs.com/mcj-coding/p/6228760.html" target="_blank" rel="noopener">ProtocolBuffers-3 For Objective C (1)-简单的使用</a><br>方式二：直接引入<br><a href="http://www.cnblogs.com/tandaxia/p/6181534.html" target="_blank" rel="noopener">iOS之ProtocolBuffer搭建和示例demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在此仅做笔记记录，以便后期查阅，如有问题，及时联系，多谢大家审阅。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;一-protocol-buffer&quot;&gt;一、Protocol Buffer&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;最新版本Pro
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://cl9000.github.io/categories/iOS/"/>
    
      <category term="protocol buffer" scheme="https://cl9000.github.io/categories/iOS/protocol-buffer/"/>
    
    
      <category term="iOS" scheme="https://cl9000.github.io/tags/iOS/"/>
    
      <category term="protocol buffer" scheme="https://cl9000.github.io/tags/protocol-buffer/"/>
    
  </entry>
  
  <entry>
    <title>[BING] 获取BING每日美图</title>
    <link href="https://cl9000.github.io/2017/04/13/BING-%E8%8E%B7%E5%8F%96BING%E6%AF%8F%E6%97%A5%E7%BE%8E%E5%9B%BE/"/>
    <id>https://cl9000.github.io/2017/04/13/BING-%E8%8E%B7%E5%8F%96BING%E6%AF%8F%E6%97%A5%E7%BE%8E%E5%9B%BE/</id>
    <published>2017-04-13T10:24:44.000Z</published>
    <updated>2020-04-13T11:05:52.084Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="bing每日美图">BING每日美图</span></h2><h3><span id="解析api">解析API</span></h3><p><a href="www.bing.com">bing 搜索</a></p><!-- ![](http://www.bing.com/sa/simg/hpc27_2x.png) --><p>F12 查看源码，定位背景地址、解析可以获得首页图的获取API。格式：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.bing.com/HPImageArchive.aspx?<span class="meta">format</span>=js<span class="variable">&amp;idx</span>=0<span class="variable">&amp;n</span>=1</span><br></pre></td></tr></table></figure><p>注意，这里有几个GET参数，它们的作用分别是：</p><ul><li>n，必要参数。这是输出信息的数量。比如n=1，即为1条，以此类推，至多输出8条。</li><li>format，非必要。返回结果的格式，不存在或者等于xml时，输出为xml格式，等于js时，输出json格式</li><li>idx，非必要。不存在或者等于0时，输出当天的图片，-1为已经预备用于明天显示的信息，1则为昨天的图片，以此类推，idx最多获取到前16天的图片信息<br>这里将n设定为1、format设定为js、idx设定为1，去发出GET请求，返回的数据：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"images"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"startdate"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"fullstartdate"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"enddate"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"urlbase"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"copyright"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"copyrightlink"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"quiz"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"wp"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"hsh"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"drk"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"top"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"bot"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"hs"</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"tooltips"</span>: &#123;</span><br><span class="line">    <span class="attr">"loading"</span>: <span class="string">"正在加载..."</span>,</span><br><span class="line">    <span class="attr">"previous"</span>: <span class="string">"上一个图像"</span>,</span><br><span class="line">    <span class="attr">"next"</span>: <span class="string">"下一个图像"</span>,</span><br><span class="line">    <span class="attr">"walle"</span>: <span class="string">"此图片不能下载用作壁纸。"</span>,</span><br><span class="line">    <span class="attr">"walls"</span>: <span class="string">"下载今日美图。仅限用作桌面壁纸。"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的 “images” 节点下的 “url” 值便是我们要获取的图像地址。<br>把它取出来，再加上Bing的网址前缀(<a href="http://cn.bing.com" target="_blank" rel="noopener">http://cn.bing.com</a>)即组合成了完整的图像地址。可直接浏览器查看。</p><h3><span id="用php去动态抓取">用PHP去动态抓取</span></h3><p>获取BING每日背景图，构建API、每日抓取下载、部署私人服务器并存储，代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// ini_set(<span class="string">'date.timezone'</span>,<span class="string">'Asia/Shanghai'</span>);  <span class="regexp">//</span>设置时区，确定为中国上海时区</span><br><span class="line"> </span><br><span class="line">// 方案一</span><br><span class="line">$path0 = <span class="string">'BingWallpaper'</span>; <span class="regexp">//</span> 定义存放图片的一级目录，这个目录是固定的，需要手动创建并设置写入权</span><br><span class="line">$path = $path0 .<span class="string">'/'</span>. date(<span class="string">"Ym"</span>); <span class="regexp">//</span> 图片缓存文件夹，以当前年月命名并自动新建文件夹</span><br><span class="line">$filename = date(<span class="string">"Ymd"</span>) .<span class="string">'.jpg'</span>;  <span class="regexp">//</span> 用年月日来命名新的文件名</span><br><span class="line"><span class="keyword">if</span> (!file_exists($path .<span class="string">'/'</span>. $filename)) &#123; <span class="regexp">//</span> 如果文件不存在，则说明今天还没有进行缓存</span><br><span class="line">    <span class="keyword">if</span>(!file_exists($path)) &#123; <span class="regexp">//</span> 如果目录不存在</span><br><span class="line">        <span class="keyword">mkdir</span>($path, <span class="number">0777</span>); <span class="regexp">//</span> 创建缓存目录</span><br><span class="line">    &#125;</span><br><span class="line">    $str = file_get_contents(<span class="string">'http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1'</span>); <span class="regexp">//</span> 读取必应api，获得相应数据</span><br><span class="line">    $str = json_decode($str, true);</span><br><span class="line">    $imgurl = <span class="string">'http://cn.bing.com'</span>. $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'url'</span>];    <span class="regexp">//</span> 获取图片url</span><br><span class="line">    $img = grabImage($imgurl, $path .<span class="string">'/'</span>. $filename); <span class="regexp">//</span> 读取并保存图片</span><br><span class="line">&#125;</span><br><span class="line">function grabImage($url, $filename = <span class="string">""</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>($url == <span class="string">""</span>) <span class="keyword">return</span> false; <span class="regexp">//</span> 如果$url地址为空，直接退出</span><br><span class="line">    <span class="keyword">if</span> ($filename == <span class="string">""</span>) &#123; <span class="regexp">//</span> 如果没有指定新的文件名</span><br><span class="line">        $ext = strrchr($url, <span class="string">"."</span>);  <span class="regexp">//</span> 得到$url的图片格式</span><br><span class="line">        $filename = date(<span class="string">"Ymd"</span>) . $ext;  <span class="regexp">//</span> 用天月面时分秒来命名新的文件名</span><br><span class="line">    &#125;</span><br><span class="line">    ob_start();         <span class="regexp">//</span> 打开输出</span><br><span class="line">    readfile($url);     <span class="regexp">//</span> 输出图片文件</span><br><span class="line">    $img = ob_get_contents();   <span class="regexp">//</span> 得到浏览器输出</span><br><span class="line">    ob_end_clean();             <span class="regexp">//</span> 清除输出并关闭</span><br><span class="line">    $size = strlen($img);       <span class="regexp">//</span> 得到图片大小</span><br><span class="line">    $fp2 = @fopen($filename, <span class="string">"a"</span>);</span><br><span class="line">    fwrite($fp2, $img);         <span class="regexp">//</span> 向当前目录写入图片文件，并重新命名</span><br><span class="line">    fclose($fp2);</span><br><span class="line">    <span class="keyword">return</span> $filename;           <span class="regexp">//</span> 返回新的文件名</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="regexp">//</span> 方案二</span><br><span class="line">// $path=<span class="string">'BingWallpaper'</span>;   <span class="regexp">//</span> 定义存放图片的一级目录，这个目录是固定的，需要手动创建并设置写入权</span><br><span class="line">// $path1=$path.<span class="string">'/'</span>.date(<span class="string">'Ym'</span>);  <span class="regexp">//</span> 定义存放图片的二级目录，以当前所处年份来命名</span><br><span class="line">// <span class="keyword">if</span>(!file_exists($path1)) &#123;</span><br><span class="line">//     <span class="keyword">mkdir</span>($path1, <span class="number">0777</span>);</span><br><span class="line">// &#125;  // 判断二级目录是否存在，若不存在，则自动创建并设置写入权</span><br><span class="line">// <span class="regexp">//</span> $path2=$path1.<span class="string">'/'</span>.date(<span class="string">'m'</span>);  <span class="regexp">//</span> 定义存放图片的三级目录，以当前所处月份来命名</span><br><span class="line">// <span class="regexp">//</span> <span class="keyword">if</span>(!file_exists($path2))&#123;</span><br><span class="line">// <span class="regexp">//</span>     <span class="keyword">mkdir</span>($path2, <span class="number">0777</span>);</span><br><span class="line">// <span class="regexp">//</span> &#125;   // 判断三级目录是否存在，若不存在，则自动创建并设置写入权</span><br><span class="line">// <span class="regexp">//</span> $pathurl=$path2.<span class="string">'/'</span>.date(<span class="string">'Ymd'</span>).<span class="string">'.jpg'</span>;   <span class="regexp">//</span> 定义图片名，以当前所处日份来命名</span><br><span class="line">// $pathurl=$path1.<span class="string">'/'</span>.date(<span class="string">'Ymd'</span>).<span class="string">'.jpg'</span>;   <span class="regexp">//</span> 定义图片名，以当前所处日份来命名</span><br><span class="line">// <span class="keyword">if</span>(!is_file($pathurl)) &#123;</span><br><span class="line">//     $str=file_get_contents(<span class="string">'http://cn.bing.com/HPImageArchive.aspx?idx=0&amp;n=1'</span>);   <span class="regexp">//</span> 获取图片地址，并判断图片是否已经存在</span><br><span class="line">//     <span class="keyword">if</span>(preg_match(<span class="string">"/&lt;urlBase&gt;(.+?)&lt;\/urlBase&gt;/isu"</span>, $str, $matches)) &#123; <span class="regexp">//</span> ies</span><br><span class="line">//         $imgurl=<span class="string">'http://cn.bing.com'</span>.$matches[<span class="number">1</span>].<span class="string">'_1920x1080.jpg'</span>;</span><br><span class="line">//         copy($imgurl, $pathurl);</span><br><span class="line">//     &#125;  //读取对应的图片并写入指定目录</span><br><span class="line">// &#125;</span><br><span class="line">// <span class="regexp">//</span> 显示图片</span><br><span class="line">// <span class="regexp">//</span> header(<span class="string">'Content-Type:image/jpeg'</span>);  <span class="regexp">//</span>定义输出类型</span><br><span class="line">// <span class="regexp">//</span> @ob_end_clean();   <span class="regexp">//</span>擦除缓存</span><br><span class="line">// <span class="regexp">//</span> @readfile($pathurl);  <span class="regexp">//</span>输出本地图片</span><br><span class="line">// <span class="regexp">//</span> @flush();   <span class="regexp">//</span>缓存</span><br><span class="line">// <span class="regexp">//</span> @ob_flush();   <span class="regexp">//</span>输出缓存 </span><br><span class="line">// <span class="regexp">//</span> <span class="keyword">exit</span>();  <span class="regexp">//</span>退出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 方案三： + 写入图片信息 参考 https:<span class="regexp">//mkblog</span>.cn/<span class="number">492</span>/</span><br><span class="line">// $path = <span class="string">'temp'</span>;   <span class="regexp">//</span>设置图片缓存文件夹</span><br><span class="line">// $filename = date(<span class="string">"Ymd"</span>) . <span class="string">'.jpg'</span>;  <span class="regexp">//</span>用年月日来命名新的文件名</span><br><span class="line">// <span class="keyword">if</span> (!file_exists($path.<span class="string">'/'</span>. $filename)) &#123; <span class="regexp">//</span>如果文件不存在，则说明今天还没有进行缓存 </span><br><span class="line">//     <span class="keyword">if</span>(!file_exists($path)) //如果目录不存在</span><br><span class="line">//     &#123;</span><br><span class="line">//         <span class="keyword">mkdir</span>($path, <span class="number">0777</span>); <span class="regexp">//</span>创建缓存目录</span><br><span class="line">//     &#125;</span><br><span class="line">//     $str = file_get_contents(<span class="string">'http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1'</span>); <span class="regexp">//</span>读取必应api，获得相应数据</span><br><span class="line">//     $str = json_decode($str,true);</span><br><span class="line">//     $imgurl = <span class="string">'http://cn.bing.com'</span>.$str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'url'</span>];    <span class="regexp">//</span>获取图片url</span><br><span class="line">//     $img = grabImage($imgurl, $path.<span class="string">'/'</span>.$filename); <span class="regexp">//</span>读取并保存图片</span><br><span class="line">//     $handle = fopen(<span class="string">"dat.txt"</span>, <span class="string">"a"</span>);    <span class="regexp">//</span>用于存放图片信息，如果不需要保存图片的相关信息，可以把下面这些去掉。</span><br><span class="line">//     <span class="keyword">if</span> ($handle) &#123;</span><br><span class="line">//         $copyright = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'copyright'</span>];    <span class="regexp">//</span>说明</span><br><span class="line">//         $startdate = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'startdate'</span>];</span><br><span class="line">//         $fullstartdate = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'fullstartdate'</span>];</span><br><span class="line">//         $enddate = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'enddate'</span>];</span><br><span class="line">//         $urlbase = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'urlbase'</span>];</span><br><span class="line">//         $copyrightlink = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'copyrightlink'</span>];</span><br><span class="line">//         $quiz = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'quiz'</span>];</span><br><span class="line">//         $wp = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'wp'</span>];</span><br><span class="line">//         $hsh = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'hsh'</span>];</span><br><span class="line">//         $drk = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'drk'</span>];</span><br><span class="line">//         $top = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'top'</span>];</span><br><span class="line">//         $bot = $str[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'bot'</span>];</span><br><span class="line">//         $tempArr = array(<span class="string">"imgurl"</span>=&gt;$imgurl,<span class="string">"copyright"</span>=&gt;$copyright, <span class="string">"startdate"</span>=&gt;$startdate,</span><br><span class="line">//         <span class="string">"fullstartdate"</span>=&gt;$fullstartdate, <span class="string">"enddate"</span>=&gt; $enddate, <span class="string">"urlbase"</span>=&gt;$urlbase,</span><br><span class="line">//         <span class="string">"copyrightlink"</span>=&gt; $copyrightlink, <span class="string">"quiz"</span>=&gt;$quiz, <span class="string">"wp"</span>=&gt; $wp,</span><br><span class="line">//         <span class="string">"hsh"</span>=&gt;$hsh,<span class="string">"drk"</span>=&gt;$drk, <span class="string">"top"</span>=&gt; $top, <span class="string">"bot"</span>=&gt; $bot);   <span class="regexp">//</span>将相关信息放进数组中</span><br><span class="line">//         fwrite($handle, json_encode($tempArr) .<span class="string">"\r\n"</span>); <span class="regexp">//</span>最终以json格式保存在文本文档中</span><br><span class="line">//         fclose($handle);</span><br><span class="line">//     &#125;</span><br><span class="line">// &#125;</span><br><span class="line">// function grabImage($url, $filename = <span class="string">""</span>) &#123;</span><br><span class="line">//     <span class="keyword">if</span>($url == <span class="string">""</span>) <span class="keyword">return</span> false; <span class="regexp">//</span>如果$url地址为空，直接退出</span><br><span class="line">//     <span class="keyword">if</span> ($filename == <span class="string">""</span>) &#123; <span class="regexp">//</span>如果没有指定新的文件名</span><br><span class="line">//         $ext = strrchr($url, <span class="string">"."</span>);  <span class="regexp">//</span>得到$url的图片格式</span><br><span class="line">//         $filename = date(<span class="string">"Ymd"</span>) . $ext;  <span class="regexp">//</span>用天月面时分秒来命名新的文件名</span><br><span class="line">//     &#125;</span><br><span class="line">//     ob_start();         <span class="regexp">//</span>打开输出</span><br><span class="line">//     readfile($url);     <span class="regexp">//</span>输出图片文件</span><br><span class="line">//     $img = ob_get_contents();   <span class="regexp">//</span>得到浏览器输出</span><br><span class="line">//     ob_end_clean();             <span class="regexp">//</span>清除输出并关闭</span><br><span class="line">//     $size = strlen($img);       <span class="regexp">//</span>得到图片大小</span><br><span class="line">//     $fp2 = @fopen($filename, <span class="string">"a"</span>);</span><br><span class="line">//     fwrite($fp2, $img);         <span class="regexp">//</span>向当前目录写入图片文件，并重新命名</span><br><span class="line">//     fclose($fp2);</span><br><span class="line">//     <span class="keyword">return</span> $filename;           <span class="regexp">//</span>返回新的文件名</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ******************************************************************************************</span><br><span class="line">// <span class="regexp">//</span> 仅使用其作为背景图API，新建PHP文件</span><br><span class="line">// <span class="regexp">//</span> Bing壁纸API - <span class="number">1</span></span><br><span class="line">// $str=file_get_contents(<span class="string">'http://cn.bing.com/HPImageArchive.aspx?idx=0&amp;n=1'</span>);</span><br><span class="line">// <span class="keyword">if</span>(preg_match(<span class="string">"/(.+?)&lt;\/url&gt;/ies"</span>,$str,$matches))&#123;</span><br><span class="line">// $imgurl=<span class="string">'http://cn.bing.com'</span>.$matches[<span class="number">1</span>];</span><br><span class="line">// &#125;</span><br><span class="line">// <span class="keyword">if</span>($imgurl)&#123;</span><br><span class="line">// header(<span class="string">'Content-Type: image/JPEG'</span>);</span><br><span class="line">// @ob_end_clean();</span><br><span class="line">// @readfile($imgurl);</span><br><span class="line">// @flush(); @ob_flush();</span><br><span class="line">// <span class="keyword">exit</span>();</span><br><span class="line">// &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">// <span class="keyword">exit</span>(<span class="string">'error'</span>);</span><br><span class="line">// &#125;</span><br><span class="line">// <span class="regexp">//</span> Warning: preg_match(): The /e modifier is <span class="keyword">no</span> longer supported, <span class="keyword">use</span> preg_replace_callback instead in /Library/WebServer/Documents/phpMyProjects/php-test/index4.php on line <span class="number">4</span></span><br><span class="line">// <span class="regexp">//</span> error</span><br><span class="line"></span><br><span class="line">// <span class="regexp">//</span> Bing壁纸API - <span class="number">2</span></span><br><span class="line">// $str = file_get_contents(<span class="string">'http://cn.bing.com/HPImageArchive.aspx?idx=0&amp;n=1'</span>);   <span class="regexp">//</span> 从bing获取数据</span><br><span class="line">// <span class="keyword">if</span>(preg_match(<span class="string">'/&lt;url&gt;([^&lt;]+)&lt;\/url&gt;/isU'</span>, $str, $matches)) &#123; <span class="regexp">//</span> 正则匹配抓取图片url</span><br><span class="line">//     $imgurl = <span class="string">'http://cn.bing.com'</span>.$matches[<span class="number">1</span>];</span><br><span class="line">// &#125; <span class="keyword">else</span> &#123;  <span class="regexp">//</span> 如果由于某些原因，没抓取到图片地址</span><br><span class="line">//     $imgurl = <span class="string">'http://img.infinitynewtab.com/InfinityWallpaper/2_14.jpg'</span>; <span class="regexp">//</span> 使用默认的图像(默认图像链接可修改为自己的)</span><br><span class="line">// &#125;</span><br><span class="line">// echo <span class="string">"$imgurl"</span>;</span><br><span class="line">// echo <span class="string">"&lt;img src='$imgurl' /&gt;"</span>;</span><br><span class="line">// header(<span class="string">"Location:&#123;$imgurl&#125;"</span>); <span class="regexp">//</span> 跳转至目标图像</span><br></pre></td></tr></table></figure><h3><span id="文件管理">文件管理</span></h3><p><a href="https://github.com/DirectoryLister/DirectoryLister" target="_blank" rel="noopener">DirectoryLister</a></p><h2><span id="参考链接">参考链接</span></h2><p><a href="https://mkblog.cn/492/" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;bing每日美图&quot;&gt;BING每日美图&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&quot;解析api&quot;&gt;解析API&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;www.bing.com&quot;&gt;bing 搜索&lt;/a&gt;&lt;/p&gt;
&lt;!-- ![](http:
      
    
    </summary>
    
    
    
      <category term="BING" scheme="https://cl9000.github.io/tags/BING/"/>
    
      <category term="bing 图" scheme="https://cl9000.github.io/tags/bing-%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Mac 定时任务 launchctl</title>
    <link href="https://cl9000.github.io/2017/04/09/Mac-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-launchctl/"/>
    <id>https://cl9000.github.io/2017/04/09/Mac-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-launchctl/</id>
    <published>2017-04-09T11:04:12.000Z</published>
    <updated>2020-04-13T09:48:58.266Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="mac-定时任务-launchctl">Mac 定时任务 launchctl</span></h2><h3><span id="launchctl">launchctl</span></h3><p>launchctl: 是一个统一的服务管理框架，可以启动、停止和管理守护进程、应用程序、进程和脚本等。<br>launchctl是通过配置文件来指定执行周期和任务的。</p><h3><span id="配置文件plist文件">配置文件（plist文件）</span></h3><p>launchctl 将根据plist文件的信息来启动任务。</p><h5><span id="plist文件位置">plist文件位置：</span></h5><ul><li>~/Library/LaunchAgents 由用户自己定义的任务项（推荐）</li><li>/Library/LaunchAgents 由管理员为用户定义的任务项</li><li>/Library/LaunchDaemons 由管理员定义的守护进程任务项</li><li>/System/Library/LaunchAgents 由Mac OS X为用户定义的任务项</li><li>/System/Library/LaunchDaemons 由Mac OS X定义的守护进程任务项</li></ul><h5><span id="plist部分参数说明">plist部分参数说明：</span></h5><ul><li>Label：全局唯一性；</li><li>ProgramArguments：指定要运行的脚本</li><li>StartCalendarInterval：可以指定脚本在多少分钟、小时、天、星期几、月时间上执行</li><li>StartInterval：指定脚本每间隔多长时间（单位：秒）执行一次；</li><li>StandardInPath、StandardOutPath、StandardErrorPath：标准的输入、输出、错误文件。</li></ul><h3><span id="相关命令">相关命令</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加载任务, -w选项会将plist文件中无效的key覆盖掉，建议加上</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> launchctl load -w com.test.plist</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除任务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> launchctl unload -w com.test.plist</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看任务列表, 使用 grep <span class="string">'任务部分名字'</span> 过滤</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> launchctl list | grep <span class="string">'test.demo'</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始任务 - 立即执行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> launchctl start com.test.plist</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结束任务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> launchctl stop com.test.plist</span></span><br></pre></td></tr></table></figure><h3><span id="使用">使用</span></h3><ol><li><p>新建</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">demo</span></span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">com</span><span class="selector-class">.test</span><span class="selector-class">.plist</span></span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">testshell</span><span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure></li><li><p>内容：<br>com.test.plist</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="meta-string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Label唯一的标识 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 要运行的程序， 如果省略这个选项，会把ProgramArguments的第一个</span></span><br><span class="line"><span class="comment">    元素作为要运行的程序 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Program<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/weichanglu/Desktop/demo/testShell.sh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定要运行的脚本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/weichanglu/Desktop/demo/testShell.sh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定运行的时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>30<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>9<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Day<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Month<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>5<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 0和7都指星期天 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Weekday<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>0<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 运行间隔，与StartCalenderInterval使用其一，单位为秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">integer</span>&gt;</span>3<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 标准输入文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardInPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/uniflor/runin.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 标准输出文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardOutPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/weichanglu/Desktop/demo/success.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 标准错误输出文件，错误日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/weichanglu/Desktop/demo/error.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="http://testshell.sh" target="_blank" rel="noopener">testshell.sh</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> <span class="comment">#记录时间 - 自定义脚本或Python脚本</span></span><br><span class="line"><span class="built_in">echo</span> `date` &gt;&gt; ~/Desktop/demo/success.log</span><br><span class="line">time=$(date <span class="string">"+%Y-%m-%d %H：%M：%S"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$time</span>"</span> &gt;&gt; ~/Desktop/demo/time.txt</span><br></pre></td></tr></table></figure><ol start="3"><li><p>将 plist 文件复制到 <code>~/Library/LaunchAgents</code> 目录下，需要权限。</p></li><li><p>终端执行 <code>$ cd ~/Library/LaunchAgents</code>，目录下，执行启动服务命令，参考上面命令。</p></li><li><p>查看输出文件。</p></li></ol><h3><span id="路径基础概念">路径基础概念</span></h3><h6><span id="systemlibrary和library和~library目录的区别">/System/Library和/Library和~/Library目录的区别？</span></h6><blockquote><p>/System/Library目录是存放Apple自己开发的软件。<br>/Library目录是系统管理员存放的第三方软件。<br>~/Library/是用户自己存放的第三方软件。</p></blockquote><h6><span id="launchdaemons和launchagents的区别">LaunchDaemons和LaunchAgents的区别？</span></h6><blockquote><p>LaunchDaemons是用户未登陆前就启动的服务（守护进程）。<br>LaunchAgents是用户登陆后启动的服务（守护进程）。</p></blockquote><h3><span id="补充">补充</span></h3><ol><li>运行异常：<code>... operation not permitted ...</code><br>解决方案：暂时关闭Mac rootless机制</li><li>权限问题<br>注意，脚本要改成可执行的权限：<br><code>chmod 777 *.sh</code></li></ol><h3><span id="launchctl的gui工具">launchctl的GUI工具</span></h3><p><a href="https://www.soma-zone.com/LaunchControl/" target="_blank" rel="noopener">LaunchControl</a>，用这个工具可以查看到所有的launchctl定时任务。并用GUI的方式进行修改执行等。</p><h3><span id="参考">参考</span></h3><p><a href="http://codingpub.github.io/2016/10/27/OS-X-%E6%B7%BB%E5%8A%A0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">OS X 添加定时任务</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;mac-定时任务-launchctl&quot;&gt;Mac 定时任务 launchctl&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&quot;launchctl&quot;&gt;launchctl&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;launchctl: 是一个统一的服务管理框架，可
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://cl9000.github.io/categories/Mac/"/>
    
    
      <category term="Mac" scheme="https://cl9000.github.io/tags/Mac/"/>
    
      <category term="定时任务" scheme="https://cl9000.github.io/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
      <category term="launchctl" scheme="https://cl9000.github.io/tags/launchctl/"/>
    
  </entry>
  
  <entry>
    <title>Mac rootless机制</title>
    <link href="https://cl9000.github.io/2017/04/03/Mac-rootless%E6%9C%BA%E5%88%B6/"/>
    <id>https://cl9000.github.io/2017/04/03/Mac-rootless%E6%9C%BA%E5%88%B6/</id>
    <published>2017-04-03T10:08:22.000Z</published>
    <updated>2020-04-09T11:11:23.949Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="mac-rootless机制-operation-not-permitted">Mac rootless机制 <code>Operation not permitted</code></span></h2><p>Mac使用 <code>sudo</code> 或切换成 <code>root</code> 权限，还是出现<br><code>Operation not permitted</code></p><p>这是由于 Max OS X El 的<code>rootless</code>机制，即sudo也不能操作部分文件目录， 所以如果需要执行，需要先关闭rootless功能。可以进入恢复模式关闭<code>rootless</code>机制：</p><p>1、重启Mac，按 <code>command+R</code> 进入恢复模式</p><p>2、选择终端，在左上角，输入指令：</p><p><code>$ csrutil disable</code></p><p>3、重启后让机器正常启动，可以在终端查看<code>rootless</code>状态：<br><code>$ csrutil status</code></p><p>正常情况下rootless已经关闭。</p><p>4、要想重新开启<code>rootless</code>机制，参照步骤1，输入指令：<br><code>$ csrutil enable</code></p><p>另外一种方式更简洁， 但是我没有验证过， 自己可以动手试一下：</p><p>不需要进入恢复模式， 在teminal中输入</p><p>sudo nvram boot-args=”kext-dev-mode=1 rootless=0″;sudo reboot</p><p>输入密码后重启。</p><p>打开rootless</p><p>sudo nvram boot-args=”rootless=1″ 重启</p><p>查看rootless<br>nvram boot-args</p><p>查看那些目录有rootless限制</p><p>cd /</p><p>ls -lO|grep restricted</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;mac-rootless机制-operation-not-permitted&quot;&gt;Mac rootless机制 &lt;code&gt;Operation not permitted&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Mac使用 &lt;code&gt;sudo&lt;/c
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://cl9000.github.io/categories/Mac/"/>
    
    
      <category term="Mac" scheme="https://cl9000.github.io/tags/Mac/"/>
    
      <category term="rootless" scheme="https://cl9000.github.io/tags/rootless/"/>
    
  </entry>
  
  <entry>
    <title>fullpage.js 使用</title>
    <link href="https://cl9000.github.io/2017/04/01/fullpage-js/"/>
    <id>https://cl9000.github.io/2017/04/01/fullpage-js/</id>
    <published>2017-04-01T10:19:35.000Z</published>
    <updated>2020-04-10T10:49:36.261Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="fullpagejs">fullpage.js</span></h2><h3><span id="链接">链接</span></h3><ul><li><a href="https://github.com/alvarotrigo/fullPage.js" target="_blank" rel="noopener">fullPage.js 官方</a></li><li><a href="https://alvarotrigo.com/fullPage/" target="_blank" rel="noopener">fullPage.js 页面</a></li></ul><h3><span id="在使用">在使用</span></h3><ul><li><a href="http://i.360.cn/security/accountguard?sb_param=213339c16e226d74ff0ec3b949fd52d6" target="_blank" rel="noopener">360</a></li><li><a href="http://themify.me/demo/#theme=fullpane" target="_blank" rel="noopener">http://themify.me/demo/#theme=fullpane</a></li><li><a href="http://www.kesstrio.com/#galleryPage" target="_blank" rel="noopener">http://www.kesstrio.com/#galleryPage</a></li><li><a href="http://boxx.hk/tc/" target="_blank" rel="noopener">http://boxx.hk/tc/</a></li><li><a href="http://www.camanihome.com/#contacts" target="_blank" rel="noopener">http://www.camanihome.com/#contacts</a></li><li><a href="https://lingualeo.com/pt" target="_blank" rel="noopener">https://lingualeo.com/pt</a></li><li><a href="https://github.com/cl9000/fullPage.js#who-is-using-fullpagejs" target="_blank" rel="noopener">更多 …</a></li></ul><h3><span id="使用-具体参考官方文档">使用 - 具体参考官方文档</span></h3><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>fullpage-js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"fullpage.css"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background: #fc6c7c;text-align: center;"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- fullpage --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fullpage"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- active 设置默认起始页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span>Some section<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section active"</span>&gt;</span>Some section<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span> <span class="attr">data-anchor</span>=<span class="string">"slide1"</span>&gt;</span> slide 1 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span> <span class="attr">data-anchor</span>=<span class="string">"slide2"</span>&gt;</span> slide 2 <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"static/bg.jpg"</span> <span class="attr">style</span>=<span class="string">"width: 80%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span> <span class="attr">data-anchor</span>=<span class="string">"slide3"</span>&gt;</span> slide 3</span><br><span class="line">        <span class="comment">&lt;!-- &lt;audio controls data-autoplay data-keepplaying&gt;</span></span><br><span class="line"><span class="comment">          &lt;source src="http://metakoncept.hr/horse.ogg" type="audio/ogg"&gt;</span></span><br><span class="line"><span class="comment">        &lt;/audio&gt;</span></span><br><span class="line"><span class="comment">        &lt;video controls&gt; --&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &lt;source data-src="video.webm" type="video/webm" /&gt; --&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &lt;source data-src="static/20190324.mp4" type="video/mp4" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/video&gt;  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span> <span class="attr">data-anchor</span>=<span class="string">"slide4"</span>&gt;</span> slide 4 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span>整个视图<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section fp-auto-height"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>fp-auto-height 自动高度<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section fp-auto-height-responsive"</span>&gt;</span>fp-auto-height-responsive 全屏，直到响应模式终止。 根据定义调整大小，可能是大于或小于视口<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 以下行是可选的。 只有在使用选项 css3:false ，并且您希望使用其他缓动效果，而非 linear、swing 或 easeInOutCubic 时才有必要。 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;script src="vendors/easings.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 以下行仅在使用选项 scrollOverflow:true 的情况下是必需的 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;script type="text/javascript" src="vendors/scrolloverflow.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"fullpage.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- fullpage.js 初始化 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> myFullpage = <span class="keyword">new</span> fullpage(<span class="string">'#fullpage'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      anchors:[<span class="string">'firstPage'</span>, <span class="string">'secondPage'</span>, <span class="string">'thirdPage'</span>,<span class="string">'fourthPage'</span>, <span class="string">'fifthPage'</span>],</span></span><br><span class="line"><span class="actionscript">      sectionsColor: [<span class="string">'#fc6c7c'</span>, <span class="string">'#4BBFC3'</span>, <span class="string">'#7BAABE'</span>, <span class="string">'#898989'</span>, <span class="string">'green'</span>]</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 代码块 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shell"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shell-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"shell-header-actions shell-header-close"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"shell-header-actions shell-header-minimize"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"shell-header-actions shell-header-maximize"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"shell-tabs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#html"</span> <span class="attr">class</span>=<span class="string">"shell-tab active"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#js"</span> <span class="attr">class</span>=<span class="string">"shell-tab"</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://codepen.io/alvarotrigo/pen/qqabrp"</span> <span class="attr">class</span>=<span class="string">"shell-demo"</span>&gt;</span>See in Codepen<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shell-body"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shell-tab-content active"</span> <span class="attr">data-tab</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">"highlight"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">truetruetrue<span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"language-html"</span> <span class="attr">data-lang</span>=<span class="string">"html"</span>&gt;</span>222<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">truetrue  <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shell-tab-content"</span> <span class="attr">data-tab</span>=<span class="string">"js"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">"highlight"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">truetruetrue<span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"language-javascript"</span> <span class="attr">data-lang</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line">truetruetruetrue<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: #e5e4e4;"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">truetruetrue<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">truetrue  <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 代码块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// Jquery获取第一个子元素</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// ($(".shell-tabs").children(":first")).on('click', function () &#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//   alert(222)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// Jquery获取第几个子元素</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">".shell-tabs a"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> index = $(<span class="string">".shell-tabs a"</span>).index(<span class="keyword">this</span>);</span></span><br><span class="line">    if(0 == index) &#123;</span><br><span class="line"><span class="javascript">      $(<span class="string">".shell-tabs"</span>).children(<span class="string">'a'</span>).eq(<span class="number">0</span>).addClass(<span class="string">"active"</span>);</span></span><br><span class="line"><span class="javascript">      $(<span class="string">".shell-tabs"</span>).children(<span class="string">'a'</span>).eq(<span class="number">1</span>).removeClass(<span class="string">"active"</span>);</span></span><br><span class="line"><span class="javascript">      $(<span class="string">".shell-body"</span>).children(<span class="string">"div"</span>).eq(<span class="number">0</span>).addClass(<span class="string">"active"</span>);</span></span><br><span class="line"><span class="javascript">      $(<span class="string">".shell-body"</span>).children(<span class="string">"div"</span>).eq(<span class="number">1</span>).removeClass(<span class="string">"active"</span>);</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">".shell-tabs"</span>).children(<span class="string">'a'</span>).eq(<span class="number">0</span>).removeClass(<span class="string">"active"</span>);</span></span><br><span class="line"><span class="javascript">      $(<span class="string">".shell-tabs"</span>).children(<span class="string">'a'</span>).eq(<span class="number">1</span>).addClass(<span class="string">"active"</span>);</span></span><br><span class="line"><span class="javascript">      $(<span class="string">".shell-body"</span>).children(<span class="string">"div"</span>).eq(<span class="number">0</span>).removeClass(<span class="string">"active"</span>);</span></span><br><span class="line"><span class="javascript">      $(<span class="string">".shell-body"</span>).children(<span class="string">"div"</span>).eq(<span class="number">1</span>).addClass(<span class="string">"active"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 代码块 */</span></span><br><span class="line"><span class="selector-class">.shell</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">54px</span>);</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#173549</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">54px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1030px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.shell</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">60%</span> - <span class="number">54px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">900px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.shell</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#e5e4e4</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">7px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-header-actions</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;</span><br><span class="line">  <span class="comment">/* box-shadow: 0px 0px 10px 1px; */</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-demo</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#173549</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-demo</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-header-close</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-header-minimize</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-header-maximize</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-tab</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-tab</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#173549</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-tab</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-tab</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-tab-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-tab-content</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shell-body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2.18em</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">  <span class="attribute">overflow-x</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 代码块 */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;fullpagejs&quot;&gt;fullpage.js&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&quot;链接&quot;&gt;链接&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alvarotrigo/fullPage
      
    
    </summary>
    
    
      <category term="JS" scheme="https://cl9000.github.io/categories/JS/"/>
    
    
      <category term="fullpage.js" scheme="https://cl9000.github.io/tags/fullpage-js/"/>
    
  </entry>
  
</feed>
