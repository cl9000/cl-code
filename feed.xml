<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Weichanglu</title>
  <icon>https://www.gravatar.com/avatar/749a0cb196d7f8d7b7f41d5a5fa372e4</icon>
  <subtitle>你知道的越多，你不知道的越多</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cl9000.github.io/"/>
  <updated>2021-04-16T05:51:04.993Z</updated>
  <id>https://cl9000.github.io/</id>
  
  <author>
    <name>cl9000</name>
    <email>cl9000@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>可选链【?.】JavaScript中的运算符</title>
    <link href="https://cl9000.github.io/2021/01/28/JavaScript%E5%8F%AF%E9%80%89%E9%93%BE%E3%80%90-%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://cl9000.github.io/2021/01/28/JavaScript%E5%8F%AF%E9%80%89%E9%93%BE%E3%80%90-%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-01-28T09:12:40.000Z</published>
    <updated>2021-04-16T05:51:04.993Z</updated>
    
    <content type="html"><![CDATA[<p>人生不是一种享乐，而是一桩十分沉重的工作。 —-&lt;列夫·托尔斯泰&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/</a></p></blockquote><p>可选的链?.运算符用于通过隐式空检查访问嵌套的对象属性。</p><h2><span id="概述">概述</span></h2><p>如何使用无效<code>（null和undefined）</code>检查访问对象的嵌套属性？假设我们必须通过网络api的响应访问用户详细信息？</p><p>您可以<code>? ... :</code>像这样使用嵌套的三元运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response ? (response.data ? (response.data.user ? response.data.user.name : <span class="literal">null</span>) : <span class="literal">null</span>) : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>或者您可以在<code>if</code>这种情况下进行空值检查：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(response &amp;&amp; response.data &amp;&amp; response.data.user)&#123;</span><br><span class="line">  userName = response.data.user.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至更好的方法可以使其&amp;&amp;像这样的单衬板链条状态：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response &amp;&amp; response.data &amp;&amp; response.data.user &amp;&amp; response.data.user.name;</span><br></pre></td></tr></table></figure><p>上面的代码的共同点是，链接有时可能真的很长，并且变得更加难以格式化和读取。这是可选的链接?.运算符提供帮助的地方，该运算符提供了隐式的无效检查，并使我们的代码更小，更好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response?.data?.user?.name;</span><br></pre></td></tr></table></figure><h2><span id="句法">句法</span></h2><p>可选的链<code>?.</code>运算符在<code>Javascript ES2020</code>中引入，其语法如下：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.val?.prop       returns obj.val.prop <span class="keyword">if</span> val exists, otherwise <span class="literal">undefined</span>.</span><br><span class="line">obj.func?.(args)    returns obj.func(args) <span class="keyword">if</span> func exists, otherwise <span class="literal">undefined</span>.</span><br><span class="line">obj.arr?.[index]    returns obj.array[index] <span class="keyword">if</span> array exists, otherwise <span class="literal">undefined</span>.</span><br></pre></td></tr></table></figure><p>使用可选链<code>?.</code>运算符</p><p>让我们看看<code>?.</code>操作符与<code>user</code>对象的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  homeaddress: &#123;</span><br><span class="line">    country: <span class="string">"USA"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  hobbies: [&#123;<span class="attr">name</span>: <span class="string">"Coding"</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">"Cooking"</span>&#125;],</span><br><span class="line">  getFirstName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="具有属性">具有属性</span></h2><p>访问存在的属性返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.homeaddress.country); </span><br><span class="line"><span class="comment">// prints "USA";</span></span><br></pre></td></tr></table></figure><p>访问不存在的属性会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.officeaddress.country); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property 'country' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用<code>?.</code>不存在的可选链运算符访问属性将返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.officeaddress?.country); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="具有功能">具有功能</span></h2><p>调用存在的函数返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getFirstName()); </span><br><span class="line"><span class="comment">// prints "John";</span></span><br></pre></td></tr></table></figure><p>调用不存在的函数会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getLastName()); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: user.getLastName is not a function";</span></span><br></pre></td></tr></table></figure><p>用<code>?.</code>不存在的<code>Optional chaining operator</code>调用一个函数将返回<code>undefined：-</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getLastName?.()); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="与数组">与数组</span></h2><p>访问数组的现有索引返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">0</span>].name); </span><br><span class="line"><span class="comment">// prints "Coding";</span></span><br></pre></td></tr></table></figure><p>访问数组的不存在的索引会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">3</span>].name); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property 'name' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用可选的链运算符访问数组的不存在的索引<code>?.</code> 将返回undefined：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">3</span>]?.name); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><p>访问不存在的数组会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.dislikes[<span class="number">0</span>].name); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property '0' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用<code>?.</code>不存在的可选链运算符访问数组将返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.dislikes?.[<span class="number">0</span>]?.name); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="与nullish合并-操作符">与Nullish合并?? 操作符</span></h2><p>现在，您知道如果对象不存在，则可选链运算符<code>?.</code>将返回<code>undefined</code>。有时您想返回一个值，而不是<code>undefined</code>通过使用<code>Nullish Coalescing??</code>运算符和可选的<code>chaining?.</code>运算符来返回一个值。</p><p>如果没有空值合并<code>??</code>运算符，则返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> country = user.officeaddress?.country;</span><br><span class="line"><span class="built_in">console</span>.log(country);</span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><p>使用空值合并<code>??</code>运算符，返回默认值：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> country = user.officeaddress?.country ?? <span class="string">"USA"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(country);</span><br><span class="line"><span class="comment">// prints "USA"</span></span><br></pre></td></tr></table></figure><p>原文链接：<br><a href="https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/</a></p><p>参考其它：<br><a href="https://seifi.org/javascript/optional-chaining-in-javascript.html" target="_blank" rel="noopener">https://seifi.org/javascript/optional-chaining-in-javascript.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生不是一种享乐，而是一桩十分沉重的工作。 —-&amp;lt;列夫·托尔斯泰&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/ja
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="运算符" scheme="https://cl9000.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>python：ERROR:root:code for hash md5 was not found.</title>
    <link href="https://cl9000.github.io/2020/11/05/python-error-root-code-for-hash-md5/"/>
    <id>https://cl9000.github.io/2020/11/05/python-error-root-code-for-hash-md5/</id>
    <published>2020-11-05T10:35:48.000Z</published>
    <updated>2020-11-10T09:16:14.940Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="python-errorrootcode-for-hash-md5-was-not-found">python: ERROR:root:code for hash md5 was not found.</span></h3><h3><span id="解决方案错误日志在下面">解决方案（错误日志在下面👇）</span></h3><p><strong>解决方案</strong></p><ul><li>执行命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /usr/<span class="built_in">local</span>/Cellar/openssl</span></span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.0.2s</span><br></pre></td></tr></table></figure><ul><li>根据现有版本（<strong>根据自己终端的响应修改，例如1.0.2t</strong>），运行：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew switch openssl 1.0.2s</span></span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cleaning /usr/local/Cellar/openssl/1.0.2s</span><br><span class="line">Opt link created for /usr/local/Cellar/openssl/1.0.2s</span><br></pre></td></tr></table></figure><p>然后，在在Python 2.7 virtualenv中运行以下测试命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> hashlib;</span>m=hashlib.md5();print(m.hexdigest())</span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d41d8cd98f00b204e9800998ecf8427e</span><br></pre></td></tr></table></figure><p>如此便正常解决了</p><p><strong>如下错误日志：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">ERROR:root:code for hash md5 was not found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> <span class="keyword">md5</span></span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> <span class="keyword">sha1</span> was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> <span class="keyword">sha1</span></span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha224 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha224</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha256 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha256</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha384 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha384</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha512 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha512</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/bin/pip"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    load_entry_point(<span class="string">'pip==19.0.2'</span>, <span class="string">'console_scripts'</span>, <span class="string">'pip'</span>)()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">489</span>, <span class="keyword">in</span> load_entry_point</span><br><span class="line">    <span class="keyword">return</span> get_distribution(dist).load_entry_point(<span class="keyword">group</span>, <span class="keyword">name</span>)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2793</span>, <span class="keyword">in</span> load_entry_point</span><br><span class="line">    <span class="keyword">return</span> ep.load()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2411</span>, <span class="keyword">in</span> <span class="keyword">load</span></span><br><span class="line">    <span class="keyword">return</span> self.resolve()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2417</span>, <span class="keyword">in</span> resolve</span><br><span class="line">    <span class="keyword">module</span> = __import__(self.module_name, fromlist=[<span class="string">'__name__'</span>], <span class="keyword">level</span>=<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_internal/__init__.py"</span>, line <span class="number">19</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> pip._vendor.urllib3.exceptions <span class="keyword">import</span> DependencyWarning</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/__init__.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .connectionpool <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/connectionpool.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .connection <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/connection.py"</span>, line <span class="number">38</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .util.ssl_ <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/util/__init__.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .ssl_ <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/util/ssl_.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> hashlib <span class="keyword">import</span> <span class="keyword">md5</span>, <span class="keyword">sha1</span>, sha256</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> <span class="keyword">name</span> <span class="keyword">md5</span></span><br></pre></td></tr></table></figure><h3><span id="ref">ref</span></h3><ul><li><a href="https://stackoverflow.com/questions/59269208/errorrootcode-for-hash-md5-was-not-found-when-using-any-hg-mercurial-command#" target="_blank" rel="noopener">“ERROR:root:code for hash md5 was not found” when using any hg mercurial commands<br></a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;python-errorrootcode-for-hash-md5-was-not-found&quot;&gt;python: ERROR:root:code for hash md5 was not found.&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span id=
      
    
    </summary>
    
    
    
      <category term="python error" scheme="https://cl9000.github.io/tags/python-error/"/>
    
      <category term="ERROR:root:code" scheme="https://cl9000.github.io/tags/ERROR-root-code/"/>
    
  </entry>
  
  <entry>
    <title>iOS-virtualPositon 虚拟定位</title>
    <link href="https://cl9000.github.io/2020/10/19/iOS-virtualPositon/"/>
    <id>https://cl9000.github.io/2020/10/19/iOS-virtualPositon/</id>
    <published>2020-10-19T04:18:29.000Z</published>
    <updated>2021-04-16T05:49:39.682Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="方案一">方案一</span></h2><p>使用xcode修改的定位是设备的定位，iOS开发者较为熟悉。</p><h4><span id="一-xcode中新建一个项目创建一个gpx文件">一、Xcode中新建一个项目，创建一个gpx文件</span></h4><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location001.png" alt></p><h4><span id="二-修改经纬度">二、修改经纬度</span></h4><p>修改定位文件gpx，把里面的经纬度改成你要设定的地点的经纬度。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location004.png" alt></p><h4><span id="三-修改绑定">三、修改绑定</span></h4><p>修改定位文件为你刚才创建的文件<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location002.png" alt></p><h4><span id="四-运行修改">四、运行修改</span></h4><p>选择真机设备 运行一下工程，然后打开地图，查看一下当前定位，改变了就成功了。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location003.png" alt></p><h2><span id="方案二-简单快捷">方案二 简单快捷</span></h2><p>若没有iOS开发经验，需要简单快捷，可使用<strong>i4</strong> 修改软件虚拟位置，步骤入下</p><ol><li>Mac appStore（或PC-i4官网）下载 i4（爱思助手）<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location001.png" alt="ios-location001.png"></li><li>数据线连接手机后，工具 - 虚拟定位<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location002.png" alt="ios-location002.png"></li><li>搜索位置或经纬度录入设置<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location003.png" alt="ios-location003.png"></li></ol><p><strong>注意</strong><br>iOS14系统仅支持4个小时，若恢复真实位置，需要重新启动手机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;方案一&quot;&gt;方案一&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;使用xcode修改的定位是设备的定位，iOS开发者较为熟悉。&lt;/p&gt;
&lt;h4&gt;&lt;span id=&quot;一-xcode中新建一个项目创建一个gpx文件&quot;&gt;一、Xcode中新建一个项目，创建一个gpx文件&lt;/sp
      
    
    </summary>
    
    
    
      <category term="工具" scheme="https://cl9000.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="虚拟定位" scheme="https://cl9000.github.io/tags/%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/"/>
    
      <category term="手机定位" scheme="https://cl9000.github.io/tags/%E6%89%8B%E6%9C%BA%E5%AE%9A%E4%BD%8D/"/>
    
      <category term="修改定位" scheme="https://cl9000.github.io/tags/%E4%BF%AE%E6%94%B9%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 个人页的README文件 GitHub Profile</title>
    <link href="https://cl9000.github.io/2020/10/15/GitHub-Profile-GitHub%E4%B8%AA%E4%BA%BA%E9%A6%96%E9%A1%B5/"/>
    <id>https://cl9000.github.io/2020/10/15/GitHub-Profile-GitHub%E4%B8%AA%E4%BA%BA%E9%A6%96%E9%A1%B5/</id>
    <published>2020-10-15T08:39:18.000Z</published>
    <updated>2020-11-10T09:12:56.469Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="github-个人页的readme文件">GitHub 个人页的README文件</span></h3><p>当你尝试去创建一个与你<code>Github</code>用户名相同的仓库时，会发现这是<code>Github</code>为你预留的特殊仓库，用来作为你的<code>Github Profile</code>，这个仓库就相当于一个可以显示在你<code>Github</code>个人页的README文件。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-gprpf-20201106.png" alt="img-gprpf-20201106.png"></p><p>本文会帮助你美化你的Github Profile，让它展示更多有用的信息。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-gh-profile-20201106.png" alt="img-gh-profile-20201106.png"></p><p>例如添加一个<code>首页被访问次数的计数器</code>，一个Github被Star与Commit的概览信息，以及各种技能<code>标签</code>，设备标签等。还可以利用<code>wakatime</code>显示你<code>最近编码各类语言的使用时长</code>，以及你最近<code>Steam游戏游玩排行榜</code>。</p><h4><span id="首页计数器">首页计数器</span></h4><p>这个很容易实现，只需要一个统计资源请求的后台服务即可，有很多第三方的服务可以使用，page_id后面替换为自己的Github用户名。</p><p><code>![](https://visitor-badge.glitch.me/badge?page_id=cl9000.readme)</code><br><img src="https://visitor-badge.glitch.me/badge?page_id=cl9000.readme" alt></p><p>参考另位博友自己搭建的，是使用下方。（@后面替换为自己的Github用户名）<br><code>![](http://antzuhl.cn:4000/get/@antzuhl.readme)</code></p><h4><span id="github信息概览">Github信息概览</span></h4><p><img src="https://github-readme-stats.vercel.app/api?username=cl9000&amp;show_icons=true&amp;count_private=true&amp;hide=prs&amp;theme=default_repocard" alt="info"></p><p>这个也是使用现有的<a href="https://github.com/anuraghazra/github-readme-stats" target="_blank" rel="noopener">开源github项目 github-readme-stats</a>，根据url来配置卡片信息。</p><p><code>![info](https://github-readme-stats.vercel.app/api?username=cl9000&amp;show_icons=true&amp;count_private=true&amp;hide=prs&amp;theme=default_repocard)</code></p><p>url中username为你的Github用户名，theme为主题配置，支持的主题样式丰富，如下：<br><code>dark, radical, merko, gruvbox, tokyonight, onedark, cobalt, synthwave, highcontrast, dracula</code></p><h4><span id="技能-ampamp-设备卡片">技能 &amp;&amp; 设备卡片</span></h4><p>这是Github很多开源仓库都会使用的东西，其本质也是第三方服务后台动态生成的图片，类似：<br><img src="https://visitor-badge.glitch.me/badge?page_id=@cl9000.readme" alt="访客徽章"></p><p><code>simpleicons</code>提供了很多的icon，几乎可以找到所以的程序语言，设备，IDE，开源产品的icon。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-simpleicons-20201106.png" alt="img-simpleicons-20201106.png"></p><p>可参阅 <a href="https://simpleicons.org/" target="_blank" rel="noopener">simpleicons</a> 和 <a href="https://shields.io/" target="_blank" rel="noopener">shields.io</a> 配合使用展现不同样式，如下：</p><ul><li>linux卡片</li></ul><p><code>[![](https://img.shields.io/badge/OS-Arch%20Linux-33aadd?style=flat-square&amp;logo=arch-linux&amp;logoColor=ffffff)](https://www.archlinux.org/)</code><br><a href="https://www.archlinux.org/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/OS-Arch%20Linux-33aadd?style=flat-square&amp;logo=arch-linux&amp;logoColor=ffffff" alt></a></p><ul><li>mac卡片</li></ul><p><code>[![](https://img.shields.io/badge/macOS-Hackintosh-292e33?style=flat-square&amp;logo=apple&amp;logoColor=ffffff)](https://www.tonymacx86.com/)</code><br><a href="https://www.tonymacx86.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/macOS-Hackintosh-292e33?style=flat-square&amp;logo=apple&amp;logoColor=ffffff" alt></a></p><ul><li>手机设备</li></ul><p><code>[![](https://img.shields.io/badge/Honor-V30-f5010c?style=flat-square&amp;logo=huawei&amp;logoColor=ffffff)](https://www.apple.com/)</code><br><a href="https://www.apple.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Honor-V30-f5010c?style=flat-square&amp;logo=huawei&amp;logoColor=ffffff" alt></a></p><ul><li>程序语言</li></ul><p><code>[![](https://img.shields.io/badge/-Java-007396?style=flat-square&amp;logo=java&amp;logoColor=ffffff)](https://reactjs.org/)</code><br><a href="https://reactjs.org/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/-Java-007396?style=flat-square&amp;logo=java&amp;logoColor=ffffff" alt></a></p><ul><li>游戏</li></ul><p><code>[![](https://img.shields.io/badge/Steam-171a21?style=flat-square&amp;logo=steam&amp;logoColor=ffffff)](https://steamcommunity.com/id/antzuhl)</code><br><a href="https://steamcommunity.com/id/antzuhl" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Steam-171a21?style=flat-square&amp;logo=steam&amp;logoColor=ffffff" alt></a></p><h4><span id="编程-ampamp-游戏时长统计">编程 &amp;&amp; 游戏时长统计</span></h4><p>主要利用了 <code>Github Action</code> 的机制，触发定时任务去 <code>Wakatime平台</code> 拉取数据进行统计，而 Wakatime 平台提供了 <code>JetBrains全家桶、 VsCode、 Chrome的插件</code>，用于统计用户的编程时长数据。</p><ol><li>创建一个Github Gist（下方）： <code>https://gist.github.com/</code></li><li>新建一个拥有gist空间权限的Token，保存它 <code>https://github.com/settings/tokens/new</code></li><li>创建一个WakaTime的账号 <code>https://wakatime.com/signup</code></li><li>在你的WakaTime账号设置中选择公开你的编码活动 <code>https://wakatime.com/settings/profile</code><br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-wakatim-20201106.png" alt="img-wakatim-20201106.png"></li><li>在你WakaTime账户设置中创建Api-Key，并且复制它 <code>https://wakatime.com/settings/api-key</code></li><li>Fork这个仓库 <code>https://github.com/matchai/waka-box</code></li><li>编辑 <code>.github/workflows/schedule.yml</code> 文件，将其中的GIST_ID设置为你创建的gist页面的url</li><li>在你仓库的安全设置中添加下面两个环境变量 <code>Settings &gt; Secrets</code><ul><li>GH_TOKEN: 第2步的 <code>gist token</code></li></ul><ul><li>WAKATIME_API_KEY: 第5步中的 <code>wakatime Api-key</code></li></ul></li></ol><p>这样就算是完成了，如果你有 Github Action知识，并且懂 cron 表达式，可以看看这个仓库的action脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name: Update gist with WakaTime stats</span><br><span class="line">on:</span><br><span class="line">  schedule:</span><br><span class="line">    - cron: &quot;0 0 * * *&quot;</span><br><span class="line">jobs:</span><br><span class="line">  update-gist:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@master</span><br><span class="line">      - name: Update gist</span><br><span class="line">        uses: matchai/waka-box@master</span><br><span class="line">        env:</span><br><span class="line">          GH_TOKEN: $&#123;&#123; secrets.GH_TOKEN &#125;&#125;</span><br><span class="line">          GIST_ID: 968220c97e8da1d047a9a480fa432e54</span><br><span class="line">          WAKATIME_API_KEY: $&#123;&#123; secrets.WAKATIME_API_KEY &#125;&#125;</span><br></pre></td></tr></table></figure><p>其中 cron 就是该脚本执行的时间，每个小时的0秒0分，也就是指每小时执行一次。</p><p>你可以将这个gist的script文件添加到你的 Github Profile 中，用来在首页显示你的编码时间。</p><p>统计 Steam 游戏时间也是类似，不过没有 Wakatime 这样的平台去让我们拉取数据，但是我们可以直接去 Steam 拉取。</p><p>可以参考这个仓库 <a href="https://github.com/journey-ad/steam-go" target="_blank" rel="noopener">https://github.com/journey-ad/steam-go</a></p><p>代码片段，可以看到 <code>STEAM_API_KEY</code> 与 <code>STEAM_ID</code> 也是需要你设置到仓库环境变量中去的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">true<span class="string">"context"</span></span><br><span class="line">true<span class="string">"fmt"</span></span><br><span class="line">true<span class="string">"os"</span></span><br><span class="line">true<span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">truesteam <span class="string">"github.com/YouEclipse/steam-go/pkg"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">truesteamClient := steam.NewClient(os.Getenv(<span class="string">"STEAM_API_KEY"</span>), <span class="literal">nil</span>)</span><br><span class="line">truesteamID, _ := strconv.ParseUint(os.Getenv(<span class="string">"STEAM_ID"</span>), <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">truectx := context.Background()</span><br><span class="line">trueparams := &amp;steam.GetOwnedGamesParams&#123;</span><br><span class="line">truetrueSteamID:                steamID,</span><br><span class="line">truetrueIncludeAppInfo:         <span class="literal">true</span>,</span><br><span class="line">truetrueIncludePlayedFreeGames: <span class="literal">true</span>,</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">trueresult, err := steamClient.IPlayerService.GetOwnedGames(ctx, params)</span><br><span class="line">true<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">truetrue<span class="built_in">panic</span>(err)</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">truefmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质都是类似于爬虫，利用 <code>Github Action</code> 来达到触发的效果。</p><p>这样就算是完成了，还有更多玩法可以自己探索。</p><h3><span id="关于访问gist入口-ampamp-无法访问gist解决方案">关于访问Gist入口 &amp;&amp; 无法访问Gist解决方案</span></h3><ol><li>登录GitHub后，菜单中 <strong>your gists</strong></li><li>修改hosts文件，新增以下：</li></ol><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.30.253.113</span>  github.com</span><br><span class="line"><span class="number">192.30.253.118</span>  gist.github.com</span><br><span class="line"><span class="number">192.30.253.119</span>  gist.github.com</span><br></pre></td></tr></table></figure><h3><span id="ref">ref</span></h3><p><a href="http://antzuhl.cn/archives/githubprofile" target="_blank" rel="noopener">http://antzuhl.cn/archives/githubprofile</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;github-个人页的readme文件&quot;&gt;GitHub 个人页的README文件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;当你尝试去创建一个与你&lt;code&gt;Github&lt;/code&gt;用户名相同的仓库时，会发现这是&lt;code&gt;Github&lt;/code&gt;为你预留的特
      
    
    </summary>
    
    
    
      <category term="Github" scheme="https://cl9000.github.io/tags/Github/"/>
    
      <category term="Github Profile" scheme="https://cl9000.github.io/tags/Github-Profile/"/>
    
      <category term="Github Gist" scheme="https://cl9000.github.io/tags/Github-Gist/"/>
    
      <category term="wakatime" scheme="https://cl9000.github.io/tags/wakatime/"/>
    
      <category term="shields.io" scheme="https://cl9000.github.io/tags/shields-io/"/>
    
      <category term="simpleicons" scheme="https://cl9000.github.io/tags/simpleicons/"/>
    
      <category term="visitor-badge" scheme="https://cl9000.github.io/tags/visitor-badge/"/>
    
      <category term="readme" scheme="https://cl9000.github.io/tags/readme/"/>
    
  </entry>
  
  <entry>
    <title>虚拟DOM（Virtual Dom） VS 影子DOM（Shadow Dom）</title>
    <link href="https://cl9000.github.io/2020/05/27/%E8%99%9A%E6%8B%9FDOMVS%E5%BD%B1%E5%AD%90DOM/"/>
    <id>https://cl9000.github.io/2020/05/27/%E8%99%9A%E6%8B%9FDOMVS%E5%BD%B1%E5%AD%90DOM/</id>
    <published>2020-05-27T06:03:31.000Z</published>
    <updated>2021-04-15T06:47:21.176Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&lt;爱因斯坦&gt;</p><blockquote><p>作者：Ashish Lahoti<br><br>译者：cl9000 <br><br>原文：<a href="https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom</a></p></blockquote><h2><span id="dom">DOM</span></h2><p><code>DOM</code>是文档对象模型的简写-这是一种通过对象表示结构化内容的方式。<code>HTML，XHTML，XML</code>是编写结构化内容的一些方法。</p><p>当浏览器呈现HTML页面时，它会在后台编译此<code>HTML</code>并生成<code>DOM</code>对象。可以通过<code>JavaScript</code>和<code>CSS</code>访问和操作此<code>DOM</code>对象，例如，当您单击按钮时，将触发DOM单击事件，JavaScript可以侦听和操作DOM以显示弹出对话框。</p><p>默认情况下，当<code>DOM</code>对象发生任何变化时，浏览器会重新呈现整个页面。这样，<code>DOM</code>的更改在性能方面是昂贵的。</p><p>为了解决这个问题，出现了新的概念。让我们看看它们：</p><h2><span id="虚拟domvirtual-dom">虚拟DOM（Virtual Dom）</span></h2><ul><li><code>虚拟DOM</code>是<code>真实DOM</code>的内存表示形式。</li><li>流行的UI框架<a href="https://reactjs.org/" target="_blank" rel="noopener">React.js</a>和<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a>都使用<code>虚拟DOM</code>。</li><li><code>虚拟DOM</code>的概念主要是为了解决性能问题，方法如下：<ul><li><code>DOM</code>中的任何更新都首先应用于<code>虚拟DOM</code>，而不是直接应用于<code>真实DOM</code>。然后，它通过流程调用差异将更改与<code>真实DOM</code>进行比较，并仅通过重新呈现更改的元素，将更改有效地应用于<code>真实DOM</code>。</li></ul><ul><li>除此之外，它还允许收集要立即应用的多个更改，因此并非每个更改都会导致重新渲染，而是仅在将一组更改从<code>虚拟DOM</code>应用于<code>真实DOM</code>之后才进行一次重新渲染。</li></ul></li></ul><h2><span id="影子domshadow-dom">影子DOM（Shadow Dom）</span></h2><ul><li>您可以将<code>影子DOM</code>视为<code>DOM</code>中的<code>DOM</code>。一个真实的<code>DOM</code>可以有许多<code>影子DOM</code>，但是每个共享<code>DOM</code>都有自己的隔离<code>DOM</code>树，它具有自己的元素和样式，与<code>真实DOM</code>完全隔离。</li><li>大多数浏览器（包括<code>Firefox，Chrome，Opera和Safari</code>）都原生支持<code>Shadow DOM</code>的概念。</li><li>您可以制作遵循<code>Shadow DOM概念</code>的可重用本机<code>Web组件</code>。本机<code>Web组件</code>的实现和样式隐藏在<code>Shadow DOM</code>中，而不受<code>外部DOM</code>的影响。</li><li><a href="https://lit-element.polymer-project.org/" target="_blank" rel="noopener">Polymer LitElement</a> 和 <a href="https://vaadin.com/components" target="_blank" rel="noopener">Vaadin</a>提供使用<code>影子DOM</code>概念构建的开源可重用<code>Web组件</code>。</li></ul><p><code>影子DOM（Shadow DOM）</code>不是一个新概念<br>尽管只是最近才指定供Web作者使用，但是<code>影子DOM</code>已被用户代理使用多年，以创建和设置诸如表单元素之类的复杂组件。让我们以范围输入元素为例。要在页面上创建一个，我们要做的就是添加以下元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"range"</span>&gt;</span><br></pre></td></tr></table></figure><p>这一要素导致以下组成部分：</p><input type="range"><p>如果我们进行更深入的研究，我们将看到该<code>&lt;input&gt;</code>元素实际上是由几个较小的<code>&lt;div&gt;</code>元素组成的，它们控制着轨道和滑块本身。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/range-input-shadow-dom.png" alt></p><p>这是通过使用<code>影子DOM</code>来实现的。向宿主HTML文档公开的元素简单<code>&lt;input&gt;</code>，但是在其下面有与该组件相关的元素和样式，这些元素和样式不构成<code>DOM</code>全局​​范围的一部分。</p><h3><span id="参考">参考</span></h3><ul><li><p><a href="https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom" target="_blank" rel="noopener">原文 - https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_shadow_DOM" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_shadow_DOM</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&amp;lt;爱因斯坦&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;&lt;br&gt;
译者：cl9000 &lt;br&gt;&lt;br&gt;
原文：&lt;a href=&quot;https://codingncon
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cl9000.github.io/tags/DOM/"/>
    
      <category term="HTML" scheme="https://cl9000.github.io/tags/HTML/"/>
    
      <category term="Shadow Dom" scheme="https://cl9000.github.io/tags/Shadow-Dom/"/>
    
      <category term="Virtual Dom" scheme="https://cl9000.github.io/tags/Virtual-Dom/"/>
    
  </entry>
  
  <entry>
    <title>三个有用的JS技巧</title>
    <link href="https://cl9000.github.io/2020/04/12/JavaScript%E4%B8%89%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84JS%E6%8A%80%E5%B7%A7/"/>
    <id>https://cl9000.github.io/2020/04/12/JavaScript%E4%B8%89%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84JS%E6%8A%80%E5%B7%A7/</id>
    <published>2020-04-12T08:56:06.000Z</published>
    <updated>2021-04-16T05:51:20.749Z</updated>
    
    <content type="html"><![CDATA[<p>​<br>人只有献身于社会，才能找出那短暂而有风险的生命的意义。——&lt;阿尔伯特·爱因斯坦&gt;</p><p>原文链接<br><a href="https://www.jstips.co/en/javascript/three-useful-hacks/" target="_blank" rel="noopener">https://www.jstips.co/en/javascript/three-useful-hacks/</a></p><h2><span id="1-从后到前获取数组项">1、从后到前获取数组项</span></h2><p>如果要从后到前获取数组项，只需执行以下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-1</span>)); <span class="comment">// [4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-2</span>)); <span class="comment">// [3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-3</span>)); <span class="comment">// [2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-4</span>)); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2><span id="2-短路有条件">2、短路有条件</span></h2><p>如果必须在条件为 true 的情况下执行函数，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    dosomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以像这样使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition &amp;&amp; dosomething();</span><br></pre></td></tr></table></figure><h2><span id="3-使用-设置变量默认值">3、使用 || 设置变量默认值</span></h2><p>如果必须为变量设置默认值，则可以执行以下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefined</span></span><br><span class="line">​</span><br><span class="line">a = a || <span class="string">'default value'</span>;</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//default value</span></span><br><span class="line">​</span><br><span class="line">a = a || <span class="string">'new value'</span>;</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//default valu</span></span><br></pre></td></tr></table></figure><blockquote><p>原文链接：<a href="https://www.jstips.co/en/javascript/three-useful-hacks/" target="_blank" rel="noopener">https://www.jstips.co/en/javascript/three-useful-hacks/</a></p></blockquote><p>关注【公众号】，了解更多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​&lt;br&gt;
人只有献身于社会，才能找出那短暂而有风险的生命的意义。——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;p&gt;原文链接&lt;br&gt;
&lt;a href=&quot;https://www.jstips.co/en/javascript/three-useful-hacks/&quot; ta
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用 tap 快速 debug</title>
    <link href="https://cl9000.github.io/2020/04/12/%E4%BD%BFtap%E6%9D%A5%E5%BF%AB%E9%80%9Fdebug/"/>
    <id>https://cl9000.github.io/2020/04/12/%E4%BD%BFtap%E6%9D%A5%E5%BF%AB%E9%80%9Fdebug/</id>
    <published>2020-04-12T08:29:00.000Z</published>
    <updated>2021-04-15T08:34:09.484Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/javascript-7.png" alt></p><p>在这里 <code>tap</code> 是一个可以用来快速调试、链式调用、匿名函数，还可以打印任何你想打印的东西的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么我们不用 console.log 这个老方式了？让我来示范一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bank_totals_by_client(bank_info(<span class="number">1</span>, banks), table)</span><br><span class="line">            .filter(<span class="function"><span class="params">c</span> =&gt;</span> c.balance &gt; <span class="number">25000</span>)</span><br><span class="line">            .sort(<span class="function">(<span class="params">c1, c2</span>) =&gt;</span> c1.balance &lt; = c2.balance ? <span class="number">1</span> : <span class="number">-1</span> )</span><br><span class="line">            .map(<span class="function"><span class="params">c</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;c.id&#125;</span> | <span class="subst">$&#123;c.tax_number&#125;</span> (<span class="subst">$&#123;c.name&#125;</span>) =&gt; <span class="subst">$&#123;c.balance&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>现在，加入你从这个链式调用中没有得到任何返回。 在哪里除了问题呢？或许 bank_info 没有返回东西，我们需要监听（tap）它:</p><p><code>bank_totals_by_client(tap(bank_info(1, banks)), table)</code></p><p>基于我们特殊的实现，它可能会打印一些东西，也可能什么也不打印。 我们假设，打印出来的东西是正确的，因此， <code>bank_info</code> 没有问题。</p><p>我们需要继续调试下一个函数，<code>filter</code> 。</p><p><code>.filter(c =&gt; tap(c).balance &gt; 25000)</code></p><p>我们可以得到 <code>c</code> 吗？如果可以，说明 <code>bank_totals_by_client</code> 运行正常。 可能是 <code>filter</code> 内的条件有问题？</p><p><code>.filter(c =&gt; tap(c.balance &gt; 25000))</code></p><p>我们发现除了 false 没有打印其他东西，所以说明没有一个 client &gt;25000， 这就是为什么方法什么也没返回的原因。</p><p>(附) 更先进的 tap</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span>(<span class="params">x, fn = x =&gt; x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fn(x));</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想在监听 <code>（tap）</code> 之前事先做一些操作应该怎么办？比如，我们只想方位某个对象特定的参数，位于一个逻辑运算，等等。<br>使用上面的方法，在调用的时候增加一个额外参数，这个函数在被监听 <code>（tap）</code> 的时候就会被执行。</p><p><code>tap(3, x =&gt; x + 2) === 3; // 打印出来 5 ，但是返回 true ，为什么 :-)?</code></p><br><h3><span id="参考">参考</span></h3><blockquote><p>原文：<a href="https://github.com/loverajoel/jstips/blob/master/_posts/en/javascript/2017-03-16-tapping-for-quick-debugging.md" target="_blank" rel="noopener">https://github.com/loverajoel/jstips/blob/master/_posts/en/javascript/2017-03-16-tapping-for-quick-debugging.md</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/javascript-7.png&quot; a
      
    
    </summary>
    
    
    
      <category term="debug" scheme="https://cl9000.github.io/tags/debug/"/>
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>window.location备忘录</title>
    <link href="https://cl9000.github.io/2020/04/08/window-location%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://cl9000.github.io/2020/04/08/window-location%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2020-04-08T09:46:23.000Z</published>
    <updated>2021-04-07T10:06:28.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在事情成功之前，一切总看似不可能。——&lt;纳尔逊·曼德拉&gt;</p></blockquote><blockquote><p>作者：Samantha Ming<br>译者：cl9000<br>来源：medium<br>原文：<a href="https://morioh.com/p/b444d291bdfb" target="_blank" rel="noopener">https://morioh.com/p/b444d291bdfb</a></p></blockquote><p>如果你想获取站点的URL信息，那么window.location对象什么很适合你！使用其属性获取有关当前页面地址的信息，或使用其方法进行某些页面重定向或刷新。</p><p><code>https://morioh.com/search?c=cl9000#1</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.origin    → <span class="string">'"https://morioh.com'</span></span><br><span class="line">               .protocol  → <span class="string">'https:'</span></span><br><span class="line">               .host      → <span class="string">'morioh.com'</span></span><br><span class="line">               .hostname  → <span class="string">'morioh.com'</span></span><br><span class="line">               .port      → <span class="string">''</span></span><br><span class="line">               .pathname  → <span class="string">'/search'</span></span><br><span class="line">               .search    → <span class="string">'?c=cl9000'</span></span><br><span class="line">               .hash      → <span class="string">'#1'</span></span><br><span class="line">               .href      → <span class="string">'https://morioh.com/search?c=cl9000#1'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.assign(<span class="string">'url'</span>)</span><br><span class="line">                .replace(<span class="string">'url'</span>)</span><br><span class="line">                .reload()</span><br><span class="line">                .toString()</span><br><span class="line">​</span><br></pre></td></tr></table></figure><h2><span id="windowlocation-属性">window.location 属性</span></h2><table><thead><tr><th>window.location</th><th>返回值</th></tr></thead><tbody><tr><td>.origin</td><td>站点主地址(协议 + 主机名 + 端口)</td></tr><tr><td>.protocol</td><td>协议架构 (http: 或者 htts:)</td></tr><tr><td>.host</td><td>域名 + 端口</td></tr><tr><td>.port</td><td>端口</td></tr><tr><td>.pathname</td><td>最前页的 ‘/’ 后面跟的路径</td></tr><tr><td>.search</td><td>? 后跟的查询字符串</td></tr><tr><td>.hash</td><td>从 # 号开始的部分</td></tr><tr><td>.href</td><td>完整网址</td></tr></tbody></table><h2><span id="host-和-hostname-的区别">host 和 hostname 的区别</span></h2><p>在上面的示例中，你可能注意到host和hostname返回相同的值。那么为什么要这些属性。好吧，这与端口号有关，让我们来看看。</p><h4><span id="没有端口的-url">没有端口的 URL</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//morioh.com/search</span></span><br><span class="line">​</span><br><span class="line"><span class="built_in">window</span>.location.host; <span class="comment">// 'morioh.com'</span></span><br><span class="line"><span class="built_in">window</span>.location.hostname; <span class="comment">// 'morioh.com'</span></span><br><span class="line">​</span><br><span class="line"><span class="built_in">window</span>.location.port; <span class="comment">// ''</span></span><br></pre></td></tr></table></figure><h4><span id="带端口的-url">带端口的 URL</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//morioh.com/search"8080</span></span><br><span class="line">​</span><br><span class="line"><span class="built_in">window</span>.location.host; <span class="comment">// 'morioh.com:8080'</span></span><br><span class="line"><span class="built_in">window</span>.location.hostname; <span class="comment">// 'morioh.com'</span></span><br><span class="line"><span class="built_in">window</span>.location.port; <span class="comment">// '8080'</span></span><br></pre></td></tr></table></figure><p>因此，host将包括端口号，而hostname将仅返回主机名。</p><h2><span id="如何更改-url-属性">如何更改 URL 属性</span></h2><p>我们不仅可以调用location`  属性来检索URL信息，还可以使用它来设置新属性并更改URL。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始 'https://morioh.com/'</span></span><br><span class="line"><span class="built_in">window</span>.location.pathname = <span class="string">'/cl9000'</span>; <span class="comment">// 设置 pathname</span></span><br><span class="line"><span class="comment">// 结果 'https://morioh.com/cl9000'</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>下面是你可以更改的属性的完整列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事例</span></span><br><span class="line"><span class="built_in">window</span>.location.protocol = <span class="string">'https'</span></span><br><span class="line">               .host     = <span class="string">'localhost:8080'</span></span><br><span class="line">               .hostname = <span class="string">'localhost'</span></span><br><span class="line">               .port     = <span class="string">'8080'</span></span><br><span class="line">               .pathname = <span class="string">'path'</span></span><br><span class="line">               .search   = <span class="string">'query string'</span> <span class="comment">// (这里不用写 `?`)</span></span><br><span class="line">               .hash     = <span class="string">'hash'</span> <span class="comment">// (这里不用写 `#`)</span></span><br><span class="line">               .href     = <span class="string">'url'</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>唯一不能设置的属性是window.location.origin，此属性是只读的。</p><h2><span id="location-对象">Location 对象</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location返回一个Location对象。它为我们提供有关页面当前地址的信息。但是我们还可以通过几种方式访问Location对象。</span><br><span class="line"><span class="built_in">window</span>.location          → Location</span><br><span class="line"><span class="built_in">window</span>.document.location → Location</span><br><span class="line"><span class="built_in">document</span>.location        → Location</span><br><span class="line">location                 → Location</span><br></pre></td></tr></table></figure><p>我们这样做的原因是这些是我们浏览器中的全局变量。</p><h2><span id="windowlocation-vs-location">window.location  VS  location</span></h2><p>上面四个属性都指向同一个Location对象。我个人更喜欢window.location并且实际上会避免使用location。主要是因为location看起来像一个普通变量，并且我们有时可能会不小心将其命名为变量，这将覆盖全局变量。举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.samanthaming.com</span></span><br><span class="line">​</span><br><span class="line">location.protocol; <span class="comment">// 'https'</span></span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">localFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> location = <span class="string">'/sam'</span>;</span><br><span class="line">​</span><br><span class="line">  <span class="keyword">return</span> location.protocol;</span><br><span class="line">  <span class="comment">// ❌ undefined</span></span><br><span class="line">  <span class="comment">//    b/c local "location" has override the global variable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我想大多数开发人员都知道window是一个全局变量。这样就不太可能引起混淆。老实说，直到我写了这篇文章，我才知道location 是一个全局变量。建议大家多使用 window.location 来代替其它写法。</p><h2><span id="windowlocation-方法">window.location 方法</span></h2><p>方法          作用<br>.assign()加载一个新的文档<br>.replace()用新的文档替换当前文档<br>.reload()重新加载当前页面<br>.reload()返回的URL</p><h2><span id="windowlocationtostring">window.location.toString</span></h2><p>根据 MDN :<br>此方法返回 URL 的 USVString，它是 Location.href 的只读版本。</p><p>换句话说，我们可以这样得到  href  的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.samanthaming.com</span></span><br><span class="line"><span class="built_in">window</span>.location.href; <span class="comment">// https://www.samanthaming.com</span></span><br><span class="line"><span class="built_in">window</span>.location.toString(); <span class="comment">// https://www.samanthaming.com</span></span><br></pre></td></tr></table></figure><h2><span id="assign-vs-replace">assign vs replace</span></h2><p>这两种方法都是重定向或导航到另一个URL。区别在于assign 是将当前页面保存在历史记录中，因此用户可以使用“后退”按钮导航到该页面。而使用replace方法时，不会保存它。让我们来看一个例子。</p><h2><span id="assign">Assign</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 打开一个新的空白页</span><br><span class="line"><span class="number">2.</span> 输入 www.samanthaming.com (当前页)</span><br><span class="line"><span class="number">3.</span> 使用 <span class="string">`window.location.assign('https://www.baidu.com')`</span> 载入新页面</span><br><span class="line"><span class="number">4.</span> 按 <span class="string">"返回上一页"</span></span><br><span class="line"><span class="number">5.</span> 返回到了 👉 www.samanthaming.com</span><br></pre></td></tr></table></figure><h2><span id="replace">Replace</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 打开一个新的空白页</span><br><span class="line"><span class="number">2.</span> 输入 www.samanthaming.com (当前页)</span><br><span class="line"><span class="number">3.</span> 使用 <span class="string">`window.location.assign('https://www.baidu.com')`</span> 载入新页面</span><br><span class="line"><span class="number">4.</span> 按 <span class="string">"返回上一页"</span></span><br><span class="line"><span class="number">5.</span> 返回到一个空白页</span><br></pre></td></tr></table></figure><h2><span id="如何让页面重定向">如何让页面重定向</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如何重定向到另一个页面，有<span class="number">3</span>种方法。</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="string">'https://www.samanthaming.com'</span>;</span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="string">'https://www.samanthaming.com'</span>);</span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="string">'https://www.samanthaming.com'</span>);</span><br></pre></td></tr></table></figure><h2><span id="replace-vs-assign-vs-href">replace VS assign VS href</span></h2><p>这三个都可以重定向，区别在于浏览器的历史记录。href和assign 会把当前页面保存在历史记录中，而replace则不会。因此，如果你想创建一种导航无法回到原始页面的体验，请使用replace👍</p><p>现在的问题是href与assign。我更喜欢assign，因为它是一种方法，因此感觉好像我正在执行一些操作。还有一个额外的好处是它更易于测试。我已经编写了许多Jest测试，因此通过使用一种方法，它使其更易于模拟。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.assign = jest.fn();</span><br><span class="line">​</span><br><span class="line">myUrlUpdateFunction();</span><br><span class="line">​</span><br><span class="line">expect(<span class="built_in">window</span>.location.assign).toBeCalledWith(<span class="string">'http://my.url'</span>);</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>最终希望备忘单，希望能对你有所帮助，在需要的时候，能快速给你带来答案。谢谢大家的观看。</p><p>关注【公众号】，了解更多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在事情成功之前，一切总看似不可能。——&amp;lt;纳尔逊·曼德拉&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Samantha Ming&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：medium&lt;br&gt;
原文：&lt;a 
      
    
    </summary>
    
    
    
      <category term="window.location" scheme="https://cl9000.github.io/tags/window-location/"/>
    
  </entry>
  
  <entry>
    <title>basicScroll – 独立视差滚动</title>
    <link href="https://cl9000.github.io/2020/04/07/basicScroll%E7%8B%AC%E7%AB%8B%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8/"/>
    <id>https://cl9000.github.io/2020/04/07/basicScroll%E7%8B%AC%E7%AB%8B%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8/</id>
    <published>2020-04-07T09:48:40.000Z</published>
    <updated>2021-04-07T08:20:31.212Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/basicscroll001.png" alt="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/basicscroll001.png"></p><blockquote><p>使用 CSS 变量改变动画的移动端和桌面端的独立视差滚动。</p></blockquote><p><a href="https://basicscroll.electerious.com/" target="_blank" rel="noopener">basicscroll - https://basicscroll.electerious.com/</a><br><a href="https://github.com/electerious/basicScroll" target="_blank" rel="noopener">basicScroll - https://github.com/electerious/basicScroll</a></p><p>basicScroll 可以根据 CSS 变量来改变滚动位置。你可以在 CSS 中使用变量来制作想要的动画效果。basicScroll 运行非常流畅，在桌面和移动设备上运行出色，并且支持触摸。</p><p>basicScroll 独立于框架，支持 CommonJS 和 AMD ，拥有简单的 JS API 。</p><h2><span id="特性">特性</span></h2><ul><li>框架独立</li><li>疯狂的表演</li><li>支持移动和桌面</li><li>CommonJS和AMD的支持</li><li>简单的JS API</li></ul><h2><span id="安装">安装</span></h2><p>建议使用 <code>npm 或 yarn</code> 安装 <code>basicScroll</code>。</p><p><code>$ npm install basicscroll</code></p><p><code>$ yarn add basicscroll</code></p><p>将 <code>JS</code> 文件包含在 <code>&lt;body&gt;</code> 标记的末尾</p><p><code>&lt;script src=&quot;dist/basicScroll.min.js&quot;&gt;&lt;/script&gt;</code></p><p>或者跳过<code>JS</code>文件，使用<code>basicScroll</code>作为模块:</p><p><code>const basicScroll = require('basicScroll')</code></p><p><code>import * as basicScroll from 'basicscroll'</code></p><h2><span id="用法">用法</span></h2><p>下面的示例所演示的是如何在用户滚动时更改元素的不透明度。只要元素的顶部到达视口的底部，元素就开始淡化。当元素的中间部分位于视口中间时，达到.99的不透明度。</p><p>提示：从.01到.99的动画避免了元素从完全透明变为半透明，并从半透明变为完全可见时触发的重绘。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = basicScroll.create(&#123;</span><br><span class="line">trueelem: <span class="built_in">document</span>.querySelector(<span class="string">'.element'</span>),</span><br><span class="line">true<span class="keyword">from</span>: <span class="string">'top-bottom'</span>,</span><br><span class="line">trueto: <span class="string">'middle-middle'</span>,</span><br><span class="line">trueprops: &#123;</span><br><span class="line">truetrue<span class="string">'--opacity'</span>: &#123;</span><br><span class="line">truetruetrue<span class="keyword">from</span>: <span class="number">.01</span>,</span><br><span class="line">truetruetrueto: <span class="number">.99</span></span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance.start()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.element &#123;</span><br><span class="line">true<span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用与上面实例中指定的相同的CSS变量。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">trueopacity: <span class="keyword">var</span>(--opacity);</span><br><span class="line">true<span class="comment">/*</span></span><br><span class="line"><span class="comment"> * CSS 属性 will-change 为web开发者提供了一种告知浏览器该元素会有哪些变化的方法，这样浏览器可以在元素属性真正发生变 </span></span><br><span class="line"><span class="comment">         * 化之前提前做好对应的优化准备工作。这种优化可以将一部分复杂的计算工作提前准备好，使页面的反应更为快速灵敏。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="comment">// will-change: opacity;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/basicscroll001.png&quot; alt=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogI
      
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://cl9000.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Pressure.js – 用于处理Force Touch，3D Touch的JS库</title>
    <link href="https://cl9000.github.io/2020/04/07/Pressurejs%E5%A4%84%E7%90%86Touch%E7%9A%84JS%E5%BA%93/"/>
    <id>https://cl9000.github.io/2020/04/07/Pressurejs%E5%A4%84%E7%90%86Touch%E7%9A%84JS%E5%BA%93/</id>
    <published>2020-04-07T09:11:15.000Z</published>
    <updated>2021-04-07T05:38:50.374Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>干就完了 – <cl9000></cl9000></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Pressurejs.gif" alt></p><p><a href="https://pressurejs.com/" target="_blank" rel="noopener">pressurejs - https://pressurejs.com/</a><br><a href="https://github.com/stuyam/pressure" target="_blank" rel="noopener">pressurejs - https://github.com/stuyam/pressure</a></p><blockquote><p>Pressure.js 是一个用于处理 web 上的 Force Touch ，3D Touch 和指针压力的 JavaScript 库。</p></blockquote><h2><span id="安装">安装</span></h2><p>可以从 GitHub 下载 <code>pressure.min.js</code> 或 <code>pressure.js</code> 文件，也可以使用 <code>npm</code> 或 <code>bower</code> 进行安装。</p><h4><span id="npm">npm</span></h4><p><code>$ npm install pressure --save</code></p><h4><span id="bower">bower</span></h4><p><code>$ bower install pressure --save</code></p><h2><span id="配置">配置</span></h2><p>在全局空间中使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#id-name'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者与 browserify 或 CommonJS 一起使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Pressure = <span class="built_in">require</span>(<span class="string">'pressure'</span>);</span><br><span class="line"></span><br><span class="line">Pressure.set(<span class="string">'#id-name'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="用法">用法</span></h2><p>注意:每个回调方法中的&quot;this&quot;关键字将是应用于它的元素本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#element'</span>, &#123;</span><br><span class="line">  start: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 开始时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  end: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 结束时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  startDeepPress: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 压感触控/深压时, 也就是一旦压感大于0.5时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  endDeepPress: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 当压感触控/深压结束时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 每次压感发生变化时都会被调用</span></span><br><span class="line">    <span class="comment">// 在移动设备和桌面端，压感的值始终为0到1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  unsupported: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 注意：只有在polyfill选项被禁用的情况下才会调用这个选项！</span></span><br><span class="line">    <span class="comment">// 一旦触摸元素并且设备或浏览器不支持压感触控或3D触控时调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="jquery-用法">jQuery 用法</span></h2><p>注意:每个回调方法中的&quot;this&quot;关键字将是应用于它的元素本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#element'</span>).pressure(&#123;</span><br><span class="line">    start: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 开始时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    end: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 结束时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    startDeepPress: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 压感触控/深压时, 也就是一旦压感大于0.5时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    endDeepPress: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 当压感触控/深压结束时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    change: <span class="function"><span class="keyword">function</span> (<span class="params">force, event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 每次压感发生变化时都会被调用</span></span><br><span class="line">        <span class="comment">// 在移动设备和桌面端，压感的值始终为0到1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    unsupported: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 注意：只有在polyfill选项被禁用的情况下才会调用这个选项！</span></span><br><span class="line">        <span class="comment">// 一旦触摸元素并且设备或浏览器不支持压感触控或3D触控时调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="可选项">可选项</span></h2><h3><span id="polyfill-support">Polyfill Support</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;,</span><br><span class="line">  unsupported: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"Oh no, this device does not support pressure."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;<span class="attr">polyfill</span>: <span class="literal">false</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="polyfill-speed-up">Polyfill Speed Up</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;<span class="attr">polyfillSpeedUp</span>: <span class="number">5000</span>&#125;);</span><br><span class="line"><span class="comment">// takes 5 seconds to go from a force value of 0 to 1</span></span><br><span class="line"><span class="comment">// only on devices that do not support pressure</span></span><br></pre></td></tr></table></figure><h3><span id="polyfill-speed-down">Polyfill Speed Down</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;<span class="attr">polyfillSpeedDown</span>: <span class="number">2000</span>&#125;);</span><br><span class="line"><span class="comment">// takes 2 seconds to go from a force value of 1 to 0</span></span><br><span class="line"><span class="comment">// only on devices that do not support pressure</span></span><br></pre></td></tr></table></figure><h3><span id="只能在触控板鼠标上运行-only-run-on-force-touch-trackpads-mouse">只能在触控板(鼠标)上运行 Only run on Force Touch trackpads (mouse)</span></h3><blockquote><p>Set the option only to the type you want it to run on ‘mouse’, ‘touch’, or ‘pointer’. The names are the types of events that pressure will respond to.<br>【译】只设置选项的类型，你希望它运行在’鼠标’，‘触摸’，或’指针’。这些名称是压力响应的事件类型。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">only</span>: <span class="string">'mouse'</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="只在3d-touch上运行touch-only-run-on-3d-touch-touch">只在3D Touch上运行(Touch) Only run on 3D Touch (touch)</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">only</span>: <span class="string">'touch'</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="只在指针支持的设备上运行指针-only-run-on-pointer-supported-devices-pointer">只在指针支持的设备上运行(指针) Only run on Pointer Supported Devices (pointer)</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">only</span>: <span class="string">'pointer'</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="更改preventselect选项-change-the-preventselect-option">更改preventSelect选项 Change the preventSelect option</span></h3><blockquote><p>The preventDefault option in “true” by default and it prevents the default actions that happen on 3D “peel and pop” actions and the Force “define word” actions as well as other defaults. To allow the defaults to run set preventDefault to “false”<br>【译】该preventDefault选项在“true”默认情况下，它防止发生在3D“剥离和弹出”行动和Force“define word”行动以及其他默认情况下的默认行动。允许默认值运行设置preventDefault为false</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">preventSelect</span>: <span class="literal">false</span>&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;干就完了 – &lt;cl9000&gt;&lt;/cl9000&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Pressurejs.gif&quot;
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://cl9000.github.io/tags/javascript/"/>
    
      <category term="Touch" scheme="https://cl9000.github.io/tags/Touch/"/>
    
      <category term="3d-touch" scheme="https://cl9000.github.io/tags/3d-touch/"/>
    
      <category term="Pressure" scheme="https://cl9000.github.io/tags/Pressure/"/>
    
      <category term="Pressurejs" scheme="https://cl9000.github.io/tags/Pressurejs/"/>
    
      <category term="pointer-events" scheme="https://cl9000.github.io/tags/pointer-events/"/>
    
  </entry>
  
  <entry>
    <title>Plyr 是一个简单、轻量级、可定制的HTML5播放器</title>
    <link href="https://cl9000.github.io/2020/04/06/Plyr%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>https://cl9000.github.io/2020/04/06/Plyr%E6%92%AD%E6%94%BE%E5%99%A8/</id>
    <published>2020-04-06T07:59:20.000Z</published>
    <updated>2021-04-06T09:25:43.222Z</updated>
    
    <content type="html"><![CDATA[<p>​</p><blockquote><p>Plyr 是一个简单的可定制的 HTML5 媒体播放器，使用原生 JavaScript 没有其他依赖。支持 YouTube 和 Vimeo 。</p></blockquote><h2><span id="特性">特性</span></h2><p>​</p><ul><li>📼 HTML视频和音频，YouTube和Vimeo -支持主要格式</li><li>💪 可访问-充分支持VTT字幕和屏幕阅读器</li><li>🔧 Customizable -用你想要的标记让播放器看起来像你想要的样子</li><li>😎 干净的HTML -使用正确的元素。<code>&lt;input type=&quot;range&quot;&gt;</code>表示音量，<code>&lt;progress&gt;</code>表示* 进度，<code>&lt;button&gt;</code>s表示按钮。没有<code>&lt;span&gt;</code>或<code>&lt;a href=&quot;#&quot;&gt;</code>按钮hacks</li><li>📱 响应-工作与任何屏幕大小</li><li>💵 货币化-从你的视频赚钱</li><li>📹 流媒体-支持hls.js, Shaka和dash.js流媒体播放</li><li>🎛 API -通过一个标准化的API切换播放、音量、搜索等</li><li>🎤 事件-没有杂乱无章的Vimeo和YouTube api，所有的事件是标准化的格式</li><li>🔎 全屏-支持本机全屏回退到“全窗口”模式</li><li>⌨️ 快捷键-支持键盘快捷键</li><li>🖥 Picture-in-Picture -支持Picture-in-Picture模式</li><li>📱 Playsinline -支持Playsinline属性</li><li>🏎 速度控制-在飞行中调整速度</li><li>📖 多个标题-支持多个标题轨道</li><li>🌎 i18n支持-支持控件的国际化</li><li>👌 预览缩略图-支持显示预览缩略图</li><li>🤟 没有框架-写在“香草”ES6 JavaScript，不需要jQuery</li><li>💁♀️ SASS -包括在您的构建过程中</li></ul><h2><span id="插件-amp-组件">插件 &amp; 组件</span></h2><p>一些了不起的人已经为cms制作了插件，为JavaScript框架制作了组件:</p><p>TypeMaintainerLink<br>WordPressBrandon Lavigne (@drrobotnik)<a href="https://wordpress.org/plugins/plyr/" target="_blank" rel="noopener">https://wordpress.org/plugins/plyr/</a><br>AngularSimon Bobrov (@smnbbrv)<a href="https://github.com/smnbbrv/ngx-plyr" target="_blank" rel="noopener">https://github.com/smnbbrv/ngx-plyr</a><br>ReactChintan Prajapati (@chintan9)<a href="https://github.com/chintan9/plyr-react" target="_blank" rel="noopener">https://github.com/chintan9/plyr-react</a><br>VueGabe Dunn (@redxtech)<a href="https://github.com/redxtech/vue-plyr" target="_blank" rel="noopener">https://github.com/redxtech/vue-plyr</a><br>NeosJon Uhlmann (@jonnitto)<a href="https://packagist.org/packages/jonnitto/plyr" target="_blank" rel="noopener">https://packagist.org/packages/jonnitto/plyr</a><br>KirbyDominik Pschenitschni (@dpschen)<a href="https://github.com/dpschen/kirby-plyrtag" target="_blank" rel="noopener">https://github.com/dpschen/kirby-plyrtag</a><br>REDAXOFriendsOfRedaxo/skerbis (@skerbis)<a href="https://github.com/FriendsOfREDAXO/plyr" target="_blank" rel="noopener">https://github.com/FriendsOfREDAXO/plyr</a><br>svelte-plyrBen Woodward / benwoodward (@benwoodward)<a href="https://github.com/benwoodward" target="_blank" rel="noopener">https://github.com/benwoodward</a></p><h2><span id="安装">安装</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm</span><br><span class="line">npm install plyr</span><br><span class="line">​</span><br><span class="line">Bower</span><br><span class="line">bower install plyr</span><br><span class="line">​</span><br><span class="line">Ember</span><br><span class="line">ember addon:install ember-cli-plyr</span><br></pre></td></tr></table></figure><h2><span id="快速开始">快速开始</span></h2><p>这是一个快速开始的示例。还有一个在 <a href="https://codepen.io/sampotts/pen/jARJYp" target="_blank" rel="noopener">Codepen https://codepen.io/sampotts/pen/jARJYp</a> 上的演示。</p><h3><span id="html">HTML</span></h3><p>Plyr 扩展了标准的 HTML5 标记，这就是你需要的那些类型。</p><h4><span id="html5-视频">HTML5 视频</span></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">poster</span>=<span class="string">"/path/to/poster.jpg"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"/path/to/video.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"/path/to/video.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Captions are optional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">track</span> <span class="attr">kind</span>=<span class="string">"captions"</span> <span class="attr">label</span>=<span class="string">"English captions"</span> <span class="attr">src</span>=<span class="string">"/path/to/captions.vtt"</span> <span class="attr">srclang</span>=<span class="string">"en"</span> <span class="attr">default</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="html5-音频">HTML5 音频</span></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"/path/to/audio.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"/path/to/audio.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于 YouTube 和 Vimeo ，Plyr 使用标准的 YouTube API 标记：</p><h4><span id="嵌入-youtube">嵌入 YouTube</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-type=<span class="string">"youtube"</span> data-video-id=<span class="string">"bTqVqk7FSmY"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="嵌入-vimeo">嵌入 Vimeo</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-type=<span class="string">"vimeo"</span> data-video-id=<span class="string">"143418951"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>注意：data-video-id 的值可以是视频的 ID 或 URL 。</p><h4><span id="javascript">JavaScript</span></h4><p>在  标记之前添加 plyr.js 脚本，然后调用 plyr.setup() 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"path/to/plyr.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;plyr.setup();&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4><span id="css">CSS</span></h4><p>在 <head><meta name="generator" content="Hexo 3.9.0"> 标签中引入 plyr.css 样式。<link rel="alternate" href="/feed.xml" title="Weichanglu" type="application/atom+xml"></head></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" href="path/to/plyr.css"&gt;</span><br></pre></td></tr></table></figure><h4><span id="svg-雪碧图">SVG 雪碧图</span></h4><p>SVG 雪碧图从我们的 CDN 自动加载。你也可以下载后放在自己的服务器中（<a href="https://cdn.plyr.io/2.0.13/plyr.svg%EF%BC%89" target="_blank" rel="noopener">https://cdn.plyr.io/2.0.13/plyr.svg）</a></p><h2><span id="高级">高级</span></h2><h4><span id="less-amp-sassscss">LESS &amp; SASS/SCSS</span></h4><p>你可以使用 /src 中包含的 plyr.less 或 plyr.scss 文件作为构建的一部分，并根据你的设计更改变量。</p><h4><span id="svg">SVG</span></h4><p>Plyr 控件中使用的图标被放到 SVG 雪碧图中。默认情况下，雪碧图自动从我们的 CDN 加载。如果你已经有了自己的图标，你可以载入进来（ /src/sprite ）。</p><p>####使用 iconUrl 选项<br>然而，你可以指定自己的 iconUrl 选项，并且 Plyr 将确定 url 是否是绝对的，由于当前的浏览器限制或需要由 AJAX/CORS 加载，只需直接使用路径即可。</p><h4><span id="跨域资源-cors">跨域资源 (CORS)</span></h4><p>示例中的 <code>&lt;video&gt;</code> 元素使用跨域属性。这是因为 TextTrack 标题是从另一个域加载的。如果你的 TextTrack 字幕也托管在另一个域上，则需要添加此属性，并确保您的主机具有正确的 <code>&lt;meta&gt;</code>设置。有关 CORS 可查看 MDN 文档：<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS</a></p><h4><span id="标题">标题</span></h4><p>支持 WebVTT 字幕。要添加字幕轨道，请检查 HTML 中是否有 <track> 元素。确保验证你的字幕文件。</p><h4><span id="javascript">JavaScript</span></h4><h5><span id="初始化">初始化</span></h5><p>默认情况下，setup() 将查找所有 <code>&lt;video&gt; ，&lt;audio&gt;</code> 和 <code>[data-type]</code> 元素。查找到的每个目标媒体元素都将被包裹在 <code>&lt;div&gt;</code> 中以添加样式和设置。你可以指定使用 <code>setup()</code>的各种参数，包括不同的节点列表 ，HTML 元素 ，HTML 元素数组或字符串选择器，如下所示：</p><p>传递一个节点列表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plyr.setup(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.js-player'</span>), options);</span><br></pre></td></tr></table></figure><p>传递一个 HTML 元素:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plyr.setup(<span class="built_in">document</span>.querySelector(<span class="string">'.js-player'</span>), options);</span><br></pre></td></tr></table></figure><p>传递一组 HTML 元素数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plyr.setup([</span><br><span class="line">true<span class="built_in">document</span>.querySelector(<span class="string">'.js-player-1'</span>),</span><br><span class="line">true<span class="built_in">document</span>.querySelector(<span class="string">'.js-player-2'</span>)</span><br><span class="line">], options);</span><br></pre></td></tr></table></figure><p>传递一个字符串选择器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plyr.setup(<span class="string">'.js-player'</span>, options);</span><br></pre></td></tr></table></figure><p>节点列表，HTML 元素或字符串选择器可以是目标 <code>&lt;video&gt; ，&lt;audio&gt; 或 [data-type]</code> （嵌入）元素本身或容器元素。</p><p>只传递选项对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plyr.setup(options);</span><br></pre></td></tr></table></figure><p>setup() 将返回一个可以与 API 方法一起使用的实例数组。</p><h4><span id="触摸范围">触摸范围</span></h4><p>一些移动浏览器（特别是 iOS 上的移动 Safari）似乎有与 <code>&lt;input type =&quot;range&quot;&gt;</code>元素有关的问题，触摸轨迹设置的值不起作用，滑动拇指可能会很棘手。为了解决这个问题，我创建了 RangeTouch ，我建议你将它用在你的解决方案中。这是一个很小的脚本，对于触摸设备上的用户来说，这是非常有益的。</p><h2><span id="api">API</span></h2><p>访问 plyr 实例的最简单方法是将调用的返回值存储到 setup() 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players = plyr.setup(<span class="string">'.js-player'</span>);</span><br></pre></td></tr></table></figure><p>这将返回所有被初始化的实例数组。另一种方法是使用 plyr.get() 获取给定容器中的所有实例，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players = plyr.get(<span class="string">'.js-player'</span>);</span><br></pre></td></tr></table></figure><p>如果没有参数被传递，它将在当前文档中查找所有实例。这将返回给定选择器中找到的所有实例的数组。</p><p>最后一个选项是通过事件处理程序访问实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">instance.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = event.detail.plyr;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Plyr 是一个简单的可定制的 HTML5 媒体播放器，使用原生 JavaScript 没有其他依赖。支持 YouTube 和 Vimeo 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;span id=&quot;特性&quot;&gt;特性&lt;/spa
      
    
    </summary>
    
    
    
      <category term="播放器" scheme="https://cl9000.github.io/tags/%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    
      <category term="HTML5播放器" scheme="https://cl9000.github.io/tags/HTML5%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    
      <category term="Plyr" scheme="https://cl9000.github.io/tags/Plyr/"/>
    
  </entry>
  
  <entry>
    <title>Bespoke.js–基于浏览器的演示文稿微框架</title>
    <link href="https://cl9000.github.io/2020/04/02/Bespoke-js%E2%80%93%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF%E5%BE%AE%E6%A1%86%E6%9E%B6/"/>
    <id>https://cl9000.github.io/2020/04/02/Bespoke-js%E2%80%93%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF%E5%BE%AE%E6%A1%86%E6%9E%B6/</id>
    <published>2020-04-02T09:30:33.000Z</published>
    <updated>2021-04-15T09:16:18.499Z</updated>
    
    <content type="html"><![CDATA[<p><strong>好好工作，搞好身体，互相帮助</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Bespoke001.png" alt></p><p><a href="http://markdalgleish.com/projects/bespoke.js/" target="_blank" rel="noopener">Bespoke.js - http://markdalgleish.com/projects/bespoke.js/</a></p><p>Bespoke.js 非常小（压缩后只有1KB），它的核心库提供简单的 API 和 事件管理，其他功能都使用插件（它有自己的插件生态链）来实现。</p><p>官方提供的套件：</p><ul><li><a href="https://github.com/bespokejs/generator-bespoke" target="_blank" rel="noopener">Bespoke.js 生成器 - https://github.com/bespokejs/generator-bespoke</a></li><li><a href="https://github.com/bespokejs/generator-bespokeplugin" target="_blank" rel="noopener">Bespoke.js 插件生成器 - https://github.com/bespokejs/generator-bespokeplugin</a></li><li><a href="https://github.com/bespokejs/generator-bespoketheme" target="_blank" rel="noopener">Bespoke.js 主题生成器 - https://github.com/bespokejs/generator-bespoketheme</a></li></ul><h2><span id="创建演示文稿">创建演示文稿</span></h2><p>由于 Bespoke.js 的高度模块化特性，最快捷的方法是使用 Bespoke.js 生成器，它支持 Gulp 构建系统的样板演示。</p><p>假设您已经安装了 Node.js，新建空白目录：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g generator-bespoke</span><br><span class="line">$ yo bespoke</span><br></pre></td></tr></table></figure><p>在你的新项目中，你可以使用以下 Gulp 任务</p><p>$ gulp serve 运行带有 LiveReload 的预览服务器<br>$ gulp deploy 部署到 GitHub 页面<br>$ gulp 将静态资源编译到 “public” 目录</p><h2><span id="基本用法">基本用法</span></h2><h3><span id="定制加载">定制加载</span></h3><p>Bespoke.js 以 UMD 格式发送，这意味着 bespoke 及其插件可用作 CommonJS / AMD 模块。</p><h3><span id="html">HTML</span></h3><p>你可以使用任意你喜欢的标签，但下面的会更好~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;article id=<span class="string">"presentation"</span>&gt;</span><br><span class="line">  &lt;section&gt;Slide <span class="number">1</span>&lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">  &lt;section&gt;Slide 2&lt;/</span>section&gt;</span><br><span class="line">  &lt;section&gt;Slide <span class="number">3</span>&lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>article&gt;</span><br></pre></td></tr></table></figure><h3><span id="javascript">JavaScript</span></h3><p>要创建新的演示文稿，Bespoke.js 提供了 from(selector[, plugins]) 方法，该方法采用了一个选择器或元素引用和一个插件并返回实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deck = bespoke.from(<span class="string">'#presentation'</span>, [plugins]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next slide</span></span><br><span class="line">deck.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Previous slide</span></span><br><span class="line">deck.prev();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go to a specific slide</span></span><br><span class="line">deck.slide(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the active slide index</span></span><br><span class="line">deck.slide(); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>默认情况下，解析的父元素的所有非脚本子元素都将成为幻灯片。</p><h2><span id="插件">插件</span></h2><p>所有官方插件可以从 <code>npm 或 Bower</code> 安装，例如 <code>$ npm install bespoke-keys</code> 或 <code>$ bower install bespoke-touch</code><br>目前官方提供的插件有：键盘和遥控器交互，触摸交互，动画项目符号列表，响应式幻灯片缩放尺寸，背景为动画背景元素，进度条进度，循环演示，录制和播放 vcr 等。更多内容请查阅官方资料。</p><h2><span id="主题演示">主题演示</span></h2><p>使用键盘 “左” “右” 键切换幻灯片。</p><ul><li><a href="https://bespokejs.github.io/bespoke-theme-cube/" target="_blank" rel="noopener">Cube - https://bespokejs.github.io/bespoke-theme-cube/</a></li><li><a href="https://bespokejs.github.io/bespoke-theme-voltaire/" target="_blank" rel="noopener">Voltaire - https://bespokejs.github.io/bespoke-theme-voltaire/</a></li><li><a href="https://bespokejs.github.io/bespoke-theme-nebula/" target="_blank" rel="noopener">Nebula - https://bespokejs.github.io/bespoke-theme-nebula/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;好好工作，搞好身体，互相帮助&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Bespoke001.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href
      
    
    </summary>
    
    
    
      <category term="Bespoke.js" scheme="https://cl9000.github.io/tags/Bespoke-js/"/>
    
      <category term="Bespokejs" scheme="https://cl9000.github.io/tags/Bespokejs/"/>
    
      <category term="演示文稿微框架" scheme="https://cl9000.github.io/tags/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF%E5%BE%AE%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Driver.js–页面分步引导</title>
    <link href="https://cl9000.github.io/2020/04/01/Driver-js%E2%80%93%E9%A1%B5%E9%9D%A2%E5%88%86%E6%AD%A5%E5%BC%95%E5%AF%BC/"/>
    <id>https://cl9000.github.io/2020/04/01/Driver-js%E2%80%93%E9%A1%B5%E9%9D%A2%E5%88%86%E6%AD%A5%E5%BC%95%E5%AF%BC/</id>
    <published>2020-04-01T07:49:13.000Z</published>
    <updated>2021-04-15T09:15:57.690Z</updated>
    
    <content type="html"><![CDATA[<p><strong>好好工作，搞好身体，互相帮助 —</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/driverjs001.png" alt></p><p>一个轻量级(约4kb gzip)但强大的JavaScript引擎，帮助您驱动用户的注意力在页面上。</p><p>一些示例用例可以创建强大的特性介绍、动作调用组件、焦点转移器等。</p><p>通过 Driver.js ，你可以突出显示页面上的项目，以吸引用户的注意力。你也可以在网站改版后，使用它来引导用户展示新功能。</p><h4><span id="特色功能"><strong>特色功能：</strong></span></h4><ul><li>突出显示页面上的任何任何项目</li><li>锁定用户交互</li><li>创建功能介绍</li><li>为用户添加聚焦器</li><li>高度可定制 – 可在任何地方使用，可覆盖</li><li>界面友好 – 可通过按键控制</li><li>轻量级 – gzip 压缩后只有约4kb</li><li>在所有主流浏览器中保持一致的行为</li><li>免费用于个人和商业用途</li></ul><h3><span id="安装"><strong>安装</strong></span></h3><p>无论你喜欢哪种方式，你都可以使用 yarn 或 npm 进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add driver.js</span><br><span class="line">npm install driver.js</span><br></pre></td></tr></table></figure><p>或者直接在文件中引入它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/dist/driver.min.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"/dist/driver.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="用法"><strong>用法</strong></span></h3><h4><span id="highlighting-a-single-element-without-popover-突出显示单个元素"><strong>Highlighting a Single Element – Without Popover 突出显示单个元素</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a></p><p>你只需传递选择器即可突出显示单个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver();</span><br><span class="line">driver.highlight(<span class="string">'#create-post'</span>);</span><br></pre></td></tr></table></figure><p>一个实际的例子是：使用它来调暗背景并突出显示所需的元素，例如 Facebook 创建帖子的方式。</p><p>这方面的实际用例可能是当用户与元素交互时突出显示元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> focusDriver = <span class="keyword">new</span> Driver();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Highlight the section on focus</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'creation-input'</span>)</span><br><span class="line">  .addEventListener(<span class="string">'focus'</span>, (e) =&gt; &#123;</span><br><span class="line">    focusDriver.focus(<span class="string">'#creation-input'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>聚焦任何输入，看看它是如何将高亮显示从一个元素移动到另一个元素的<br>你也可以关闭动画或者在角落设置padding。稍后会详细介绍。</p><h4><span id="highlighting-a-single-element-with-popover-突出显示单个元素-弹出窗口"><strong>Highlighting a Single Element – With Popover 突出显示单个元素-弹出窗口</strong></span></h4><p>如果想在突出显示的元素旁边显示一些细节，可以通过指定标题和描述轻松实现<br>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver();</span><br><span class="line">driver.highlight(&#123;</span><br><span class="line">  element: <span class="string">'#some-element'</span>,</span><br><span class="line">  popover: &#123;</span><br><span class="line">    title: <span class="string">'Title for the Popover'</span>,</span><br><span class="line">    description: <span class="string">'Description for it'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你也可以通过一组特定的选项来修改这个弹出窗口的行为。下面有更多的介绍。<br>此外，title 和 description 也可以使用 HTML。</p><h4><span id="popover-positioning-弹出窗口定位"><strong>Popover Positioning 弹出窗口定位</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a></p><p>你也可以改变弹出窗口的位置为<code>left, left-center, left-bottom, top, top-center, top-right, right, right-center, right-bottom或者bottom, bottom-center, bottom-right, mid-center</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver();</span><br><span class="line">driver.highlight(&#123;</span><br><span class="line">  element: <span class="string">'#some-element'</span>,</span><br><span class="line">  popover: &#123;</span><br><span class="line">    title: <span class="string">'Title for the Popover'</span>,</span><br><span class="line">    description: <span class="string">'Description for it'</span>,</span><br><span class="line">    <span class="comment">// position can be left, left-center, left-bottom, top,</span></span><br><span class="line">    <span class="comment">// top-center, top-right, right, right-center, right-bottom,</span></span><br><span class="line">    <span class="comment">// bottom, bottom-center, bottom-right, mid-center</span></span><br><span class="line">    position: <span class="string">'left'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你不指定位置或指定它为自动，它会自动为弹出窗口找到合适的位置并显示它</p><h4><span id="html弹窗-html-in-popovers"><strong>HTML弹窗 HTML in Popovers</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a><br>你也可以在主体中指定HTML或者弹出窗口的标题。下面是一个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver();</span><br><span class="line">driver.highlight(&#123;</span><br><span class="line">  element: <span class="string">'#some-element'</span>,</span><br><span class="line">  popover: &#123;</span><br><span class="line">    title: <span class="string">'&lt;em&gt;An italicized title&lt;/em&gt;'</span>,</span><br><span class="line">    description: <span class="string">'Description may also contain &lt;strong&gt;HTML&lt;/strong&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，它可以是任何有效的HTML。</p><h4><span id="禁用关闭外部单击-disable-close-on-outside-click"><strong>禁用关闭外部单击 Disable Close on Outside Click</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a></p><p>默认情况下，driver.js会被重置，如果用户点击突出显示的元素，你可以禁用这个:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver(&#123;</span><br><span class="line">    allowClose: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">driver.highlight(&#123;</span><br><span class="line">  element: <span class="string">'#some-element'</span>,</span><br><span class="line">  popover: &#123;</span><br><span class="line">    title: <span class="string">'&lt;em&gt;An italicized title&lt;/em&gt;'</span>,</span><br><span class="line">    description: <span class="string">'Description may also contain &lt;strong&gt;HTML&lt;/strong&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你使用这个选项，对于多步骤驱动程序，它会在你完成弹出窗口后关闭，或者你可以通过编程关闭它。对于单个元素弹窗，你需要正确地关闭它，否则它不会被关闭</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.reset()</span><br></pre></td></tr></table></figure><h4><span id="creating-feature-introductions-创建功能介绍"><strong>Creating Feature Introductions 创建功能介绍</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a><br>您还可以进行功能强大的特性介绍，以指导用户了解这些特性。只需提供一个步骤数组，其中每个步骤指定要突出显示的元素。</p><p>下面是一个简单的例子，告诉你如何结合介绍中的步骤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver();</span><br><span class="line"><span class="comment">// Define the steps for introduction</span></span><br><span class="line">driver.defineSteps([</span><br><span class="line">  &#123;</span><br><span class="line">    element: <span class="string">'#first-element-introduction'</span>,</span><br><span class="line">    popover: &#123;</span><br><span class="line">      className: <span class="string">'first-step-popover-class'</span>,</span><br><span class="line">      title: <span class="string">'Title on Popover'</span>,</span><br><span class="line">      description: <span class="string">'Body of the popover'</span>,</span><br><span class="line">      position: <span class="string">'left'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    element: <span class="string">'#second-element-introduction'</span>,</span><br><span class="line">    popover: &#123;</span><br><span class="line">      title: <span class="string">'Title on Popover'</span>,</span><br><span class="line">      description: <span class="string">'Body of the popover'</span>,</span><br><span class="line">      position: <span class="string">'top'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    element: <span class="string">'#third-element-introduction'</span>,</span><br><span class="line">    popover: &#123;</span><br><span class="line">      title: <span class="string">'Title on Popover'</span>,</span><br><span class="line">      description: <span class="string">'Body of the popover'</span>,</span><br><span class="line">      position: <span class="string">'right'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Start the introduction</span></span><br><span class="line">driver.start();</span><br></pre></td></tr></table></figure><p>这只是特性介绍的一个快速示例。想要更丰富的体验，请浏览<a href>&quot;Quick Tour&quot;</a></p><p>你也可以关闭弹出窗口中的页脚按钮，在这种情况下，用户可以使用键盘上的箭头键来控制弹出窗口。或者您可以使用驱动程序提供的方法来控制它。</p><h4><span id="without-overlay-没有覆盖叠加"><strong>Without Overlay 没有覆盖叠加</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a><br>你也可以创建特性介绍和做上面列出的所有事情而不需要叠加。你所要做的就是将不透明度设置为0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver(&#123;</span><br><span class="line">    opacity: <span class="number">0</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">driver.highlight(&#123;</span><br><span class="line">  element: <span class="string">'#run-element-without-popover'</span>,</span><br><span class="line">  popover: &#123;</span><br><span class="line">    title: <span class="string">'Title for the Popover'</span>,</span><br><span class="line">    description: <span class="string">'Description for it'</span>,</span><br><span class="line">    position: <span class="string">'top'</span>, <span class="comment">// can be `top`, `left`, `right`, `bottom`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你也可以对功能介绍做同样的事情</p><h4><span id="更多"><strong>更多</strong></span></h4><p>Driver Definition</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver(&#123;</span><br><span class="line">  className: <span class="string">'scoped-class'</span>, <span class="comment">// className to wrap driver.js popover</span></span><br><span class="line">  animate: <span class="literal">true</span>,  <span class="comment">// Animate while changing highlighted element</span></span><br><span class="line">  opacity: <span class="number">0.75</span>,  <span class="comment">// Background opacity (0 means only popovers and without overlay)</span></span><br><span class="line">  padding: <span class="number">10</span>,    <span class="comment">// Distance of element from around the edges</span></span><br><span class="line">  allowClose: <span class="literal">true</span>, <span class="comment">// Whether clicking on overlay should close or not</span></span><br><span class="line">  overlayClickNext: <span class="literal">false</span>, <span class="comment">// Should it move to next step on overlay click</span></span><br><span class="line">  doneBtnText: <span class="string">'Done'</span>, <span class="comment">// Text on the final button</span></span><br><span class="line">  closeBtnText: <span class="string">'Close'</span>, <span class="comment">// Text on the close button for this step</span></span><br><span class="line">  nextBtnText: <span class="string">'Next'</span>, <span class="comment">// Next button text for this step</span></span><br><span class="line">  prevBtnText: <span class="string">'Previous'</span>, <span class="comment">// Previous button text for this step</span></span><br><span class="line">  showButtons: <span class="literal">false</span>, <span class="comment">// Do not show control buttons in footer</span></span><br><span class="line">  keyboardControl: <span class="literal">true</span>, <span class="comment">// Allow controlling through keyboard (escape to close, arrow keys to move)</span></span><br><span class="line">  scrollIntoViewOptions: &#123;&#125;, <span class="comment">// We use `scrollIntoView()` when possible, pass here the options for it if you want any</span></span><br><span class="line">  onHighlightStarted: (Element) &#123;&#125;, <span class="comment">// Called when element is about to be highlighted</span></span><br><span class="line">  onHighlighted: (Element) &#123;&#125;, <span class="comment">// Called when element is fully highlighted</span></span><br><span class="line">  onDeselected: (Element) &#123;&#125;, <span class="comment">// Called when element has been deselected</span></span><br><span class="line">  onReset: (Element) &#123;&#125;,        <span class="comment">// Called when overlay is about to be cleared</span></span><br><span class="line">  onNext: <span class="function">(<span class="params">Element</span>) =&gt;</span> &#123;&#125;,      <span class="comment">// Called when moving to next step on any step</span></span><br><span class="line">  onPrevious: <span class="function">(<span class="params">Element</span>) =&gt;</span> &#123;&#125;,  <span class="comment">// Called when moving to next step on any step</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请注意，您在驱动程序定义中提供的所有按钮选项都可以通过在步骤定义中提供它们来为特定的步骤覆盖</p><p>步骤定义<br>这里有一组选项，你可以在每个步骤中传递，即步骤数组中的一个项目或你传递给highlight方法的对象</p><pre><code class="language-js">const stepDefinition = {  element: '#some-item',        // Query selector string or Node to be highlighted  popover: {                    // There will be no popover if empty or not given    className: 'popover-class', // className to wrap this specific step popover in addition to the general className in Driver options    title: 'Title',             // Title on the popover    description: 'Description', // Body of the popover    showButtons: false,         // Do not show control buttons in footer    closeBtnText: 'Close',      // Text on the close button for this step    nextBtnText: 'Next',        // Next button text for this step    prevBtnText: 'Previous',    // Previous button text for this step  }</code></pre><p>您可以使用多种选项来实现您想要的任何目标。我有一些进一步改进它的计划，确保关注<a href="https://github.com/kamranahmedse/driver.js" target="_blank" rel="noopener">GitHub page - https://github.com/kamranahmedse/driver.js</a>页面</p><h3><span id="参考地址">参考地址</span></h3><p>github：<a href="https://github.com/kamranahmedse/driver.js" target="_blank" rel="noopener">https://github.com/kamranahmedse/driver.js</a><br>用法和用例介绍：<a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">https://kamranahmed.info/driver.js/</a><br>简单的安装使用介绍（中文，非官方）：<a href="http://f2ex.cn/driver-js/" target="_blank" rel="noopener">http://f2ex.cn/driver-js/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;好好工作，搞好身体，互相帮助 —&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/driverjs001.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;一个轻量
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="Driver.js" scheme="https://cl9000.github.io/tags/Driver-js/"/>
    
      <category term="Driverjs" scheme="https://cl9000.github.io/tags/Driverjs/"/>
    
      <category term="前端引导页" scheme="https://cl9000.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%95%E5%AF%BC%E9%A1%B5/"/>
    
      <category term="分布式引导" scheme="https://cl9000.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%95%E5%AF%BC/"/>
    
  </entry>
  
  <entry>
    <title>【译文】你可能不知道你可以用Chrome的开发者控制台做的事情</title>
    <link href="https://cl9000.github.io/2020/04/01/%E3%80%90%E8%AF%91%E6%96%87%E3%80%91%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BD%A0%E5%8F%AF%E4%BB%A5%E7%94%A8Chrome%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <id>https://cl9000.github.io/2020/04/01/%E3%80%90%E8%AF%91%E6%96%87%E3%80%91%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BD%A0%E5%8F%AF%E4%BB%A5%E7%94%A8Chrome%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/</id>
    <published>2020-04-01T03:03:25.000Z</published>
    <updated>2021-04-15T09:15:41.470Z</updated>
    
    <content type="html"><![CDATA[<p>做任何事情，先模仿，再创新，会更快成功 –<cl9000></cl9000></p><blockquote><p>译者：cl9000<br>原文：<a href="https://medium.freecodecamp.org/10-tips-to-maximize-your-javascript-debugging-experience-b69a75859329" target="_blank" rel="noopener">https://medium.freecodecamp.org/10-tips-to-maximize-your-javascript-debugging-experience-b69a75859329</a></p></blockquote><p>Chrome自带内置的开发工具。它具有各种各样的特性，比如元素、网络和安全性。今天，我们将100%关注它的JavaScript控制台。</p><p>当我开始编码时，我只使用JavaScript控制台来记录值，比如来自服务器的响应或变量的值。但随着时间的推移，在教程的帮助下，我发现主机的功能远比我想象的要多。</p><p>你可以用它来做一些有用的事情。如果你正在用桌面的Chrome(或其他任何浏览器)阅读这篇文章，你甚至可以打开它的开发人员工具，立即试用。</p><ol><li>选择DOM元素<br>如果你熟悉jQuery，你就会知道 $(’ .class ‘) 和 $(’ #id ') 选择器有多重要。它们根据与之关联的类或ID选择DOM元素。</li></ol><p>但是，如果不能在DOM中访问jQuery，仍然可以在开发人员控制台中进行同样的操作。</p><p>$(’ tagName ‘) $(’ .class ‘) $(’ #id ‘) 和 $(’ .class #id ‘)等价于文档。querySelector(’ ')。这将返回DOM中与选择器匹配的第一个元素。</p><p>可以使用$$(’ tagName ‘)或$$(’ .class ')——注意有两个美元符号——根据特定的选择器来选择DOM中的所有元素。这也将它们放入一个数组中。通过指定元素在数组中的位置，您可以继续选择其中的特定元素。</p><p>例如，$$(’ .className ‘)会给你className类的所有元素，$$(’ .className ‘)[0]和$$(’ .className ')[1]会分别给你第一个和第二个元素。</p><ol start="2"><li>将浏览器转换为编辑器<br>您有多少次想过是否可以在浏览器本身编辑一些文本?答案是肯定的，您可以将浏览器转换为文本编辑器。您可以在DOM的任何地方添加文本或删除文本。</li></ol><p>您不必再检查元素和编辑HTML了。相反，进入开发人员控制台并输入以下内容:</p><p><code>document.body.contentEditable=true</code></p><p>这将使内容可编辑。现在几乎可以编辑DOM中的任何内容。</p><p>3.查找与DOM中的元素相关联的事件<br>在调试时，您必须对找到绑定到DOM中某个元素的事件侦听器感兴趣。开发人员控制台使查找这些文件变得更容易。</p><p>getEventListeners($(’ selector '))返回一个对象数组，其中包含绑定到该元素的所有事件。您可以展开对象来查看事件:</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/640.png" alt></p><p>要找到特定事件的监听器，你可以这样做:<br>getEventListeners($(‘selector’)).eventName[0].listener<br>这将显示与特定事件关联的侦听器。这里的eventName[0]是一个数组，它列出了一个特定事件的所有事件。例如:<br>getEventListeners($(‘firstName’)).click[0].listener<br>…将显示与ID为’ firstName '的元素的单击事件相关联的监听器。</p><ol start="4"><li>监控事件<br>如果您想要监视在执行时绑定到DOM中特定元素的事件，也可以在控制台中执行。你可以使用不同的命令来监视这些事件的一部分或全部:</li></ol><p>monitorEvents($(’ selector ‘))将监视与选择器元素相关的所有事件，一旦它们被触发，就会在控制台中记录下来。例如，monitorEvents($(’ #firstName ‘))将记录所有绑定到ID为’ firstName ‘的元素的事件。<br>monitorEvents($(’ selector ')， ’ eventName ‘)将记录与元素绑定的特定事件。您可以将事件名称作为参数传递给函数。这将只记录绑定到特定元素的特定事件。例如，monitorEvents($(’ #firstName ‘)， ’ click ‘)将记录绑定到ID为’ firstName ‘的元素的所有点击事件。<br>monitorEvents($(’ selector ‘)，[’ eventName1 ‘， ’ eventName3’，…])将根据您自己的需求记录多个事件。与其将单个事件名称作为参数传递，不如传递包含所有事件的字符串数组。例如，monitorEvents($(’ #firstName ‘)，[’ click '， ’ focus ‘])将记录绑定到ID为’ firstName ‘的元素的点击事件和焦点事件。<br>unmonitorEvents($(’ selector ')):这将停止监控和记录控制台中的事件。</p><ol start="5"><li>找出代码块的执行时间<br>JavaScript控制台有一个名为console.time(’ labelName ‘)的基本函数，它接受一个标签名称作为参数，然后启动计时器。还有另一个名为console.timeEnd(’ labelName ')的基本函数，它也接受一个标签名，并结束与该特定标签关联的计时器。<br>例如:</li></ol><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">time</span>(<span class="symbol">'myTime</span>'); //Starts the timer <span class="keyword">with</span> <span class="keyword">label</span> - myTimeconsole.timeEnd(<span class="symbol">'myTime</span>'); //Ends the timer <span class="keyword">with</span> <span class="keyword">Label</span> - myTime//Output: myTime:<span class="number">123.00</span> ms</span><br></pre></td></tr></table></figure><p>上面的两行代码给出了从开始计时器到结束计时器所花费的时间。</p><p>我们可以对其进行改进，以计算执行一个代码块所需的时间。</p><p>例如，假设我想找出执行一个循环所花费的时间。我可以这样做:</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console<span class="meta">.time(</span><span class="string">'myTime'</span>); //Starts the timer with <span class="meta">label</span> - myTimefor(var i=0; i &lt; 100000; i++)&#123;  2+4+5;&#125;console.timeEnd(<span class="string">'mytime'</span>); //Ends the timer with <span class="meta">Label</span> - myTime//<span class="meta">Output</span> - myTime:12345.00 ms</span><br></pre></td></tr></table></figure><ol start="6"><li>将变量的值排列到一个表中<br>假设我们有一个对象数组，如下所示:</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myArray=[&#123;a:<span class="number">1</span>,b:<span class="number">2</span>,c:<span class="number">3</span>&#125;,&#123;a:<span class="number">1</span>,b:<span class="number">2</span>,c:<span class="number">3</span>,d:<span class="number">4</span>&#125;,&#123;k:<span class="number">11</span>,f:<span class="number">22</span>&#125;,&#123;a:<span class="number">1</span>,b:<span class="number">2</span>,c:<span class="number">3</span>&#125;]</span><br></pre></td></tr></table></figure><p>当我们在控制台中输入变量名时，它会以对象数组的形式为我们提供值。这很有帮助。您可以展开对象并查看值。</p><p>但当性质增加时，这就很难理解了。因此，为了得到变量的清晰表示，我们可以将它们显示在一个表中。</p><p>table(variableName)在一个表格结构中表示变量及其所有属性。这看起来是这样的:</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/640-2.png" alt></p><ol start="7"><li><p>检查DOM中的元素<br>你可以直接从控制台检查一个元素:<br>inspect($(‘选择器’))将检查匹配选择器的元素，并带你到Chrome开发者工具的元素标签。例如inspect($(’ #firstName ‘))将检查ID为’ firstName ‘的元素，inspect($(’ a ')[3])将检查DOM中的第4个锚元素。<br>$0、$1、$2等可以帮助您获取最近检查的元素。例如，$0给出最后检查的DOM元素，而$1给出第二个最后检查的DOM元素。</p></li><li><p>列出元素的属性<br>如果您想列出一个元素的所有属性，您可以直接从控制台中完成。</p></li></ol><p>dir($(’ selector '))返回一个对象，其中包含与其DOM元素相关的所有属性。您可以展开它们以查看更详细的信息。</p><ol start="9"><li>检索上一个结果的值<br>你可以把控制台当作计算器使用。当你这样做的时候，你可能需要在第一次计算之后进行第二次计算。下面是如何从内存中检索先前计算的结果:<br><code>$_</code><br>这看起来是这样的:</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>+<span class="number">3</span>+<span class="number">49</span> <span class="regexp">//</span>- The Answer of the SUM is <span class="number">9</span><span class="variable">$_9</span> <span class="regexp">//</span> Gives the last Result<span class="variable">$_</span> * <span class="variable">$_81</span>  <span class="regexp">//</span> As the last Result was <span class="number">9</span>Math.sqrt(<span class="variable">$_</span>)<span class="number">9</span> <span class="regexp">//</span> As the last Result was <span class="number">81</span><span class="variable">$_9</span> <span class="regexp">//</span> As the Last Result is <span class="number">9</span></span><br></pre></td></tr></table></figure><ol start="10"><li>清除控制台和内存<br>如果你想清除控制台和它的内存，只需输入:<br><code>clear()</code><br>然后按回车键。就是这样。</li></ol><p>这些只是你可以用Chrome的JavaScript控制台做的几个例子。我希望这些建议能让你的生活更轻松。</p><p>感谢你的阅读。如果你喜欢这篇文章，请点击下面的按钮把它推荐给其他人。你可以找到更多关于我的信息，或者在Twitter上关注我，这里是Medium(<a href="https://medium.com/" target="_blank" rel="noopener">https://medium.com/</a>)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做任何事情，先模仿，再创新，会更快成功 –&lt;cl9000&gt;&lt;/cl9000&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者：cl9000&lt;br&gt;
原文：&lt;a href=&quot;https://medium.freecodecamp.org/10-tips-to-maximize-
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="chrome" scheme="https://cl9000.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>值得收藏的[CSS]形状</title>
    <link href="https://cl9000.github.io/2020/03/30/%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F%E7%9A%84-CSS-%E5%BD%A2%E7%8A%B6/"/>
    <id>https://cl9000.github.io/2020/03/30/%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F%E7%9A%84-CSS-%E5%BD%A2%E7%8A%B6/</id>
    <published>2020-03-30T08:54:08.000Z</published>
    <updated>2021-03-30T13:05:16.606Z</updated>
    
    <content type="html"><![CDATA[<p>译者：cl9000</p><p>原文：<a href="https://css-tricks.com/the-shapes-of-css/" target="_blank" rel="noopener">https://css-tricks.com/the-shapes-of-css/</a></p><p>CSS能够制作各种形状。方形和长方形很简单，因为它们是网的自然形状。添加宽度和高度，你就有了你需要的确切大小的矩形。添加边界半径，你可以圆形的形状，和足够的它，你可以把这些矩形变成圆形和椭圆形。</p><p>我们还在CSS中获得了::before和::after伪元素，这使我们可以向原始元素添加两个形状。通过巧妙地使用定位、转换和许多其他技巧，我们可以只用一个HTML元素在CSS中创建许多形状。</p><blockquote><p>These days, you’re best bet for drawing shapes is either SVG or using a clip-path in CSS, which is SVG-like (and can reference SVG). For example, look at these SVG icon sets, or this clip-path editor. This article was written originally before either of these technologies really took hold!</p></blockquote><p>【译文】虽然我们现在大都使用字体图标或者svg图片，似乎使用 CSS 来做图标意义不是很大，但怎么实现这些图标用到的一些技巧及思路是很值得我们的学习。</p><p></p><h3><span id="矩形rectangle-shape">矩形（Rectangle Shape）</span></h3><p></p><div id="rectangle"></div><style contenteditable>    #rectangle {        width: 200px;        height: 100px;        background: red;    }</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#rectangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="圆形circle-shape">圆形（Circle Shape）</span></h3><div id="circle"></div><style contenteditable>#circle {    width: 100px;    height: 100px;    background: red;    border-radius: 50%}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#circle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="椭圆形oval-shape">椭圆形（Oval Shape）</span></h3><div id="oval"></div><style contenteditable>#oval {    width: 200px;    height: 100px;    background: red;    border-radius: 100px / 50px;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#oval</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100px</span> / <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="上三角形triangle-up-shape">上三角形（Triangle Up Shape）</span></h3><div id="triangle-up"></div><style contenteditable>#triangle-up {    width: 0;    height: 0;    border-left: 50px solid transparent;    border-right: 50px solid transparent;    border-bottom: 100px solid red;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-up</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="下三角形-triangle-down-shape">下三角形 （Triangle Down Shape）</span></h3><div id="triangle-down"></div><style contenteditable>#triangle-down {    width: 0;    height: 0;    border-left: 50px solid transparent;    border-right: 50px solid transparent;    border-top: 100px solid red;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-up</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="左三角形-triangle-left-shape">左三角形 （Triangle Left Shape）</span></h3><div id="triangle-left"></div><style contenteditable>#triangle-left {    width: 0;    height: 0;    border-top: 50px solid transparent;    border-right: 100px solid red;    border-bottom: 50px solid transparent;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="右三角形-triangle-right-shape">右三角形 （Triangle Right Shape）</span></h3><div id="triangle-right"></div><style contenteditable>#triangle-right {    width: 0;    height: 0;    border-top: 50px solid transparent;    border-left: 100px solid red;    border-bottom: 50px solid transparent;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="左上角三角形-triangle-top-left-shape">左上角三角形 （Triangle Top Left Shape）</span></h3><div id="triangle-topleft"></div><style contenteditable>#triangle-topleft {    width: 0;    height: 0;    border-top: 100px solid red;    border-right: 100px solid transparent;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-topleft</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="右上角三角形-triangle-top-right-shape">右上角三角形 （Triangle Top Right Shape）</span></h3><div id="triangle-topright"></div><style contenteditable>#triangle-topright {    width: 0;    height: 0;    border-top: 100px solid red;    border-left: 100px solid transparent;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-topright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="左下角三角形-triangle-bottom-left-shape">左下角三角形 （Triangle Bottom Left Shape）</span></h3><div id="triangle-bottomleft"></div><style contenteditable>#triangle-bottomleft {    width: 0;    height: 0;    border-bottom: 100px solid red;    border-right: 100px solid transparent;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-bottomleft</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="右下角三角形-triangle-bottom-right-shape">右下角三角形 （Triangle Bottom Right Shape）</span></h3><div id="triangle-bottomright"></div><style contenteditable>#triangle-bottomright {    width: 0;    height: 0;    border-bottom: 100px solid red;    border-left: 100px solid transparent;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-bottomright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="弯尾箭形-curved-tail-arrow-shape">弯尾箭形 （Curved Tail Arrow Shape）</span></h3><div id="curvedarrow"></div><style contenteditable>    #curvedarrow {      position: relative;      width: 0;      height: 0;      border-top: 9px solid transparent;      border-right: 9px solid red;      transform: rotate(10deg);    }    #curvedarrow:after {      content: "";      position: absolute;      border: 0 solid transparent;      border-top: 3px solid red;      border-radius: 20px 0 0 0;      top: -12px;      left: -9px;      width: 12px;      height: 12px;      transform: rotate(45deg);    }</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#curvedarrow</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">9px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">9px</span> solid red;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">10deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#curvedarrow</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">3px</span> solid red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">9px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="梯形-trapezoid-shape">梯形 （Trapezoid Shape）</span></h3><div id="trapezoid"></div><style contenteditable>#trapezoid {    border-bottom: 100px solid red;    border-left: 25px solid transparent;    border-right: 25px solid transparent;    height: 0;    width: 100px;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#trapezoid</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">25px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">25px</span> solid transparent;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="平行四边-parallelogram-shape">平行四边 （Parallelogram Shape）</span></h3><div id="parallelogram"></div><style contenteditable>#parallelogram {    width: 150px;    height: 100px;    transform: skew(20deg);    background: red;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parallelogram</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">20deg</span>);</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="星6分的形状-star-6-points-shape">星(6分)的形状 （Star (6-points) Shape）</span></h3><div id="star-six"></div><br><style contenteditable>#star-six {    width: 0;    height: 0;    border-left: 50px solid transparent;    border-right: 50px solid transparent;    border-bottom: 100px solid red;    position: relative;}#star-six:after {    width: 0;    height: 0;    border-left: 50px solid transparent;    border-right: 50px solid transparent;    border-top: 100px solid red;    position: absolute;    content: "";    top: 30px;    left: -50px;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parallelogram</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">20deg</span>);</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="星5分的形状-star-5-points-shape">星(5分)的形状 （Star (5-points) Shape）</span></h3><br><div id="star-five"></div><style contenteditable>    #star-five {      margin: 50px 0;      position: relative;      display: block;      color: red;      width: 0px;      height: 0px;      border-right: 100px solid transparent;      border-bottom: 70px solid red;      border-left: 100px solid transparent;      transform: rotate(35deg);    }    #star-five:before {      border-bottom: 80px solid red;      border-left: 30px solid transparent;      border-right: 30px solid transparent;      position: absolute;      height: 0;      width: 0;      top: -45px;      left: -65px;      display: block;      content: '';      transform: rotate(-35deg);    }    #star-five:after {      position: absolute;      display: block;      color: red;      top: 3px;      left: -105px;      width: 0px;      height: 0px;      border-right: 100px solid transparent;      border-bottom: 70px solid red;      border-left: 100px solid transparent;      transform: rotate(-70deg);      content: '';    }</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#star-five</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">70px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">35deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#star-five</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">80px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">30px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">30px</span> solid transparent;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">65px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">35deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#star-five</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">105px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">70px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">70deg</span>);</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="五角大楼的形状-pentagon-shape">五角大楼的形状 （Pentagon Shape）</span></h3><p><br><br></p><div id="pentagon"></div><style contenteditable>#pentagon {    position: relative;    width: 54px;    box-sizing: content-box;    border-width: 50px 18px 0;    border-style: solid;    border-color: red transparent;}#pentagon:before {    content: "";    position: absolute;    height: 0;    width: 0;    top: -85px;    left: -18px;    border-width: 0 45px 35px;    border-style: solid;    border-color: transparent transparent red;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parallelogram</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">20deg</span>);</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="六边形的形状-hexagon-shape">六边形的形状 （Hexagon Shape）</span></h3><br><div id="hexagon"></div><br><style contenteditable>#hexagon {  width: 100px;  height: 57.735px;  background: red;  position: relative;}#hexagon::before {  content: "";  position: absolute;  top: -28.8675px;  left: 0;  width: 0;  height: 0;  border-left: 50px solid transparent;  border-right: 50px solid transparent;  border-bottom: 28.8675px solid red;}#hexagon::after {  content: "";  position: absolute;  bottom: -28.8675px;  left: 0;  width: 0;  height: 0;  border-left: 50px solid transparent;  border-right: 50px solid transparent;  border-top: 28.8675px solid red;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parallelogram</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">20deg</span>);</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="八角形状-octagon-shape">八角形状 （Octagon Shape）</span></h3><div id="octagon"></div><style contenteditable>#octagon {    width: 100px;    height: 100px;    background: red;    position: relative;}#octagon:before {    content: "";    width: 100px;    height: 0;    position: absolute;    top: 0;    left: 0;    border-bottom: 29px solid red;    border-left: 29px solid #eee;    border-right: 29px solid #eee;}#octagon:after {    content: "";    width: 100px;    height: 0;    position: absolute;    bottom: 0;    left: 0;    border-top: 29px solid red;    border-left: 29px solid #eee;    border-right: 29px solid #eee;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#octagon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#octagon</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">29px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">29px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">29px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#octagon</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">29px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">29px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">29px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="心形-heart-shape">心形 （Heart Shape）</span></h3><div id="heart"></div><style contenteditable>#heart {    position: relative;    width: 100px;    height: 90px;}#heart:before,#heart:after {    position: absolute;    content: "";    left: 50px;    top: 0;    width: 50px;    height: 80px;    background: red;    border-radius: 50px 50px 0 0;    transform: rotate(-45deg);    transform-origin: 0 100%;}#heart:after {    left: 0;    transform: rotate(45deg);    transform-origin: 100% 100%;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#heart</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">90px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="形状-infinity-shape">∞形状 （Infinity Shape ）</span></h3><div id="infinity"></div><style contenteditable>#infinity {    position: relative;    width: 212px;    height: 100px;    box-sizing: content-box;}#infinity:before,#infinity:after {    content: "";    box-sizing: content-box;    position: absolute;    top: 0;    left: 0;    width: 60px;    height: 60px;    border: 20px solid red;    border-radius: 50px 50px 0 50px;    transform: rotate(-45deg);}#infinity:after {    left: auto;    right: 0;    border-radius: 50px 50px 50px 0;    transform: rotate(45deg);}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#infinity</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">212px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#infinity</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#infinity</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">20px</span> solid red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#infinity</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: auto;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="钻石广场形状-diamond-square-shape">钻石广场形状 （Diamond Square Shape）</span></h3><div id="diamond"></div><style contenteditable>#diamond {    width: 0;    height: 0;    border: 50px solid transparent;    border-bottom-color: red;    position: relative;    top: -50px;}#diamond:after {    content: '';    position: absolute;    left: -50px;    top: 50px;    width: 0;    height: 0;    border: 50px solid transparent;    border-top-color: red;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#diamond</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#diamond</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="钻石盾牌形状-diamond-shield-shape">钻石盾牌形状 （Diamond Shield Shape）</span></h3><div id="diamond-shield"></div><style contenteditable>#diamond-shield {    width: 0;    height: 0;    border: 50px solid transparent;    border-bottom: 20px solid red;    position: relative;    top: -50px;}#diamond-shield:after {    content: '';    position: absolute;    left: -50px;    top: 20px;    width: 0;    height: 0;    border: 50px solid transparent;    border-top: 70px solid red;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#diamond-shield</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">20px</span> solid red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#diamond-shield</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">70px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="钻石狭窄的形状-diamond-narrow-shape">钻石狭窄的形状 （Diamond Narrow Shape）</span></h3><div id="diamond-narrow"></div><style contenteditable>#diamond-narrow {    width: 0;    height: 0;    border: 50px solid transparent;    border-bottom: 70px solid red;    position: relative;    top: -50px;}#diamond-narrow:after {    content: '';    position: absolute;    left: -50px;    top: 70px;    width: 0;    height: 0;    border: 50px solid transparent;    border-top: 70px solid red;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#diamond-narrow</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">70px</span> solid red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#diamond-narrow</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">70px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="切割钻石形状-cut-diamond-shape">切割钻石形状 （Cut Diamond Shape）</span></h3><div id="cut-diamond"></div><style contenteditable>#cut-diamond {    border-style: solid;    border-color: transparent transparent red transparent;    border-width: 0 25px 25px 25px;    height: 0;    width: 50px;    box-sizing: content-box;    position: relative;    margin: 20px 0 50px 0;}#cut-diamond:after {    content: "";    position: absolute;    top: 25px;    left: -25px;    width: 0;    height: 0;    border-style: solid;    border-color: red transparent transparent transparent;    border-width: 70px 50px 0 50px;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#cut-diamond</span> &#123;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">25px</span> <span class="number">25px</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">50px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#cut-diamond</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-color</span>: red transparent transparent transparent;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">70px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="鸡蛋的形状-egg-shape">鸡蛋的形状 （Egg Shape）</span></h3><div id="egg"></div><style contenteditable>#egg {    display: block;    width: 126px;    height: 180px;    background-color: red;    border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#egg</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">126px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span> <span class="number">50%</span> <span class="number">50%</span> <span class="number">50%</span> / <span class="number">60%</span> <span class="number">60%</span> <span class="number">40%</span> <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="吃豆人的形状-pac-man-shape">吃豆人的形状 （Pac-Man Shape）</span></h3><div id="pacman"></div><style contenteditable>#pacman {    width: 0px;    height: 0px;    border-right: 60px solid transparent;    border-top: 60px solid red;    border-left: 60px solid red;    border-bottom: 60px solid red;    border-top-left-radius: 60px;    border-top-right-radius: 60px;    border-bottom-left-radius: 60px;    border-bottom-right-radius: 60px;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pacman</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">60px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">60px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">60px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">60px</span> solid red;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="谈论泡沫形状-talk-bubble-shape">谈论泡沫形状 （Talk Bubble Shape）</span></h3><div id="talkbubble"></div><style contenteditable>#talkbubble {    width: 120px;    height: 80px;    background: red;    position: relative;    -moz-border-radius: 10px;    -webkit-border-radius: 10px;    border-radius: 10px;}#talkbubble:before {    content: "";    position: absolute;    right: 100%;    top: 26px;    width: 0;    height: 0;    border-top: 13px solid transparent;    border-right: 26px solid red;    border-bottom: 13px solid transparent;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#talkbubble</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#talkbubble</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">13px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">26px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">13px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="rss提要的形状-rss-feed-shape">RSS提要的形状 （RSS Feed Shape）</span></h3><div id="rss"></div><style contenteditable>#rss {    width: 20em;    height: 20em;    border-radius: 3em;    background-color: #ff0000;    font-size: 14px;  }#rss:before {    content: '';    z-index: 1;    display: block;    height: 5em;    width: 5em;    background: #fff;    border-radius: 50%;    position: relative;    top: 11.5em;    left: 3.5em;  }#rss:after {    content: '';    display: block;    background: #ff0000;    width: 13em;    height: 13em;    top: -2em;    left: 3.8em;    border-radius: 2.5em;    position: relative;    box-shadow:      -2em 2em 0 0 #fff inset,      -4em 4em 0 0 #ff0000 inset,      -6em 6em 0 0 #fff inset}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#rss</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20em</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-id">#rss</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5em</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">11.5em</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">3.5em</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-id">#rss</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">13em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">13em</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">3.8em</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2.5em</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">box-shadow</span>:</span><br><span class="line">      -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#fff</span> inset,</span><br><span class="line">      -<span class="number">4em</span> <span class="number">4em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#ff0000</span> inset,</span><br><span class="line">      -<span class="number">6em</span> <span class="number">6em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#fff</span> inset</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="12点爆破形状-12-point-burst-shape">12点爆破形状 （12 Point Burst Shape）</span></h3><div id="burst-12"></div><style contenteditable>#burst-12 {    background: red;    width: 80px;    height: 80px;    position: relative;    text-align: center;}#burst-12:before,#burst-12:after {    content: "";    position: absolute;    top: 0;    left: 0;    height: 80px;    width: 80px;    background: red;}#burst-12:before {    transform: rotate(30deg);}#burst-12:after {    transform: rotate(60deg);}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#burst-12</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#burst-12</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#burst-12</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#burst-12</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#burst-12</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="8点爆破形状-8-point-burst-shape">8点爆破形状 （8 Point Burst Shape）</span></h3><div id="burst-8"></div><style contenteditable>#burst-8 {    background: red;    width: 80px;    height: 80px;    position: relative;    text-align: center;    transform: rotate(20deg);}#burst-8:before {    content: "";    position: absolute;    top: 0;    left: 0;    height: 80px;    width: 80px;    background: red;    transform: rotate(135deg);}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#burst-8</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#burst-8</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">135deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="阴阳形状太极-yin-yang-shape">阴阳形状/太极 （Yin Yang Shape）</span></h3><div id="yin-yang"></div><style contenteditable>#yin-yang {    width: 96px;    box-sizing: content-box;    height: 48px;    background: #eee;    border-color: red;    border-style: solid;    border-width: 2px 2px 50px 2px;    border-radius: 100%;    position: relative;}#yin-yang:before {    content: "";    position: absolute;    top: 50%;    left: 0;    background: #eee;    border: 18px solid red;    border-radius: 100%;    width: 12px;    height: 12px;    box-sizing: content-box;}#yin-yang:after {    content: "";    position: absolute;    top: 50%;    left: 50%;    background: red;    border: 18px solid #eee;    border-radius: 100%;    width: 12px;    height: 12px;    box-sizing: content-box;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#yin-yang</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">96px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: red;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">50px</span> <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#yin-yang</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">18px</span> solid red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#yin-yang</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">18px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="徽章丝带形状-badge-ribbon-shape">徽章丝带形状 （Badge Ribbon Shape）</span></h3><div id="badge-ribbon"></div><br><style contenteditable>#badge-ribbon {    position: relative;    background: red;    height: 100px;    width: 100px;    border-radius: 50px;}#badge-ribbon:before,#badge-ribbon:after {    content: '';    position: absolute;    border-bottom: 70px solid red;    border-left: 40px solid transparent;    border-right: 40px solid transparent;    top: 70px;    left: -10px;    transform: rotate(-140deg);}#badge-ribbon:after {    left: auto;    right: -10px;    transform: rotate(140deg);}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#badge-ribbon</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#badge-ribbon</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#badge-ribbon</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">70px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">40px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">40px</span> solid transparent;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">140deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#badge-ribbon</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: auto;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">140deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="太空入侵者的形状-space-invader-shape">太空入侵者的形状 （Space Invader Shape）</span></h3><div id="space-invader"></div><style contenteditable>#space-invader {    box-shadow: 0 0 0 1em red,    0 1em 0 1em red,    -2.5em 1.5em 0 .5em red,    2.5em 1.5em 0 .5em red,    -3em -3em 0 0 red,    3em -3em 0 0 red,    -2em -2em 0 0 red,    2em -2em 0 0 red,    -3em -1em 0 0 red,    -2em -1em 0 0 red,    2em -1em 0 0 red,    3em -1em 0 0 red,    -4em 0 0 0 red,    -3em 0 0 0 red,    3em 0 0 0 red,    4em 0 0 0 red,    -5em 1em 0 0 red,    -4em 1em 0 0 red,    4em 1em 0 0 red,    5em 1em 0 0 red,    -5em 2em 0 0 red,    5em 2em 0 0 red,    -5em 3em 0 0 red,    -3em 3em 0 0 red,    3em 3em 0 0 red,    5em 3em 0 0 red,    -2em 4em 0 0 red,    -1em 4em 0 0 red,    1em 4em 0 0 red,    2em 4em 0 0 red;    background: red;    width: 1em;    height: 1em;    overflow: hidden;    margin: 50px 0 70px 65px;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#space-invader</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1em</span> red,</span><br><span class="line">    <span class="number">0</span> <span class="number">1em</span> <span class="number">0</span> <span class="number">1em</span> red,</span><br><span class="line">    -<span class="number">2.5em</span> <span class="number">1.5em</span> <span class="number">0</span> .<span class="number">5em</span> red,</span><br><span class="line">    <span class="number">2.5em</span> <span class="number">1.5em</span> <span class="number">0</span> .<span class="number">5em</span> red,</span><br><span class="line">    -<span class="number">3em</span> -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">3em</span> -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">3em</span> -<span class="number">1em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">2em</span> -<span class="number">1em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">2em</span> -<span class="number">1em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">3em</span> -<span class="number">1em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">4em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">4em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">5em</span> <span class="number">1em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">4em</span> <span class="number">1em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">4em</span> <span class="number">1em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">5em</span> <span class="number">1em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">5em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">5em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">5em</span> <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">3em</span> <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">3em</span> <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">5em</span> <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">2em</span> <span class="number">4em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    -<span class="number">1em</span> <span class="number">4em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">1em</span> <span class="number">4em</span> <span class="number">0</span> <span class="number">0</span> red,</span><br><span class="line">    <span class="number">2em</span> <span class="number">4em</span> <span class="number">0</span> <span class="number">0</span> red;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">0</span> <span class="number">70px</span> <span class="number">65px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="电视屏幕的形状-tv-screen-shape">电视屏幕的形状 （TV Screen Shape）</span></h3><div id="tv"></div><style contenteditable>#tv {    position: relative;    width: 200px;    height: 150px;    margin: 20px 0;    background: red;    border-radius: 50% / 10%;    color: white;    text-align: center;    text-indent: .1em;}#tv:before {    content: '';    position: absolute;    top: 10%;    bottom: 10%;    right: -5%;    left: -5%;    background: inherit;    border-radius: 5% / 50%;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#tv</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span> / <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-indent</span>: .<span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#tv</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">5%</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">5%</span>;</span><br><span class="line">    <span class="attribute">background</span>: inherit;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5%</span> / <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="雪佛龙的形状-chevron-shape">雪佛龙的形状 （Chevron Shape）</span></h3><br><div id="chevron"></div><style contenteditable>#chevron {    position: relative;    text-align: center;    padding: 12px;    margin-bottom: 6px;    height: 60px;    width: 200px;}#chevron:before {    content: '';    position: absolute;    top: 0;    left: 0;    height: 100%;    width: 51%;    background: red;    transform: skew(0deg, 6deg);}#chevron:after {    content: '';    position: absolute;    top: 0;    right: 0;    height: 100%;    width: 50%;    background: red;    transform: skew(0deg, -6deg);}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#chevron</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#chevron</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">51%</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">0deg</span>, <span class="number">6deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#chevron</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">0deg</span>, -<span class="number">6deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="放大镜的形状-magnifying-glass-shape">放大镜的形状 （Magnifying Glass Shape）</span></h3><div id="magnifying-glass"></div><style contenteditable>#magnifying-glass {    font-size: 10em;    display: inline-block;    width: 0.4em;    box-sizing: content-box;    height: 0.4em;    border: 0.1em solid red;    position: relative;    border-radius: 0.35em;}#magnifying-glass:before {    content: "";    display: inline-block;    position: absolute;    right: -0.25em;    bottom: -0.1em;    border-width: 0;    background: red;    width: 0.35em;    height: 0.08em;    transform: rotate(45deg);}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#magnifying-glass</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10em</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0.4em</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.4em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0.1em</span> solid red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0.35em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#magnifying-glass</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">0.25em</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">0.1em</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0.35em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.08em</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="脸书图标-facebook-icon-shape">脸书图标 （Facebook Icon Shape）</span></h3><div id="facebook-icon"></div><style contenteditable>#facebook-icon {    background: red;    text-indent: -999em;    width: 100px;    height: 110px;    box-sizing: content-box;    border-radius: 5px;    position: relative;    overflow: hidden;    border: 15px solid red;    border-bottom: 0;}#facebook-icon:before {    content: "/20";    position: absolute;    background: red;    width: 40px;    height: 90px;    bottom: -30px;    right: -37px;    border: 20px solid #eee;    border-radius: 25px;    box-sizing: content-box;}#facebook-icon:after {    content: "/20";    position: absolute;    width: 55px;    top: 50px;    height: 20px;    background: #eee;    right: 5px;    box-sizing: content-box;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#facebook-icon</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">text-indent</span>: -<span class="number">999em</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#facebook-icon</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"/20"</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">90px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">37px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">20px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#facebook-icon</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"/20"</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="月亮形状-moon-shape">月亮形状 （Moon Shape）</span></h3><div id="moon"></div><br><style contenteditable>#moon {    width: 80px;    height: 80px;    border-radius: 50%;    box-shadow: 15px 15px 0 0 red;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#moon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">0</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="标签形状-flag-shape">标签形状 （Flag Shape）</span></h3><div id="flag"></div><br><style contenteditable>#flag {    width: 110px;    height: 56px;    box-sizing: content-box;    padding-top: 15px;    position: relative;    background: red;    color: white;    font-size: 11px;    letter-spacing: 0.2em;    text-align: center;    text-transform: uppercase;}#flag:after {    content: "";    position: absolute;    left: 0;    bottom: 0;    width: 0;    height: 0;    border-bottom: 13px solid #eee;    border-left: 55px solid transparent;    border-right: 55px solid transparent;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#flag</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">56px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">0.2em</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#flag</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">13px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">55px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">55px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="锥形状-cone-shape">锥形状 （Cone Shape ）</span></h3><div id="cone"></div><br><style contenteditable>#cone {    width: 0;    height: 0;    border-left: 70px solid transparent;    border-right: 70px solid transparent;    border-top: 100px solid red;    border-radius: 50%;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#cone</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">70px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">70px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="十字形状-cross-shape">十字形状 （Cross Shape）</span></h3><div id="cross"></div><br><style contenteditable>#cross {    background: red;    height: 100px;    position: relative;    width: 20px;}#cross:after {    background: red;    content: "";    height: 20px;    left: -40px;    position: absolute;    top: 40px;    width: 100px;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#cross</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#cross</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="基地形状-base-shape">基地形状 （Base Shape）</span></h3><div id="base"></div><br><style contenteditable>#base {    background: red;    display: inline-block;    height: 55px;    margin-left: 20px;    margin-top: 55px;    position: relative;    width: 100px;}#base:before {    border-bottom: 35px solid red;    border-left: 50px solid transparent;    border-right: 50px solid transparent;    content: "";    height: 0;    left: 0;    position: absolute;    top: -35px;    width: 0;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#base</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#base</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">35px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="指针的形状-pointer-shape">指针的形状 (Pointer Shape）</span></h3><div id="pointer"></div><br><style contenteditable>#pointer {  width: 200px;  height: 40px;  position: relative;  background: red;}#pointer:after {  content: "";  position: absolute;  left: 0;  bottom: 0;  width: 0;  height: 0;  border-left: 20px solid white;  border-top: 20px solid transparent;  border-bottom: 20px solid transparent;}#pointer:before {  content: "";  position: absolute;  right: -20px;  bottom: 0;  width: 0;  height: 0;  border-left: 20px solid red;  border-top: 20px solid transparent;  border-bottom: 20px solid transparent;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pointer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#pointer</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">20px</span> solid white;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#pointer</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">20px</span> solid red;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="锁的形状-lock-shape">锁的形状 （Lock Shape）</span></h3><div id="lock"></div><br><style contenteditable>#lock {    font-size: 8px;    position: relative;    width: 18em;    height: 13em;    border-radius: 2em;    top: 10em;    box-sizing: border-box;    border: 3.5em solid red;    border-right-width: 7.5em;    border-left-width: 7.5em;    margin: 0 0 6rem 0;}#lock:before {    content: "";    box-sizing: border-box;    position: absolute;    border: 2.5em solid red;    width: 14em;    height: 12em;    left: 50%;    margin-left: -7em;    top: -12em;    border-top-left-radius: 7em;    border-top-right-radius: 7em;}#lock:after {    content: "";    box-sizing: border-box;    position: absolute;    border: 1em solid red;    width: 5em;    height: 8em;    border-radius: 2.5em;    left: 50%;    top: -1em;    margin-left: -2.5em;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#moon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">0</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="扭转角的形状-reverse-corners-shape">扭转角的形状 （Reverse Corners Shape）</span></h3><div id="moon"></div><br><style contenteditable>#curved-corner-bottomleft,#curved-corner-bottomright,#curved-corner-topleft,#curved-corner-topright {  width: 100px;  height: 100px;  overflow: hidden;  position: relative;}#curved-corner-bottomleft:before,#curved-corner-bottomright:before,#curved-corner-topleft:before,#curved-corner-topright:before {  content: "";  display: block;  width: 200%;  height: 200%;  position: absolute;  border-radius: 50%;}#curved-corner-bottomleft:before {  bottom: 0;  left: 0;  box-shadow: -50px 50px 0 0 red;}#curved-corner-bottomright:before {  bottom: 0;  right: 0;  box-shadow: 50px 50px 0 0 red;}#curved-corner-topleft:before {  top: 0;  left: 0;  box-shadow: -50px -50px 0 0 red;}#curved-corner-topright:before {  top: 0;  right: 0;  box-shadow: 50px -50px 0 0 red;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#curved-corner-bottomleft</span>,</span><br><span class="line"><span class="selector-id">#curved-corner-bottomright</span>,</span><br><span class="line"><span class="selector-id">#curved-corner-topleft</span>,</span><br><span class="line"><span class="selector-id">#curved-corner-topright</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#curved-corner-bottomleft</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#curved-corner-bottomright</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#curved-corner-topleft</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#curved-corner-topright</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#curved-corner-bottomleft</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: -<span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#curved-corner-bottomright</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#curved-corner-topleft</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: -<span class="number">50px</span> -<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#curved-corner-topright</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">50px</span> -<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;译者：cl9000&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://css-tricks.com/the-shapes-of-css/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://css-tricks.com/the-shapes-
      
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://cl9000.github.io/tags/CSS/"/>
    
      <category term="形状" scheme="https://cl9000.github.io/tags/%E5%BD%A2%E7%8A%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的 Lexical Scope（词法范围）、Closures（闭包）和Currying（柯里化）</title>
    <link href="https://cl9000.github.io/2020/03/25/JavaScript%E4%B8%AD%E7%9A%84%E8%AF%8D%E6%B3%95%E8%8C%83%E5%9B%B4-%E9%97%AD%E5%8C%85-%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>https://cl9000.github.io/2020/03/25/JavaScript%E4%B8%AD%E7%9A%84%E8%AF%8D%E6%B3%95%E8%8C%83%E5%9B%B4-%E9%97%AD%E5%8C%85-%E6%9F%AF%E9%87%8C%E5%8C%96/</id>
    <published>2020-03-25T10:57:32.000Z</published>
    <updated>2021-04-16T06:23:52.093Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><p>这篇文章描述了JavaScript中的 <code>Lexical Scope</code>, <code>Closures</code>和 <code>Currying</code> 函数以及它们之间的关系。</p><h2><span id="词法范围-lexical-scope">词法范围 Lexical Scope</span></h2><p>使用<code>var</code>关键字定义的变量具有函数作用域，这意味着每次创建一个新函数时都会创建一个新的作用域。</p><p><code>词法作用域</code>与<code>函数作用域</code>相关联。变量的词法作用域是由它们在源代码中的位置定义的。<code>JavaScript</code>从最内部的作用域开始解析变量，并向外搜索，直到找到它要寻找的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> me = <span class="string">"global"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whoami</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> me = <span class="string">"local"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> me;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> func;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(me);          <span class="comment">// global</span></span><br><span class="line"><span class="built_in">console</span>.log(whoami()());  <span class="comment">// local</span></span><br></pre></td></tr></table></figure><p>外部变量<code>me</code>的值是全局的，而如果从外部执行函数<code>whoami()</code>，则值为 <code>local</code>.</p><h2><span id="闭包-closures">闭包 Closures</span></h2><p>闭包是一个非常重要的概念，在<code>JavaScript</code>的采访中经常被问到。</p><blockquote><p>闭包是一个内部函数，可以访问它的外部函数作用域以及以上所有作用域，即使这个函数在它的外部函数之外执行。</p></blockquote><p>当你在外部函数中定义一个内部函数时，闭包会在运行时为内部函数和外部函数的作用域创建。</p><p>让我们看一个例子来理解闭包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outerFunc  = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123; </span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">var</span> innerFunc = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">true  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">var</span> innerMostFunc = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> a + b + c + d + e;</span><br><span class="line">true  &#125;</span><br><span class="line">true  <span class="keyword">return</span> innerMostFunc;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> innerFunc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.dir(outerFunc(<span class="number">3</span>));        <span class="comment">//1. innerFunc</span></span><br><span class="line"><span class="built_in">console</span>.dir(outerFunc(<span class="number">3</span>)(<span class="number">4</span>));     <span class="comment">//2. innerMostFunc</span></span><br><span class="line"><span class="built_in">console</span>.log(outerFunc(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>));  <span class="comment">//3. 15</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">**Output**</span><br><span class="line"></span><br><span class="line">▼ ƒ innerFunc(c)</span><br><span class="line">    length: <span class="number">1</span></span><br><span class="line">    name: <span class="string">"innerFunc"</span></span><br><span class="line">    arguments: null</span><br><span class="line">    caller: null</span><br><span class="line">  ➤ prototype: &#123;constructor: ƒ&#125;</span><br><span class="line">  ➤ __proto__: ƒ ()</span><br><span class="line">    <span class="string">[[FunctionLocation]]</span>:</span><br><span class="line">  ▼ <span class="string">[[Scopes]]</span>: Scopes[<span class="number">2</span>]</span><br><span class="line">    ➤ <span class="number">0</span>: Closure (outerFunc) &#123;c: <span class="number">3</span>, a: <span class="number">1</span>&#125;</span><br><span class="line">    ➤ <span class="number">1</span>: Global &#123;parent: Window, opener: null, top: Window, length: <span class="number">1</span>, frames: Window, …&#125;</span><br><span class="line"></span><br><span class="line">▼ ƒ innerMostFunc(c)</span><br><span class="line">    length: <span class="number">1</span></span><br><span class="line">    name: <span class="string">"innerMostFunc"</span></span><br><span class="line">    arguments: null</span><br><span class="line">    caller: null</span><br><span class="line">  ➤ prototype: &#123;constructor: ƒ&#125;</span><br><span class="line">  ➤ __proto__: ƒ ()</span><br><span class="line">    <span class="string">[[FunctionLocation]]</span>:</span><br><span class="line">  ▼ <span class="string">[[Scopes]]</span>: Scopes[<span class="number">3</span>]</span><br><span class="line">    ➤ <span class="number">0</span>: Closure (innerFunc) &#123;d: <span class="number">4</span>, b: <span class="number">2</span>&#125;</span><br><span class="line">    ➤ <span class="number">1</span>: Closure (outerFunc) &#123;c: <span class="number">3</span>, a: <span class="number">1</span>&#125;</span><br><span class="line">    ➤ <span class="number">2</span>: Global &#123;parent: Window, opener: null, top: Window, length: <span class="number">1</span>, frames: Window, …&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><p>我们有三个控制台目录/日志。让我们逐一讨论一下:</p><ul><li><code>innerFunc</code>有一个在<code>outerFunc</code>中定义或传递作为参数的变量闭包</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: Closure (outerFunc) &#123;<span class="attr">c</span>: <span class="number">3</span>, <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><code>innerMostFunc</code>有一个在<code>outerFunc</code>和<code>innerFunc</code>中定义或传递作为参数的变量闭包。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: Closure (innerFunc) &#123;<span class="attr">d</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="number">1</span>: Closure (outerFunc) &#123;<span class="attr">c</span>: <span class="number">3</span>, <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><code>innerMostFunc</code>返回<code>a+b+c+d+e=15</code>其中<ul><li><code>a</code>和<code>c</code>的值来自<code>Closure (outerFunc)</code></li><li><code>b</code>和<code>d</code>的值来自<code>Closure (innerFunc)</code></li><li><code>e</code>的值来自所传递的参数</li></ul></li></ul><p>他们的方式我们称为<code>outerFunc(3)(4)(5)</code>也称为<code>currying</code></p><h2><span id="柯里化-currying">柯里化 Currying</span></h2><p>闭包的一个用例是 <code>Currying函数</code>。<br><code>Currying函数</code>是这样一种函数，在这种函数中，你将一个函数分解为一次接受多个参数，而不是一次接受所有参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(a, b, c) =&gt; <span class="function"><span class="params">Currying</span> =&gt;</span> f(a)(b)(c)</span><br></pre></td></tr></table></figure><p>我们来转换这个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>转成 <code>Curryings函数</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a + b + c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>一个例子:-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sayWhat = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`say <span class="subst">$&#123;a&#125;</span> to <span class="subst">$&#123;b&#125;</span> using <span class="subst">$&#123;c&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayWhat(<span class="string">"hello"</span>)(<span class="string">"friends"</span>)(<span class="string">"currying function"</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>say hello to friends using currying function</p></blockquote><p>在<code>Curryings函数</code>中，每个嵌套函数都在它们的闭包中跟踪外部函数传递的参数.</p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/lexical-scope-closures-and-currying/#closures" target="_blank" rel="noopener">原文 - https://codingnconcepts.com/javascript/lexical-scope-closures-and-currying/#closures</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noopener">MDN 闭包- https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;p&gt;这篇文章描述了JavaScript中的 &lt;code&gt;Lexical Scope&lt;/code&gt;, &lt;code&gt;Closures&lt;/code&gt;和 &lt;code&gt;Curry
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="Lexical Scope（词法范围）" scheme="https://cl9000.github.io/tags/Lexical-Scope%EF%BC%88%E8%AF%8D%E6%B3%95%E8%8C%83%E5%9B%B4%EF%BC%89/"/>
    
      <category term="Closures（闭包）" scheme="https://cl9000.github.io/tags/Closures%EF%BC%88%E9%97%AD%E5%8C%85%EF%BC%89/"/>
    
      <category term="Currying（柯里化）" scheme="https://cl9000.github.io/tags/Currying%EF%BC%88%E6%9F%AF%E9%87%8C%E5%8C%96%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的Object方法</title>
    <link href="https://cl9000.github.io/2020/03/22/JavaScript%E4%B8%AD%E7%9A%84Object%E6%96%B9%E6%B3%95/"/>
    <id>https://cl9000.github.io/2020/03/22/JavaScript%E4%B8%AD%E7%9A%84Object%E6%96%B9%E6%B3%95/</id>
    <published>2020-03-22T10:09:33.000Z</published>
    <updated>2021-04-16T05:47:49.499Z</updated>
    
    <content type="html"><![CDATA[<p>生活只有在平淡无味的人看来才是空虚而平淡无味的。 ——&lt;尼古拉·加夫里诺维奇·车尔尼雪夫斯基&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/const-vs-object-freeze/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/const-vs-object-freeze/</a></p></blockquote><p>这篇文章描述了各种对象方法的用法，比如<code>Object.create()， Object.assign()， Object.freeze()， Object.seal()</code>以及<code>JavaScript</code>中许多可用的方法的示例。</p><h2><span id="objectcreate">Object.create()</span></h2><p><code>Object.create()</code>方法用于创建一个新对象，并将其原型设置为现有对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123;</span><br><span class="line">    color: <span class="string">"black"</span>,</span><br><span class="line">    brand: <span class="string">"Toyota"</span>,</span><br><span class="line">    drive: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Driving a <span class="subst">$&#123;<span class="keyword">this</span>.isTopModel ? <span class="string">'top model'</span> : <span class="string">''</span>&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.color&#125;</span> color <span class="subst">$&#123;<span class="keyword">this</span>.brand&#125;</span> car`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newCar = <span class="built_in">Object</span>.create(car);</span><br><span class="line">newCar.brand = <span class="string">"Honda"</span>;</span><br><span class="line">newCar.isTopModel = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(car.isPrototypeOf(newCar)); <span class="comment">//true</span></span><br><span class="line">newCar.drive();</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br><strong>true</strong><br><strong>Driving a top model black color Honda car</strong></p></blockquote><p>这里，<code>newCar</code>创建了一个全新的对象，其原型设置为<code>Car</code>。我们设置了<code>brand</code>和<code>isTopModel</code>的值，而<code>color</code>的值将被继承。当我们调用<code>drive()</code>方法时，它在<code>car</code>上的原型链中找到<code>drive()</code>并执行。</p><h2><span id="objectassign">Object.assign()</span></h2><p><code>Object.assign()</code>用于将一个对象的属性和函数复制到另一个对象中。</p><p>我们可以使用<code>Object.assign()</code>来合并两个对象，方法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initialize an object</span></span><br><span class="line"><span class="keyword">const</span> favorites = &#123;</span><br><span class="line">    color: <span class="string">'Red'</span>,</span><br><span class="line">    number: <span class="number">5</span>   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize another object</span></span><br><span class="line"><span class="keyword">const</span> somemore = &#123;</span><br><span class="line">    fruit: <span class="string">'Mango'</span>,</span><br><span class="line">    movies: [<span class="string">"Spider Man"</span>, <span class="string">"Conjuring"</span>],   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Merge the objects</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(favorites, somemore));</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br><strong>{color: “Red”, number: 5, fruit: “Mango”, movies: [“Spider Man”, “Conjuring”]}</strong></p></blockquote><p>也可以在类构造函数中使用，将所有值赋给<code>this</code>，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(brand, color, price)&#123;</span><br><span class="line">        <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;brand, color, price&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="objectfreeze">Object.freeze()</span></h2><p><code>Object.freeze()</code>在调用此方法后冻结对象的状态。它将忽略是否修改了任何现有属性，以及是否添加了任何新属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initialize an object</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    username: <span class="string">'admin'</span>,</span><br><span class="line">    password: <span class="string">'password@123'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Freeze the object</span></span><br><span class="line"><span class="built_in">Object</span>.freeze(user);</span><br><span class="line"></span><br><span class="line">user.password = <span class="string">'*******'</span>;</span><br><span class="line">user.active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br><strong>{username: “admin”, password: “password@123”}</strong></p></blockquote><h2><span id="objectseal">Object.seal()</span></h2><p><code>Object.seal()</code>在调用此方法后密封对象的状态。它允许修改现有的属性，但是如果添加了任何新属性，则会忽略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initialize an object</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    name: <span class="string">'admin'</span>,</span><br><span class="line">    password: <span class="string">'password@123'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Seal the object</span></span><br><span class="line"><span class="built_in">Object</span>.seal(user);</span><br><span class="line"></span><br><span class="line">user.password = <span class="string">'123456'</span></span><br><span class="line">user.active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br><strong>{name: “admin”, password: “123456”}</strong></p></blockquote><h2><span id="objectdefineproperty">Object.defineProperty()</span></h2><p><code>Object.defineproperty()</code>用于在现有对象中定义新的属性。</p><p>属性可以用以下选项定义:</p><ul><li>value: 默认为<code>undefined</code>，如果没有提供属性的值</li><li>writable: 默认为<code>false</code>，如果为<code>true</code>则表示该属性的值可以更改</li><li>configurable: 默认为<code>false</code>，如果为<code>true</code>则表示可以删除属性</li><li>enumerable: 默认为<code>false</code>，如果为<code>true</code>则表示可以枚举属性，例如在<code>for..in</code>循环中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(user, <span class="string">"name"</span>, &#123;</span><br><span class="line">  value: <span class="string">"admin"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(user, <span class="string">"name"</span>, &#123;</span><br><span class="line">  value: <span class="string">"admin"</span>,</span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br><strong>{name: “admin”}</strong></p></blockquote><h2><span id="objectdefineproperties">Object.defineProperties()</span></h2><p><code>Object.defineproperties()</code>可用于在现有对象中定义多个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(user, &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    value: <span class="string">"admin"</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    value: <span class="string">'password@123'</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span></span><br><span class="line">  &#125;      </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure><p><strong>Output</strong><br><strong>{name: “admin”, password: “password@123”}</strong></p><h2><span id="objectkeys-objectvalues-amp-objectentries">Object.keys(), Object.values() &amp; Object.entries()</span></h2><p><code>Object.keys(), Object.values() &amp; Object.entries()</code>可以使用对象的迭代器，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> favorites = &#123;</span><br><span class="line">    color: <span class="string">'Red'</span>,</span><br><span class="line">    number: <span class="number">5</span>,</span><br><span class="line">    vegan: <span class="literal">true</span>,</span><br><span class="line">    movies: [<span class="string">"Spider Man"</span>, <span class="string">"Conjuring"</span>]   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"keys"</span>, <span class="built_in">Object</span>.keys(favorites));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"values"</span>, <span class="built_in">Object</span>.values(favorites));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"entries"</span>, <span class="built_in">Object</span>.entries(favorites));</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>keys [“color”, “number”, “vegan”, “movies”]<br>values [“Red”, 5, true, [“Spider Man”, “Conjuring”]]<br>entries [<br>[“color”, “Red”],<br>[“number”, 5],<br>[“vegan”, true],<br>[“movies”, [“Spider Man”, “Conjuring”]<br>]</p></blockquote><p><code>Object.keys()和Object.entries()</code>可用于迭代对象的键和值，如下所示:—</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(favorites).forEach(<span class="function"><span class="params">key</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;favorites[key]&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.entries(favorites).forEach(<span class="function"><span class="params">entry</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;entry[<span class="number">0</span>]&#125;</span>: <span class="subst">$&#123;entry[<span class="number">1</span>]&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><h2><span id="-objectis">-Object.is()</span></h2><p><code>ES6</code>引入了一个新的方法<code>Object.is()</code>来比较两个值，它的工作原理非常类似于严格的比较操作符<code>===</code>，还避免了<code>NaN</code>比较和<code>+0/-0</code>比较的混淆。建议使用<code>Object.is()</code>进行值比较。</p><p>我们来看看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">"cnc"</span>, <span class="string">"cnc"</span>));     <span class="comment">// true, same content and type</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">12345</span>, <span class="number">12345</span>));     <span class="comment">// true, same content and type</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">false</span>, <span class="literal">false</span>));     <span class="comment">// true, same content and type</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">12345</span>, <span class="string">"12345"</span>));   <span class="comment">// false, different type</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="literal">false</span>));         <span class="comment">// false, different type</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">""</span>, <span class="literal">false</span>));        <span class="comment">// false, different type</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">null</span>, <span class="literal">undefined</span>));  <span class="comment">// false, different type</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is([], []));           <span class="comment">// false, both refers to different object in memory</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]));   <span class="comment">// false, both refers to different object in memory</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;));           <span class="comment">// false, both refers to different object in memory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> array2 = array1;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(array1, array2));   <span class="comment">// true, both refers to same array</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">app</span> : <span class="string">"cnc"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(obj1, obj2));       <span class="comment">// true, both refers to same object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>);                 <span class="comment">// false, confusing, content and type is same</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>));         <span class="comment">// true, es6 is good, same content and type</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === <span class="number">-0</span>);                   <span class="comment">// true, confusing, content is different</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>));           <span class="comment">// false, es6 is good, different content</span></span><br></pre></td></tr></table></figure><h2><span id="总结-summary">总结 Summary</span></h2><p>Javascript对象提供了非常有用的方法</p><ul><li>使用<code>Object.create()</code>创建一个新对象</li><li>使用<code>Object.assign()</code>复制对象</li><li>使用<code>Object.freeze()</code>和<code>Object.seal()</code>保护对象</li><li>使用<code>Object.defineproperty()</code>和<code>Object.defineproperties()</code>定义对象属性</li><li>使用<code>Object.keys()、Object.values()</code>和<code>Object.entries()</code>遍历<code>Object</code></li><li>使用<code>Object.is()</code>比较对象</li></ul><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/object-methods-in-javascript/" target="_blank" rel="noopener">原文 - https://codingnconcepts.com/javascript/object-methods-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生活只有在平淡无味的人看来才是空虚而平淡无味的。 ——&amp;lt;尼古拉·加夫里诺维奇·车尔尼雪夫斯基&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnc
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript中const和Object.freeze（）的区别</title>
    <link href="https://cl9000.github.io/2020/03/21/JavaScript%E4%B8%ADconst%E5%92%8CObject-freeze%EF%BC%88%EF%BC%89%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://cl9000.github.io/2020/03/21/JavaScript%E4%B8%ADconst%E5%92%8CObject-freeze%EF%BC%88%EF%BC%89%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-03-21T10:37:27.000Z</published>
    <updated>2021-04-16T05:49:11.635Z</updated>
    
    <content type="html"><![CDATA[<p>人生不是一种享乐，而是一桩十分沉重的工作。 —— 列夫·托尔斯泰</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/const-vs-object-freeze/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/const-vs-object-freeze/</a></p></blockquote><p>这篇文章介绍了使用<code>const</code>和定义J<code>avaScript</code>中的常量和配置值的最佳做法，<code>Object.freeze()</code>以及它们之间的区别。</p><p>当我们在<code>JavaScript</code>应用程序中定义常量和配置值时。它们应具有以下特征：</p><ul><li>跨应用程序可访问</li><li>变量的值应该是不可变的</li><li>变量的引用应该是不可变的</li></ul><p>现在，我们将尝试实现这些特征……</p><h2><span id="使用let">使用let</span></h2><p>让我们使用来定义变量<code>let</code>，看看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> APP_NAME = <span class="string">"Coding N Concepts"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getApplicationName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  APP_NAME = <span class="string">"Unkown App"</span>;</span><br><span class="line">  <span class="keyword">return</span> APP_NAME;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getApplicationName(); <span class="comment">// Unkown App</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，函数<code>getApplicationName()</code>已更改的值<code>APP_NAME</code>。我们如何防止更改全局变量的值？</p><h2><span id="使用const">使用const</span></h2><p>我们可以使用<code>const</code>定义一个常量变量来代替<code>let</code>防止其更改值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> APP_NAME = <span class="string">"Coding N Concepts"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getApplicationName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  APP_NAME = <span class="string">"Unkown App"</span>; <span class="comment">// This will throw TypeError</span></span><br><span class="line">  <span class="keyword">return</span> APP_NAME;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试更改使用<code>const</code>结果定义的变量的值，导致此错误：</p><p><code>“TypeError: Assignment to constant variable.”</code></p><p>就是这样吗？让我们看下输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'mango'</span>, <span class="string">'apple'</span>];</span><br><span class="line">fruits.push(<span class="string">'banana'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fruits); <span class="comment">// ['mango', 'apple', 'banana']</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> constants = &#123;</span><br><span class="line">  APP_NAME : <span class="string">"Coding N Concepts"</span></span><br><span class="line">&#125;;</span><br><span class="line">constants.APP_NAME = <span class="string">"Unknown App"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(constants.APP_NAME); <span class="comment">// "Unknown App"</span></span><br></pre></td></tr></table></figure><p>从上面的两个例子中可以看出，即使使用const，也可以改变数组或对象的值。</p><blockquote><p><code>const</code>不会使变量的值不可变，而是使变量的绑定不可变。</p></blockquote><blockquote><p>所有基本类型都喜欢 <code>integer，boolean</code> 并且通过值 <code>string</code> 绑定数据，而所有类型都喜欢 <code>array</code> 并且通过引用 <code>object</code> 绑定数据。</p></blockquote><p>现在我们知道，在 <code>array</code> 和的情况下 <code>object</code> ，我们不能更改引用，但可以更改值。</p><p>那么我们如何防止改变 <code>array</code> 的值 <code>object</code> 呢？</p><h2><span id="使用objectfreeze">使用Object.freeze（）</span></h2><p>这是<code>Object.freeze()</code>发挥作用的地方。<code>Object.freeze</code>忽略值的变化<code>object</code>和<code>array</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> constants = <span class="built_in">Object</span>.freeze(&#123;</span><br><span class="line">  APP_NAME : <span class="string">"Coding N Concepts"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">constants.APP_NAME = <span class="string">"Unknown App"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(constants.APP_NAME); <span class="comment">// "Coding N Concepts"</span></span><br></pre></td></tr></table></figure><p>您可以在示例中看到，如果您尝试更改值，它不会引发任何错误，但不会影响对象状态。</p><p><code>Object.freeze()</code> 可以防止更改对象的值，但不能阻止引用的更改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> constants = <span class="built_in">Object</span>.freeze(&#123;</span><br><span class="line">  APP_NAME : <span class="string">"Coding N Concepts"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">constants = &#123; </span><br><span class="line">  APP_NAME : <span class="string">"Unknown App"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(constants.APP_NAME); <span class="comment">// "Unknown App"</span></span><br></pre></td></tr></table></figure><p>如果我们总结一下：</p><blockquote><p><code>const</code>不允许更改的引用，<code>object</code>或者<code>array</code>可以更改值。</p></blockquote><blockquote><p><code>Object.freeze()</code>忽略<code>object</code>或<code>array</code>的值变化</p></blockquote><p>把它们组合在一起将防止更改对象或数组的引用和值</p><h2><span id="一起使用const和objectfreeze">一起使用const和Object.freeze（）</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> constants = <span class="built_in">Object</span>.freeze(&#123;</span><br><span class="line">  APP_NAME : <span class="string">"Coding N Concepts"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">constants.APP_NAME = <span class="string">"Unknown App"</span>; <span class="comment">// This is ignored</span></span><br><span class="line"></span><br><span class="line">constants = &#123; </span><br><span class="line">  APP_NAME : <span class="string">"Unknown App"</span> </span><br><span class="line">&#125;; <span class="comment">// This will throw TypeError</span></span><br></pre></td></tr></table></figure><p>上面的示例显示了将 <code>const</code> 和组合在一起 <code>Object.freeze()</code> 对于在 <code>JavaScript</code> 中定义常量和配置非常有用。</p><h3><span id="参考原文">参考原文</span></h3><p><a href="https://codingnconcepts.com/javascript/const-vs-object-freeze/" target="_blank" rel="noopener">原文：https://codingnconcepts.com/javascript/const-vs-object-freeze/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生不是一种享乐，而是一桩十分沉重的工作。 —— 列夫·托尔斯泰&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javascrip
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>var，let和const之间的区别</title>
    <link href="https://cl9000.github.io/2020/03/18/JavaScript-var-let%E5%92%8Cconst%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://cl9000.github.io/2020/03/18/JavaScript-var-let%E5%92%8Cconst%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-03-18T08:32:53.000Z</published>
    <updated>2021-04-16T05:50:15.799Z</updated>
    
    <content type="html"><![CDATA[<p>人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&lt;爱因斯坦&gt;</p><blockquote><p>作者：Ashish Lahoti <br><br>译者：cl9000 <br><br>原文：<a href="https://codingnconcepts.com/javascript/difference-between-var-let-and-const/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/difference-between-var-let-and-const/</a></p></blockquote><p><code>ES2015 (ES6)</code>中新增的一个不错的特性是为变量声明引入了 <code>let</code> 和 <code>const</code> 关键字。可以互换地使用 <code>var、let和const</code>关键字来声明变量，尽管这在它们的作用域、用法和提升方面有所不同。如果<br>你还没有意识到这些差异，请继续阅读…</p><h2><span id="scope-作用域">Scope 作用域</span></h2><p>作用域基本上是指变量的可访问性。变量可以有三种作用域:-</p><h3><span id="1-全局作用域-global-scope">1. 全局作用域 Global Scope</span></h3><p>当变量定义在函数外部并且在任何地方都可以访问时。所有的<code>var, let和const</code>都是全局作用域。</p><h3><span id="2-函数作用域-function-scope">2. 函数作用域 Function Scope</span></h3><p>使用 <code>var</code> 定义的变量是函数作用域的，因为如果它是在函数内部定义的，那么它们的可见性仅限于函数或嵌套函数。当你尝试在函数外使用它时，你会得到一个错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> foo = <span class="string">'peekaboo!'</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(foo); <span class="comment">// Prints 'peekaboo!'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// ReferenceError: foo is not defined</span></span><br></pre></td></tr></table></figure><h3><span id="3-块作用域-block-scope">3. 块作用域 Block Scope</span></h3><p>使用 <code>let或const</code> 定义的变量是块范围的，因为如果它定义在代码块内(在花括号<code>{}</code>之间的代码)，它们的可见性仅限于代码块，任何嵌套的块。当你尝试在块之外使用它时，你会得到一个错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="string">'peekaboo!'</span>;</span><br><span class="line">    <span class="keyword">let</span> bar = <span class="string">'i see u'</span>;</span><br><span class="line">    <span class="keyword">const</span> baz = <span class="string">'baby blue!'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(foo); <span class="comment">// Prints 'peekaboo!';</span></span><br><span class="line">    <span class="built_in">console</span>.log(bar); <span class="comment">// Prints 'i see u';</span></span><br><span class="line">    <span class="built_in">console</span>.log(baz); <span class="comment">// Prints 'baby blue!';</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// Prints 'peekaboo!';</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// ReferenceError: bar is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(baz); <span class="comment">// ReferenceError: baz is not defined</span></span><br></pre></td></tr></table></figure><h2><span id="使用">使用</span></h2><h3><span id="1-var">1. var</span></h3><p>在 <code>ES6</code> 之前，<code>var</code> 是变量声明的唯一关键字。</p><p><strong>在 <code>for</code> 循环之外执行 <code>var</code> 操作</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// Prints 0, 1 and 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);   <span class="comment">// Prints 3</span></span><br></pre></td></tr></table></figure><p>因为 <code>var</code> 是函数作用域的。变量<code>i</code>可以在<code>for</code>循环之外被访问(代码块).</p><p><strong><code>var</code> 重新分配</strong></p><p>使用var的变量可以重新赋值，也可以重新定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line">    foo = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">101</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);  <span class="comment">// Prints 101</span></span><br><span class="line">&#125;</span><br><span class="line">myFn();</span><br></pre></td></tr></table></figure><h3><span id="2-let">2. let</span></h3><p><strong>在 <code>for</code> 循环之外执行 <code>let</code> 操作</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// Prints 0, 1 and 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);   <span class="comment">// ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><p>因为 <code>let</code> 是块范围的。变量 <code>i</code> 在 <code>for</code> 循环之外是不可访问的(代码块).</p><p><strong><code>let</code> 重新分配和重新定义</strong><br>使用let的变量可以重新赋值，但不能重新定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line">    foo = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">let</span> foo = <span class="number">101</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);  </span><br><span class="line">&#125;</span><br><span class="line">myFn();</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br><br>Uncaught SyntaxError: Identifier ‘foo’ has already been declared</p></blockquote><p>但是，如果 <code>let</code> 变量在不同的作用域中定义，就不会出现错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> foo = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> foo = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line">myFn();</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br><br>1<br>2<br>3<br><br></p></blockquote><p>为什么没有错误? 这是因为这三个实例都被视为不同的变量，因为它们具有不同的作用域。</p><h3><span id="3-const">3. const</span></h3><p>关键字 <code>const</code> 类似于 <code>let</code> ，它是块作用域的，但是你不能给它重新赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">PI = <span class="number">5</span>; <span class="comment">// "TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><p>但是，仍然可以将新项推入数组常量或添加到对象中。下面的两个代码段可以毫无怨言地工作，因为我们并没有试图重新分配变量:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someArr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">someArr.push(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someObj = &#123;</span><br><span class="line">  dog: <span class="string">'Skip'</span>,</span><br><span class="line">  cat: <span class="string">'Caramel'</span>,</span><br><span class="line">  bird: <span class="string">'Jack'</span></span><br><span class="line">&#125;;</span><br><span class="line">someObj.camel = <span class="string">'Bob'</span>;</span><br></pre></td></tr></table></figure><h2><span id="提升-hoisting">提升 Hoisting</span></h2><blockquote><p>提升是一种 ·JavaScript` 机制，在代码执行之前将变量和函数声明移动到其作用域的顶部</p></blockquote><p>对于 <code>var</code> 变量，它们的值在提升过程中被初始化为 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); </span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar); </span><br><span class="line">bar = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(bar); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar;</span><br></pre></td></tr></table></figure><p>被解释为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="keyword">var</span> bar;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// undefined</span></span><br><span class="line">foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// undefined</span></span><br><span class="line">bar = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>你能猜到下面代码片段的输出是什么吗?</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFun();</span><br></pre></td></tr></table></figure><p>你猜 <code>foo = 1</code> 还是 <code>foo = 2</code> ?</p><p>都不是。它将打印未定义。让我们看看在提升过程中编译器是如何解释它的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line">foo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> foo; <span class="comment">// var hoisted and initialized with undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(foo); <span class="comment">// undefined</span></span><br><span class="line">  </span><br><span class="line">  foo = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFun();</span><br></pre></td></tr></table></figure><p>就像 <code>var</code> 一样，<code>let</code> 声明也被挂起在顶部，但不像 <code>var</code> 被初始化为 <code>undefined</code> , <code>let</code> 变量没有初始化。因此，如果你尝试在声明之前使用 <code>let</code> 变量，你会得到一个引用错误。<code>const</code> 变量在提升方面与<code>let</code> 变量相似。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br><br>ReferenceError: foo is not defined</p></blockquote><p><strong>你能猜到下面代码片段的输出是什么吗?</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> foo = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFun();</span><br></pre></td></tr></table></figure><p>你猜 <code>foo = undefined</code> 吗?</p><p>不 它不是。让我们看看在提升过程中编译器是如何解释它的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo;</span><br><span class="line">foo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> foo; <span class="comment">// let hoisted without initialization unlike var</span></span><br><span class="line">  <span class="built_in">console</span>.log(foo); <span class="comment">// ReferenceError: Cannot access 'foo' before initialization</span></span><br><span class="line"></span><br><span class="line">  foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFun();</span><br></pre></td></tr></table></figure><h2><span id="总结-summary">总结 Summary</span></h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">作用域</th><th style="text-align:center">值更新</th><th style="text-align:center">重新定义变量</th><th style="text-align:center">提升</th></tr></thead><tbody><tr><td style="text-align:center">var</td><td style="text-align:center">函数作用域</td><td style="text-align:center">yes</td><td style="text-align:center">yes(在作用域内)</td><td style="text-align:center">初始化为undefined</td></tr><tr><td style="text-align:center">let</td><td style="text-align:center">块作用域</td><td style="text-align:center">yes</td><td style="text-align:center">no(在块作用域内)但yes(块作用域外)</td><td style="text-align:center">变量未初始化</td></tr><tr><td style="text-align:center">const</td><td style="text-align:center">块作用域</td><td style="text-align:center">no</td><td style="text-align:center">no</td><td style="text-align:center">未初始化的变量</td></tr></tbody></table><ul><li><code>var</code> 变量是函数作用域，而 <code>let和const</code> 是块作用域。</li><li>var变量可以在其作用域内更新和重新声明; <code>let</code>变量可以更新，但不能重新声明; <code>const</code>变量既不能更新也不能重新声明。</li></ul><ul><li>它们都被悬挂在作用域的顶部，但是当 <code>var</code> 变量用<code>undefined</code>初始化时，<code>let和const</code>变量则不初始化。</li><li><code>var和let</code>可以在声明时不进行初始化，而<code>const</code>则必须在声明时进行初始化。</li></ul><h3><span id="参考">参考</span></h3><p><a href="https://codingnconcepts.com/javascript/difference-between-var-let-and-const/" target="_blank" rel="noopener">原文 - https://codingnconcepts.com/javascript/difference-between-var-let-and-const/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&amp;lt;爱因斯坦&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti &lt;br&gt;&lt;br&gt;
译者：cl9000 &lt;br&gt;&lt;br&gt;
原文：&lt;a href=&quot;https://codingnco
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://cl9000.github.io/2020/01/17/Docker/"/>
    <id>https://cl9000.github.io/2020/01/17/Docker/</id>
    <published>2020-01-17T06:11:39.000Z</published>
    <updated>2020-11-10T09:11:41.287Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="docker">docker</span></h3><blockquote><p><a href="https://dashboard.daocloud.io/cluster-private/a8b80bb5-bc0f-4b58-80d7-270586d4692b" target="_blank" rel="noopener">DaoCloud Services - dashboard.daocloud</a><br><a href="http://guide-wiki.daocloud.io:8090/dcs/daocloud-services-9152632.html" target="_blank" rel="noopener">DaoCloud Services 文档</a><br><a href="https://www.runoob.com/docker/docker-compose.html" target="_blank" rel="noopener">菜鸟教程 - Docker</a><br><a href="https://blog.csdn.net/tony1130/article/details/53181071" target="_blank" rel="noopener">在MacOS下，Docker　images保存在哪个路径下</a><br><a href="https://blog.csdn.net/jiangyu1013/article/details/84572582" target="_blank" rel="noopener">Docker 方式 部署 vue 项目 （docker + vue + nginx）</a><br><a href="https://blog.csdn.net/jason_jeson/article/details/78200623" target="_blank" rel="noopener">Docker 通过Nginx镜像部署Vue项目</a><br><a href="https://yeasy.gitbooks.io/docker_practice/network/dns.html" target="_blank" rel="noopener">Docker —— 从入门到实践</a><br><a href="https://tvvo.gitbooks.io/cloud-insight-docs/content/chapter1.html" target="_blank" rel="noopener">Cloud Insight文档中心</a></p></blockquote><h3><span id="docker-compose">docker-compose</span></h3><p><strong>docker-compose ERROR</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ERROR</span>: <span class="keyword">Version</span> <span class="keyword">in</span> <span class="string">"./docker-compose.yml"</span> is unsupported. </span><br><span class="line">You might be seeing this <span class="keyword">error</span> because you're using the wrong Compose <span class="keyword">file</span> <span class="keyword">version</span>. </span><br><span class="line">Either specify a <span class="keyword">version</span> of <span class="string">"2"</span> (or <span class="string">"2.0"</span>) and place your service definitions </span><br><span class="line">under the `services` key, or omit the `<span class="keyword">version</span>` key and place your service definitions at the root of the <span class="keyword">file</span> to <span class="keyword">use</span> <span class="keyword">version</span> 1.</span><br><span class="line"><span class="keyword">For</span> <span class="keyword">more</span> <span class="keyword">on</span> the Compose <span class="keyword">file</span> <span class="keyword">format</span> versions, see https:<span class="comment">//docs.docker.com/compose/compose-file/</span></span><br></pre></td></tr></table></figure><p>参考方案：<br><a href="https://stackoverflow.com/questions/57456212/error-version-in-docker-compose-yml-is-unsupported" target="_blank" rel="noopener">1-ERROR: Version in “./docker-compose.yml” is unsupported</a><br><a href="https://stackoverflow.com/questions/42139982/version-in-docker-compose-yml-is-unsupported-you-might-be-seeing-this-error/49407448#49407448" target="_blank" rel="noopener">2-ERROR: Version in “./docker-compose.yml” is unsupported</a><br>解决方案：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose --version</span></span><br></pre></td></tr></table></figure><p><a href="https://www.hi-linux.com/posts/12554.html?spm=a2c4e.10696291.0.0.6b3219a4a5aIgH" target="_blank" rel="noopener">运维之美 - 使用 Docker-Compose 编排容器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;docker&quot;&gt;docker&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dashboard.daocloud.io/cluster-private/a8b80bb5-bc0f-4b58-80d7-2705
      
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://cl9000.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
