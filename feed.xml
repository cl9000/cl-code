<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Weichanglu</title>
  <icon>https://www.gravatar.com/avatar/749a0cb196d7f8d7b7f41d5a5fa372e4</icon>
  <subtitle>你知道的越多，你不知道的越多</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cl9000.github.io/"/>
  <updated>2021-05-12T08:47:58.423Z</updated>
  <id>https://cl9000.github.io/</id>
  
  <author>
    <name>cl9000</name>
    <email>cl9000@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 中常见小问题注意事项</title>
    <link href="https://cl9000.github.io/2021/03/12/JavaScript%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%B0%8F%E9%97%AE%E9%A2%98%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://cl9000.github.io/2021/03/12/JavaScript%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%B0%8F%E9%97%AE%E9%A2%98%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2021-03-12T08:43:17.000Z</published>
    <updated>2021-05-12T08:47:58.423Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="换行问题">换行问题</span></h3><p>在显示内容的元素标签添加如下样式，（使用<code>v-html</code>绑定数据，同时支持 <code>\n 和 &lt;br/&gt;</code>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"white-space: pre-line;"</span> <span class="attr">v-html</span>=<span class="string">"htmlTxt"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样<code>\n（&lt;br/&gt;）</code>就能被识别，自动换行。(最低兼容到IE8)。<a href="https://caniuse.com/" target="_blank" rel="noopener">caniuse 兼容性查看</a></p><blockquote><p>**注意：**若经过JSON处理，后台传入的 \n 会被解析为字符串\ 和 n， 需要在处理一下 <code>str.replace(/\\n/g, '\n')</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;换行问题&quot;&gt;换行问题&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在显示内容的元素标签添加如下样式，（使用&lt;code&gt;v-html&lt;/code&gt;绑定数据，同时支持 &lt;code&gt;\n 和 &amp;lt;br/&amp;gt;&lt;/code&gt;）&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>链判断运算符【?.】JavaScript中的运算符</title>
    <link href="https://cl9000.github.io/2021/01/28/JavaScript%E5%8F%AF%E9%80%89%E9%93%BE%E3%80%90-%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://cl9000.github.io/2021/01/28/JavaScript%E5%8F%AF%E9%80%89%E9%93%BE%E3%80%90-%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-01-28T09:12:40.000Z</published>
    <updated>2021-05-20T07:49:47.327Z</updated>
    
    <content type="html"><![CDATA[<p>人生不是一种享乐，而是一桩十分沉重的工作。 —-&lt;列夫·托尔斯泰&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/</a></p></blockquote><p>可选的链?.运算符用于通过隐式空检查访问嵌套的对象属性。</p><h2><span id="概述">概述</span></h2><p>如何使用无效<code>（null和undefined）</code>检查访问对象的嵌套属性？假设我们必须通过网络api的响应访问用户详细信息？</p><p>您可以<code>? ... :</code>像这样使用嵌套的三元运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response ? (response.data ? (response.data.user ? response.data.user.name : <span class="literal">null</span>) : <span class="literal">null</span>) : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>或者您可以在<code>if</code>这种情况下进行空值检查：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(response &amp;&amp; response.data &amp;&amp; response.data.user)&#123;</span><br><span class="line">  userName = response.data.user.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至更好的方法可以使其&amp;&amp;像这样的单衬板链条状态：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response &amp;&amp; response.data &amp;&amp; response.data.user &amp;&amp; response.data.user.name;</span><br></pre></td></tr></table></figure><p>上面的代码的共同点是，链接有时可能真的很长，并且变得更加难以格式化和读取。这是可选的链接?.运算符提供帮助的地方，该运算符提供了隐式的无效检查，并使我们的代码更小，更好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response?.data?.user?.name;</span><br></pre></td></tr></table></figure><h2><span id="句法">句法</span></h2><p>可选的链<code>?.</code>运算符在<code>Javascript ES2020</code>中引入，其语法如下：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.val?.prop       returns obj.val.prop <span class="keyword">if</span> val exists, otherwise <span class="literal">undefined</span>.</span><br><span class="line">obj.func?.(args)    returns obj.func(args) <span class="keyword">if</span> func exists, otherwise <span class="literal">undefined</span>.</span><br><span class="line">obj.arr?.[index]    returns obj.array[index] <span class="keyword">if</span> array exists, otherwise <span class="literal">undefined</span>.</span><br></pre></td></tr></table></figure><p>使用链判断运算符<code>?.</code>运算符</p><p>让我们看看<code>?.</code>操作符与<code>user</code>对象的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  homeaddress: &#123;</span><br><span class="line">    country: <span class="string">"USA"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  hobbies: [&#123;<span class="attr">name</span>: <span class="string">"Coding"</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">"Cooking"</span>&#125;],</span><br><span class="line">  getFirstName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="具有属性">具有属性</span></h2><p>访问存在的属性返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.homeaddress.country); </span><br><span class="line"><span class="comment">// prints "USA";</span></span><br></pre></td></tr></table></figure><p>访问不存在的属性会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.officeaddress.country); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property 'country' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用<code>?.</code>不存在的链判断运算符运算符访问属性将返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.officeaddress?.country); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="具有功能">具有功能</span></h2><p>调用存在的函数返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getFirstName()); </span><br><span class="line"><span class="comment">// prints "John";</span></span><br></pre></td></tr></table></figure><p>调用不存在的函数会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getLastName()); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: user.getLastName is not a function";</span></span><br></pre></td></tr></table></figure><p>用<code>?.</code>不存在的<code>Optional chaining operator</code>调用一个函数将返回<code>undefined：-</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getLastName?.()); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="与数组">与数组</span></h2><p>访问数组的现有索引返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">0</span>].name); </span><br><span class="line"><span class="comment">// prints "Coding";</span></span><br></pre></td></tr></table></figure><p>访问数组的不存在的索引会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">3</span>].name); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property 'name' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用可选的链运算符访问数组的不存在的索引<code>?.</code> 将返回undefined：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">3</span>]?.name); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><p>访问不存在的数组会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.dislikes[<span class="number">0</span>].name); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property '0' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用<code>?.</code>不存在的链判断运算符运算符访问数组将返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.dislikes?.[<span class="number">0</span>]?.name); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="与nullish合并-操作符">与Nullish合并?? 操作符</span></h2><p>现在，您知道如果对象不存在，则链判断运算符运算符<code>?.</code>将返回<code>undefined</code>。有时您想返回一个值，而不是<code>undefined</code>通过使用<code>Nullish Coalescing??</code>运算符和可选的<code>chaining?.</code>运算符来返回一个值。</p><p>如果没有空值合并<code>??</code>运算符，则返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> country = user.officeaddress?.country;</span><br><span class="line"><span class="built_in">console</span>.log(country);</span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><p>使用空值合并<code>??</code>运算符，返回默认值：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> country = user.officeaddress?.country ?? <span class="string">"USA"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(country);</span><br><span class="line"><span class="comment">// prints "USA"</span></span><br></pre></td></tr></table></figure><p>原文链接：<br><a href="https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/</a></p><p>参考其它：<br><a href="https://seifi.org/javascript/optional-chaining-in-javascript.html" target="_blank" rel="noopener">https://seifi.org/javascript/optional-chaining-in-javascript.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生不是一种享乐，而是一桩十分沉重的工作。 —-&amp;lt;列夫·托尔斯泰&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/ja
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="运算符" scheme="https://cl9000.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中循环遍历数组</title>
    <link href="https://cl9000.github.io/2021/01/25/JavaScript%E4%B8%AD%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/"/>
    <id>https://cl9000.github.io/2021/01/25/JavaScript%E4%B8%AD%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/</id>
    <published>2021-01-25T14:52:50.000Z</published>
    <updated>2021-05-05T15:00:56.549Z</updated>
    
    <content type="html"><![CDATA[<p>To the one with a hammer, everything looks like a nail. （手中有锤，看什么都像钉）——&lt;芒格&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/how-to-loop-through-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-loop-through-array-in-javascript/</a></p></blockquote><p>在本教程中，我们将学习如何使用JavaScript中的不同方法循环遍历数组的元素。</p><h2><span id="1-for循环">1. for循环</span></h2><p>在for通过阵列的索引用于循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;array.length; i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i, array[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>0 &quot;one&quot;<br>1 &quot;two&quot;<br>2 “three”</p></blockquote><h2><span id="2-for-in-循环">2. for-in 循环</span></h2><p><code>for-in</code> 语句遍历数组的索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">in</span> array)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index, array[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>0 &quot;one&quot;<br>1 &quot;two&quot;<br>2 “three”</p></blockquote><h2><span id="3-for-of-循环">3. for-of 循环</span></h2><p><code>for-of</code>语句遍历数组的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> element <span class="keyword">of</span> array)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>one<br>two<br>three</p></blockquote><h2><span id="4-arrayforeach">4. Array.forEach()</span></h2><p>Array.forEach()方法采用回调函数来遍历数组。我们可以在回调中使用ES6箭头函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</span><br><span class="line"></span><br><span class="line">array.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="built_in">console</span>.log(index, item));</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>0 &quot;one&quot;<br>1 &quot;two&quot;<br>2 “three”</p></blockquote><p>这是在JavaScript中循环访问数组的四种不同方法。建议<code>Array.forEach()</code>与箭头功能一起使用，这会使您的代码非常简短且易于理解。</p><p>尽管有一个限制，我们不能使用break;和continue;流控制语句与<code>Array.forEach()</code>方法。如果你想这样做，使用<code>for，for-in或for-of</code>环代替。</p><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/how-to-loop-through-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-loop-through-array-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;To the one with a hammer, everything looks like a nail. （手中有锤，看什么都像钉）——&amp;lt;芒格&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;

      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中在数组中查找元素</title>
    <link href="https://cl9000.github.io/2021/01/25/JavaScript%E4%B8%AD%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0/"/>
    <id>https://cl9000.github.io/2021/01/25/JavaScript%E4%B8%AD%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0/</id>
    <published>2021-01-25T13:22:37.000Z</published>
    <updated>2021-05-04T13:33:20.048Z</updated>
    
    <content type="html"><![CDATA[<p>人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/how-to-search-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-search-array-in-javascript/</a></p></blockquote><p>在本教程中，我们将学习如何使用 <code>JavaScript</code> 中的不同Array方法在Array中搜索元素。</p><h2><span id="1-arrayfilter">1. Array.filter()</span></h2><p>Array.filter()方法将条件作为函数，并返回满足该条件的元素数组。</p><h4><span id="例子1">例子1</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allEvenNumbers  =  array.filter(<span class="function"><span class="params">n</span> =&gt;</span> n%<span class="number">2</span>==<span class="number">0</span>);  <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"><span class="keyword">const</span> allOddNumbers   =  array.filter(<span class="function"><span class="params">n</span> =&gt;</span> n%<span class="number">2</span>==<span class="number">1</span>);  <span class="comment">// [1, 3, 5, 7, 9]</span></span><br><span class="line"><span class="keyword">const</span> greaterThanNine =  array.filter(<span class="function"><span class="params">n</span> =&gt;</span> n&gt;<span class="number">9</span>);     <span class="comment">// [10]</span></span><br></pre></td></tr></table></figure><h4><span id="例子2">例子2</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"mango"</span>,  <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">135</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">60</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"apple"</span>,  <span class="attr">color</span>: <span class="string">"red"</span>,    <span class="attr">calories</span>: <span class="number">65</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"orange"</span>, <span class="attr">color</span>: <span class="string">"orange"</span>, <span class="attr">calories</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"kiwi"</span>,   <span class="attr">color</span>: <span class="string">"green"</span>,  <span class="attr">calories</span>: <span class="number">46</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yellowFruits = fruits.filter(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.color == <span class="string">"yellow"</span>).map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.name); <span class="comment">// ["mango", "banana"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lowCalories  = fruits.filter(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.calories &lt;=<span class="number">50</span>).map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.name); <span class="comment">// ["orange", "kiwi"]</span></span><br></pre></td></tr></table></figure><h2><span id="2-arrayfind">2. Array.find()</span></h2><p><code>Array.find()</code> 方法将条件作为函数，并返回满足该条件的第一个元素。</p><h4><span id="例子1">例子1</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allEvenNumbers  =  array.find(<span class="function"><span class="params">n</span> =&gt;</span> n%<span class="number">2</span>==<span class="number">0</span>);  <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">const</span> allOddNumbers   =  array.find(<span class="function"><span class="params">n</span> =&gt;</span> n%<span class="number">2</span>==<span class="number">1</span>);  <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">const</span> greaterThanNine =  array.find(<span class="function"><span class="params">n</span> =&gt;</span> n&gt;<span class="number">9</span>);     <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h4><span id="例子2">例子2</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"mango"</span>,  <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">135</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">60</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"apple"</span>,  <span class="attr">color</span>: <span class="string">"red"</span>,    <span class="attr">calories</span>: <span class="number">65</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"orange"</span>, <span class="attr">color</span>: <span class="string">"orange"</span>, <span class="attr">calories</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"kiwi"</span>,   <span class="attr">color</span>: <span class="string">"green"</span>,  <span class="attr">calories</span>: <span class="number">46</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yellowFruits = fruits.find(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.color == <span class="string">"yellow"</span>); </span><br><span class="line"><span class="built_in">console</span>.log(yellowFruits); <span class="comment">// prints &#123;name: "mango", color: "yellow", calories: 135&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lowCalories  = fruits.find(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.calories &lt;=<span class="number">50</span>); </span><br><span class="line"><span class="built_in">console</span>.log(lowCalories); <span class="comment">// prints &#123;name: "orange", color: "orange", calories: 50&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="3-arrayincludes">3. Array.includes()</span></h2><p>Array.includes()方法寻找给定值，并返回true，如果在数组中查找，否则返回false。</p><h4><span id="例子1">例子1</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> includesTen    = array.includes(<span class="number">10</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> includesTwenty = array.includes(<span class="number">20</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4><span id="例子2">例子2</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"mango"</span>,  <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">135</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">60</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"apple"</span>,  <span class="attr">color</span>: <span class="string">"red"</span>,    <span class="attr">calories</span>: <span class="number">65</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"orange"</span>, <span class="attr">color</span>: <span class="string">"orange"</span>, <span class="attr">calories</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"kiwi"</span>,   <span class="attr">color</span>: <span class="string">"green"</span>,  <span class="attr">calories</span>: <span class="number">46</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> includesMango = fruits.map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.name).includes(<span class="string">"mango"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> includesBlue  = fruits.map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.color).includes(<span class="string">"blue"</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4><span id="例子3">例子3</span></h4><p>计算给定字符串中的元音数量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vowels = [<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>];</span><br><span class="line"><span class="keyword">const</span> string = <span class="string">"codingnconcepts"</span>;</span><br><span class="line"><span class="keyword">const</span> countVowels = word.split(<span class="string">""</span>).map(<span class="function"><span class="params">char</span> =&gt;</span> vowels.includes(char) ? <span class="number">1</span> : <span class="number">0</span>).reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line"><span class="built_in">console</span>.log(countVowels); <span class="comment">// prints "4"</span></span><br></pre></td></tr></table></figure><h2><span id="4-arrayindexof">4. Array.indexOf()</span></h2><p><code>Array.indexOf()</code> 方法查找给定值，如果在数组中找到，则返回索引，否则返回-1。</p><h4><span id="例子1">例子1</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> indexOfTen    = array.indexOf(<span class="number">10</span>);  <span class="comment">// 9</span></span><br><span class="line"><span class="keyword">const</span> indexOfTwenty = array.indexOf(<span class="number">20</span>);  <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4><span id="例子2">例子2</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"mango"</span>,  <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">135</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">60</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"apple"</span>,  <span class="attr">color</span>: <span class="string">"red"</span>,    <span class="attr">calories</span>: <span class="number">65</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"orange"</span>, <span class="attr">color</span>: <span class="string">"orange"</span>, <span class="attr">calories</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"kiwi"</span>,   <span class="attr">color</span>: <span class="string">"green"</span>,  <span class="attr">calories</span>: <span class="number">46</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> indexOfMango = fruits.map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.name).indexOf(<span class="string">"mango"</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">const</span> indexOfBlue  = fruits.map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.color).indexOf(<span class="string">"blue"</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/how-to-search-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-search-array-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcept
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>python：ERROR:root:code for hash md5 was not found.</title>
    <link href="https://cl9000.github.io/2020/11/05/python-error-root-code-for-hash-md5/"/>
    <id>https://cl9000.github.io/2020/11/05/python-error-root-code-for-hash-md5/</id>
    <published>2020-11-05T10:35:48.000Z</published>
    <updated>2021-04-30T02:51:03.932Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="python-errorrootcode-for-hash-md5-was-not-found">python: ERROR:root:code for hash md5 was not found.</span></h3><h3><span id="解决方案错误日志在下面">解决方案（错误日志在下面👇）</span></h3><p><strong>解决方案</strong></p><ul><li>执行命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /usr/<span class="built_in">local</span>/Cellar/openssl</span></span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.0.2s</span><br></pre></td></tr></table></figure><ul><li>根据现有版本（<strong>根据自己终端的响应修改，例如1.0.2t</strong>），运行：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew switch openssl 1.0.2s</span></span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cleaning /usr/local/Cellar/openssl/1.0.2s</span><br><span class="line">Opt link created for /usr/local/Cellar/openssl/1.0.2s</span><br></pre></td></tr></table></figure><p>然后，在在Python 2.7 virtualenv中运行以下测试命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> hashlib;</span>m=hashlib.md5();print(m.hexdigest())</span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d41d8cd98f00b204e9800998ecf8427e</span><br></pre></td></tr></table></figure><p>如此便正常解决了</p><p><strong>如下错误日志：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">ERROR:root:code for hash md5 was not found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> <span class="keyword">md5</span></span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> <span class="keyword">sha1</span> was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> <span class="keyword">sha1</span></span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha224 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha224</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha256 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha256</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha384 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha384</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha512 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha512</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/bin/pip"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    load_entry_point(<span class="string">'pip==19.0.2'</span>, <span class="string">'console_scripts'</span>, <span class="string">'pip'</span>)()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">489</span>, <span class="keyword">in</span> load_entry_point</span><br><span class="line">    <span class="keyword">return</span> get_distribution(dist).load_entry_point(<span class="keyword">group</span>, <span class="keyword">name</span>)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2793</span>, <span class="keyword">in</span> load_entry_point</span><br><span class="line">    <span class="keyword">return</span> ep.load()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2411</span>, <span class="keyword">in</span> <span class="keyword">load</span></span><br><span class="line">    <span class="keyword">return</span> self.resolve()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2417</span>, <span class="keyword">in</span> resolve</span><br><span class="line">    <span class="keyword">module</span> = __import__(self.module_name, fromlist=[<span class="string">'__name__'</span>], <span class="keyword">level</span>=<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_internal/__init__.py"</span>, line <span class="number">19</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> pip._vendor.urllib3.exceptions <span class="keyword">import</span> DependencyWarning</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/__init__.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .connectionpool <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/connectionpool.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .connection <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/connection.py"</span>, line <span class="number">38</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .util.ssl_ <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/util/__init__.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .ssl_ <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/util/ssl_.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> hashlib <span class="keyword">import</span> <span class="keyword">md5</span>, <span class="keyword">sha1</span>, sha256</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> <span class="keyword">name</span> <span class="keyword">md5</span></span><br></pre></td></tr></table></figure><h3><span id="ref">ref</span></h3><ul><li><a href="https://stackoverflow.com/questions/59269208/errorrootcode-for-hash-md5-was-not-found-when-using-any-hg-mercurial-command#" target="_blank" rel="noopener">“ERROR:root:code for hash md5 was not found” when using any hg mercurial commands<br></a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;python-errorrootcode-for-hash-md5-was-not-found&quot;&gt;python: ERROR:root:code for hash md5 was not found.&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span id=
      
    
    </summary>
    
    
      <category term="Python" scheme="https://cl9000.github.io/categories/Python/"/>
    
    
      <category term="python error" scheme="https://cl9000.github.io/tags/python-error/"/>
    
      <category term="ERROR:root:code" scheme="https://cl9000.github.io/tags/ERROR-root-code/"/>
    
  </entry>
  
  <entry>
    <title>iOS 修改设备定位 虚拟定位</title>
    <link href="https://cl9000.github.io/2020/10/19/iOS-%E4%BF%AE%E6%94%B9%E8%AE%BE%E5%A4%87%E5%AE%9A%E4%BD%8D/"/>
    <id>https://cl9000.github.io/2020/10/19/iOS-%E4%BF%AE%E6%94%B9%E8%AE%BE%E5%A4%87%E5%AE%9A%E4%BD%8D/</id>
    <published>2020-10-19T04:18:29.000Z</published>
    <updated>2021-04-30T02:46:45.389Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="方案一">方案一</span></h2><p>使用 <strong>Xcode</strong> 修改的定位是设备的定位，<strong>iOS</strong> 开发者较为熟悉。</p><h4><span id="一-xcode中新建一个项目创建一个gpx文件">一、Xcode中新建一个项目，创建一个gpx文件</span></h4><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location001.png" alt></p><h4><span id="二-修改经纬度">二、修改经纬度</span></h4><p>修改定位文件gpx，把里面的经纬度改成你要设定的地点的经纬度。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location004.png" alt></p><h4><span id="三-修改绑定">三、修改绑定</span></h4><p>修改定位文件为你刚才创建的文件<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location002.png" alt></p><h4><span id="四-运行修改">四、运行修改</span></h4><p>选择真机设备 运行一下工程，然后打开地图，查看一下当前定位，改变了就成功了。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location003.png" alt></p><h2><span id="方案二-简单快捷">方案二 简单快捷</span></h2><p>若没有iOS开发经验，需要简单快捷，可使用<strong>i4</strong> 修改软件虚拟位置，步骤入下</p><ol><li>Mac appStore（或PC-i4官网）下载 i4（爱思助手）<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location001.png" alt="ios-location001.png"></li><li>数据线连接手机后，工具 - 虚拟定位<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location002.png" alt="ios-location002.png"></li><li>搜索位置或经纬度录入设置<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location003.png" alt="ios-location003.png"></li></ol><p><strong>注意</strong><br>iOS14系统仅支持4个小时，若恢复真实位置，需要重新启动手机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;方案一&quot;&gt;方案一&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;使用 &lt;strong&gt;Xcode&lt;/strong&gt; 修改的定位是设备的定位，&lt;strong&gt;iOS&lt;/strong&gt; 开发者较为熟悉。&lt;/p&gt;
&lt;h4&gt;&lt;span id=&quot;一-xcode中新建一个项目创建
      
    
    </summary>
    
    
      <category term="技巧" scheme="https://cl9000.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="工具" scheme="https://cl9000.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="虚拟定位" scheme="https://cl9000.github.io/tags/%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/"/>
    
      <category term="手机定位" scheme="https://cl9000.github.io/tags/%E6%89%8B%E6%9C%BA%E5%AE%9A%E4%BD%8D/"/>
    
      <category term="修改定位" scheme="https://cl9000.github.io/tags/%E4%BF%AE%E6%94%B9%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 个人页的README文件 GitHub Profile</title>
    <link href="https://cl9000.github.io/2020/10/15/GitHub-Profile-GitHub%E4%B8%AA%E4%BA%BA%E9%A6%96%E9%A1%B5/"/>
    <id>https://cl9000.github.io/2020/10/15/GitHub-Profile-GitHub%E4%B8%AA%E4%BA%BA%E9%A6%96%E9%A1%B5/</id>
    <published>2020-10-15T08:39:18.000Z</published>
    <updated>2021-04-30T02:43:38.043Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="github-个人页的readme文件">GitHub 个人页的README文件</span></h3><p>当你尝试去创建一个与你<code>Github</code>用户名相同的仓库时，会发现这是<code>Github</code>为你预留的特殊仓库，用来作为你的<code>Github Profile</code>，这个仓库就相当于一个可以显示在你<code>Github</code>个人页的README文件。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-gprpf-20201106.png" alt="img-gprpf-20201106.png"></p><p>本文会帮助你美化你的Github Profile，让它展示更多有用的信息。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-gh-profile-20201106.png" alt="img-gh-profile-20201106.png"></p><p>例如添加一个<code>首页被访问次数的计数器</code>，一个Github被Star与Commit的概览信息，以及各种技能<code>标签</code>，设备标签等。还可以利用<code>wakatime</code>显示你<code>最近编码各类语言的使用时长</code>，以及你最近<code>Steam游戏游玩排行榜</code>。</p><h4><span id="首页计数器">首页计数器</span></h4><p>这个很容易实现，只需要一个统计资源请求的后台服务即可，有很多第三方的服务可以使用，page_id后面替换为自己的Github用户名。</p><p><code>![](https://visitor-badge.glitch.me/badge?page_id=cl9000.readme)</code><br><img src="https://visitor-badge.glitch.me/badge?page_id=cl9000.readme" alt></p><p>参考另位博友自己搭建的，是使用下方。（@后面替换为自己的Github用户名）<br><code>![](http://antzuhl.cn:4000/get/@antzuhl.readme)</code></p><h4><span id="github信息概览">Github信息概览</span></h4><p><img src="https://github-readme-stats.vercel.app/api?username=cl9000&amp;show_icons=true&amp;count_private=true&amp;hide=prs&amp;theme=default_repocard" alt="info"></p><p>这个也是使用现有的<a href="https://github.com/anuraghazra/github-readme-stats" target="_blank" rel="noopener">开源github项目 github-readme-stats</a>，根据url来配置卡片信息。</p><p><code>![info](https://github-readme-stats.vercel.app/api?username=cl9000&amp;show_icons=true&amp;count_private=true&amp;hide=prs&amp;theme=default_repocard)</code></p><p>url中username为你的Github用户名，theme为主题配置，支持的主题样式丰富，如下：<br><code>dark, radical, merko, gruvbox, tokyonight, onedark, cobalt, synthwave, highcontrast, dracula</code></p><h4><span id="技能-ampamp-设备卡片">技能 &amp;&amp; 设备卡片</span></h4><p>这是Github很多开源仓库都会使用的东西，其本质也是第三方服务后台动态生成的图片，类似：<br><img src="https://visitor-badge.glitch.me/badge?page_id=@cl9000.readme" alt="访客徽章"></p><p><code>simpleicons</code>提供了很多的icon，几乎可以找到所以的程序语言，设备，IDE，开源产品的icon。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-simpleicons-20201106.png" alt="img-simpleicons-20201106.png"></p><p>可参阅 <a href="https://simpleicons.org/" target="_blank" rel="noopener">simpleicons</a> 和 <a href="https://shields.io/" target="_blank" rel="noopener">shields.io</a> 配合使用展现不同样式，如下：</p><ul><li>linux卡片</li></ul><p><code>[![](https://img.shields.io/badge/OS-Arch%20Linux-33aadd?style=flat-square&amp;logo=arch-linux&amp;logoColor=ffffff)](https://www.archlinux.org/)</code><br><a href="https://www.archlinux.org/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/OS-Arch%20Linux-33aadd?style=flat-square&amp;logo=arch-linux&amp;logoColor=ffffff" alt></a></p><ul><li>mac卡片</li></ul><p><code>[![](https://img.shields.io/badge/macOS-Hackintosh-292e33?style=flat-square&amp;logo=apple&amp;logoColor=ffffff)](https://www.tonymacx86.com/)</code><br><a href="https://www.tonymacx86.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/macOS-Hackintosh-292e33?style=flat-square&amp;logo=apple&amp;logoColor=ffffff" alt></a></p><ul><li>手机设备</li></ul><p><code>[![](https://img.shields.io/badge/Honor-V30-f5010c?style=flat-square&amp;logo=huawei&amp;logoColor=ffffff)](https://www.apple.com/)</code><br><a href="https://www.apple.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Honor-V30-f5010c?style=flat-square&amp;logo=huawei&amp;logoColor=ffffff" alt></a></p><ul><li>程序语言</li></ul><p><code>[![](https://img.shields.io/badge/-Java-007396?style=flat-square&amp;logo=java&amp;logoColor=ffffff)](https://reactjs.org/)</code><br><a href="https://reactjs.org/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/-Java-007396?style=flat-square&amp;logo=java&amp;logoColor=ffffff" alt></a></p><ul><li>游戏</li></ul><p><code>[![](https://img.shields.io/badge/Steam-171a21?style=flat-square&amp;logo=steam&amp;logoColor=ffffff)](https://steamcommunity.com/id/antzuhl)</code><br><a href="https://steamcommunity.com/id/antzuhl" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Steam-171a21?style=flat-square&amp;logo=steam&amp;logoColor=ffffff" alt></a></p><h4><span id="编程-ampamp-游戏时长统计">编程 &amp;&amp; 游戏时长统计</span></h4><p>主要利用了 <code>Github Action</code> 的机制，触发定时任务去 <code>Wakatime平台</code> 拉取数据进行统计，而 Wakatime 平台提供了 <code>JetBrains全家桶、 VsCode、 Chrome的插件</code>，用于统计用户的编程时长数据。</p><ol><li>创建一个Github Gist（下方）： <code>https://gist.github.com/</code></li><li>新建一个拥有gist空间权限的Token，保存它 <code>https://github.com/settings/tokens/new</code></li><li>创建一个WakaTime的账号 <code>https://wakatime.com/signup</code></li><li>在你的WakaTime账号设置中选择公开你的编码活动 <code>https://wakatime.com/settings/profile</code><br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-wakatim-20201106.png" alt="img-wakatim-20201106.png"></li><li>在你WakaTime账户设置中创建Api-Key，并且复制它 <code>https://wakatime.com/settings/api-key</code></li><li>Fork这个仓库 <code>https://github.com/matchai/waka-box</code></li><li>编辑 <code>.github/workflows/schedule.yml</code> 文件，将其中的GIST_ID设置为你创建的gist页面的url</li><li>在你仓库的安全设置中添加下面两个环境变量 <code>Settings &gt; Secrets</code><ul><li>GH_TOKEN: 第2步的 <code>gist token</code></li></ul><ul><li>WAKATIME_API_KEY: 第5步中的 <code>wakatime Api-key</code></li></ul></li></ol><p>这样就算是完成了，如果你有 Github Action知识，并且懂 cron 表达式，可以看看这个仓库的action脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name: Update gist with WakaTime stats</span><br><span class="line">on:</span><br><span class="line">  schedule:</span><br><span class="line">    - cron: &quot;0 0 * * *&quot;</span><br><span class="line">jobs:</span><br><span class="line">  update-gist:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@master</span><br><span class="line">      - name: Update gist</span><br><span class="line">        uses: matchai/waka-box@master</span><br><span class="line">        env:</span><br><span class="line">          GH_TOKEN: $&#123;&#123; secrets.GH_TOKEN &#125;&#125;</span><br><span class="line">          GIST_ID: 968220c97e8da1d047a9a480fa432e54</span><br><span class="line">          WAKATIME_API_KEY: $&#123;&#123; secrets.WAKATIME_API_KEY &#125;&#125;</span><br></pre></td></tr></table></figure><p>其中 cron 就是该脚本执行的时间，每个小时的0秒0分，也就是指每小时执行一次。</p><p>你可以将这个gist的script文件添加到你的 Github Profile 中，用来在首页显示你的编码时间。</p><p>统计 Steam 游戏时间也是类似，不过没有 Wakatime 这样的平台去让我们拉取数据，但是我们可以直接去 Steam 拉取。</p><p>可以参考这个仓库 <a href="https://github.com/journey-ad/steam-go" target="_blank" rel="noopener">https://github.com/journey-ad/steam-go</a></p><p>代码片段，可以看到 <code>STEAM_API_KEY</code> 与 <code>STEAM_ID</code> 也是需要你设置到仓库环境变量中去的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">true<span class="string">"context"</span></span><br><span class="line">true<span class="string">"fmt"</span></span><br><span class="line">true<span class="string">"os"</span></span><br><span class="line">true<span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">truesteam <span class="string">"github.com/YouEclipse/steam-go/pkg"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">truesteamClient := steam.NewClient(os.Getenv(<span class="string">"STEAM_API_KEY"</span>), <span class="literal">nil</span>)</span><br><span class="line">truesteamID, _ := strconv.ParseUint(os.Getenv(<span class="string">"STEAM_ID"</span>), <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">truectx := context.Background()</span><br><span class="line">trueparams := &amp;steam.GetOwnedGamesParams&#123;</span><br><span class="line">truetrueSteamID:                steamID,</span><br><span class="line">truetrueIncludeAppInfo:         <span class="literal">true</span>,</span><br><span class="line">truetrueIncludePlayedFreeGames: <span class="literal">true</span>,</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">trueresult, err := steamClient.IPlayerService.GetOwnedGames(ctx, params)</span><br><span class="line">true<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">truetrue<span class="built_in">panic</span>(err)</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">truefmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质都是类似于爬虫，利用 <code>Github Action</code> 来达到触发的效果。</p><p>这样就算是完成了，还有更多玩法可以自己探索。</p><h3><span id="关于访问gist入口-ampamp-无法访问gist解决方案">关于访问Gist入口 &amp;&amp; 无法访问Gist解决方案</span></h3><ol><li>登录GitHub后，菜单中 <strong>your gists</strong></li><li>修改hosts文件，新增以下：</li></ol><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.30.253.113</span>  github.com</span><br><span class="line"><span class="number">192.30.253.118</span>  gist.github.com</span><br><span class="line"><span class="number">192.30.253.119</span>  gist.github.com</span><br></pre></td></tr></table></figure><h3><span id="ref">ref</span></h3><p><a href="http://antzuhl.cn/archives/githubprofile" target="_blank" rel="noopener">http://antzuhl.cn/archives/githubprofile</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;github-个人页的readme文件&quot;&gt;GitHub 个人页的README文件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;当你尝试去创建一个与你&lt;code&gt;Github&lt;/code&gt;用户名相同的仓库时，会发现这是&lt;code&gt;Github&lt;/code&gt;为你预留的特
      
    
    </summary>
    
    
      <category term="Github" scheme="https://cl9000.github.io/categories/Github/"/>
    
    
      <category term="Github" scheme="https://cl9000.github.io/tags/Github/"/>
    
      <category term="Github Profile" scheme="https://cl9000.github.io/tags/Github-Profile/"/>
    
      <category term="Github Gist" scheme="https://cl9000.github.io/tags/Github-Gist/"/>
    
      <category term="wakatime" scheme="https://cl9000.github.io/tags/wakatime/"/>
    
      <category term="shields.io" scheme="https://cl9000.github.io/tags/shields-io/"/>
    
      <category term="simpleicons" scheme="https://cl9000.github.io/tags/simpleicons/"/>
    
      <category term="visitor-badge" scheme="https://cl9000.github.io/tags/visitor-badge/"/>
    
      <category term="readme" scheme="https://cl9000.github.io/tags/readme/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的AJAX调用</title>
    <link href="https://cl9000.github.io/2020/10/14/JavaScript%E4%B8%AD%E7%9A%84AJAX%E8%B0%83%E7%94%A8/"/>
    <id>https://cl9000.github.io/2020/10/14/JavaScript%E4%B8%AD%E7%9A%84AJAX%E8%B0%83%E7%94%A8/</id>
    <published>2020-10-14T14:53:59.000Z</published>
    <updated>2021-05-02T15:21:38.419Z</updated>
    
    <content type="html"><![CDATA[<p>人生的价值，并不是用时间，而是用深度去衡量的。 ——&lt;列夫·托尔斯泰&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源： <a href="https://codingnconcepts.com/javascript/how-to-make-ajax-calls-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-make-ajax-calls-in-javascript/</a></p></blockquote><p>在本教程中，我们将学习如何使用 <code>JavaScript</code> 进行 <code>AJAX</code>调用。</p><h2><span id="1-ajax">1. AJAX</span></h2><p>术语 <code>AJAX</code> 代表<code>异步JavaScript</code>和<code>XML</code></p><p>术语<code>AJAX</code>在<code>JavaScript</code>中用于发出异步网络请求以获取资源。资源并不局限于<code>XML</code>，正如术语所表明的那样，这令人困惑。术语AJAX也用于获取<code>JSON、HTML</code>或纯文本等资源。你可能已经听说过这个术语。</p><p>有多种方式可以发出网络请求并从服务器获取数据。</p><h2><span id="2-xmlhttprequest">2. XMLHttpRequest</span></h2><p>以前，<code>XMLHttpRequest</code>对象(也简称为<code>XHR</code>)用于从服务器异步检索数据。</p><p>名称中出现<code>XML</code>是因为它首先用于检索<code>XML</code>数据。现在，它还可以用于检索<code>JSON、HTML或纯文本</code>。</p><h3><span id="21-example-get">2.1. Example: GET</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Error Occurred :'</span>, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onload = success;</span><br><span class="line">xhr.onerror = error;</span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"https://jsonplaceholder.typicode.com/posts/1"</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>我们看到，要发出一个简单的<code>GET</code>请求，我们需要两个侦听器来处理请求的成功和失败。我们还需要调用 <code>open()</code> 和 <code>send()</code> 方法。来自服务器的响应存储在 <code>responseText</code> 变量中，该变量使用<code>JSON.parse()</code> 转换为<code>JavaScript</code> 对象。</p><h3><span id="22-example-post">2.2. Example: POST</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Error Occurred :'</span>, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onload = success;</span><br><span class="line">xhr.onerror = error;</span><br><span class="line">xhr.open(<span class="string">"POST"</span>, <span class="string">"https://jsonplaceholder.typicode.com/posts"</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json; charset=UTF-8"</span>);</span><br><span class="line">xhr.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    title: <span class="string">'foo'</span>,</span><br><span class="line">    body: <span class="string">'bar'</span>,</span><br><span class="line">    userId: <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们看到<code>POST</code>请求类似于<code>GET</code>请求。我们需要使用<code>setRequestHeader</code>附加设置请求头<code>“Content-Type”</code>，在<code>send</code>方法中并使用<code>JSON.Stringify()</code>将<code>JSON</code>体作为字符串发送进行。</p><h3><span id="23-xmlhttprequest-vs-fetch">2.3. XMLHttpRequest vs Fetch</span></h3><p>多年来，我们一直使用 <code>XMLHttpRequest</code> 来请求数据。现代的<code>fetch()</code> API允许您进行类似于 <code>XMLHttpRequest(XHR)</code>的网络请求。主要的区别是<code>fetch()</code> API使用了<code>Promises</code>，它支持更简单、更干净的API，避免了回调地狱和必须记住<code>XMLHttpRequest</code>复杂的API。</p><h2><span id="3-fetch-api">3. Fetch API</span></h2><p><code>Fetch</code>是一个用于进行<code>AJAX</code>调用的原生<code>JavaScript API</code>，它得到了大多数浏览器的支持，现在被广泛使用。</p><h3><span id="31-api-基本用法">3.1. API 基本用法</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, options)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// handle response data</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// handle errors</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h5><span id="api参数">API参数</span></h5><p><code>fetch() API</code>有两个参数:</p><ul><li><code>Url</code> 是一个必传参数，它是您想要获取的资源的路径。</li><li><code>Options</code> 是一个可选参数。您不需要提供此参数来进行简单的GET请求。您需要传递此参数来提供关于请求的附加信息，例如<ul><li><strong>method</strong>: GET | POST | PUT | DELETE | PATCH</li><li><strong>headers</strong>： 请求头对象，例如{&quot; Content-type &quot;: &quot; application/json;charset = utf - 8”}</li><li><strong>mode</strong>: cors | no-cors |同源|导航</li><li><strong>Cache</strong>: default | reload | no-cache</li><li><strong>body</strong>: 请求正文，通常用于POST请求</li></ul></li></ul><h5><span id="api返回promise对象">API返回Promise对象</span></h5><p><code>fetch() API</code>返回一个 <code>promise</code> 对象。</p><p>如果存在网络错误，承诺将被拒绝，这将在 <code>.catch()</code> 块中处理。<br>如果有来自服务器的带有任何状态码(如<strong>200、404、500</strong>)的响应，则承诺将被解析。响应对象可以在 <code>.then()</code> 块中处理。</p><h5><span id="错误处理">错误处理</span></h5><p>请注意，我们期望成功响应的状态码是200 (OK状态)，但是<code>fetch() API</code>解决了这个承诺，即使响应带有错误状态码，比如<strong>404</strong>(资源未找到)和500(内部服务器错误)。我们需要在<code>.then()</code>块中显式地处理这些。</p><p>我们可以在响应对象中看到<code>HTTP-status</code>:</p><p><code>status—HTTP</code>状态代码，例如200。<br><code>ok - boolean</code>，如果HTTP状态码是200-299则为true。</p><h3><span id="32-example-get">3.2. Example: GET</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getTodoItem = fetch(<span class="string">'https://jsonplaceholder.typicode.com/todos/1'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err));</span><br><span class="line"></span><br><span class="line">getTodoItem.then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(response));</span><br></pre></td></tr></table></figure><blockquote><p>Response<br>➤ { userId: 1, id: 1, title: “delectus aut autem”, completed: false }</p></blockquote><p>上述代码中需要注意的两件事:-</p><ul><li><code>fetch API</code>返回一个<code>promise</code>对象，我们可以把它赋值给一个变量，然后再执行。</li><li>你必须另外调用<code>response.JSON()</code>来将响应对象转换为<code>JSON</code></li></ul><h5><span id="错误处理">错误处理</span></h5><p>让我们看看当<code>HTTP GET</code>请求抛出<strong>500</strong>错误时会发生什么:-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://httpstat.us/500'</span>) <span class="comment">// this API throw 500 error</span></span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Inside first then block"</span>);</span><br><span class="line">    <span class="keyword">return</span> response.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">json</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Inside second then block"</span>, json))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">"Inside catch block:"</span>, err));</span><br></pre></td></tr></table></figure><blockquote><p>Inside first then block<br>➤<span style="color:red;"> ⓧ Inside catch block: SyntaxError: Unexpected token I in JSON at position 4</span></p></blockquote><p>我们看到，即使<code>API</code>抛出<strong>500</strong>错误，它仍然进入第一个 <code>then()</code>块，在那里它不能解析错误JSON和抛出错误被<code>catch()</code>块捕获。</p><p>这意味着如果我们使用<code>fetch() API</code>:-，我们需要像这样显式地处理这样的错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://httpstat.us/500'</span>)</span><br><span class="line">  .then(handleErrors)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(response))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">"Inside catch block:"</span>, err));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleErrors</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!response.ok) &#123; <span class="comment">// throw error based on custom conditions on response</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>➤ <span style="color:red;">Inside catch block: Error: Internal Server Error at handleErrors (Script snippet %239:9)</span></p></blockquote><h3><span id="33-example-post">3.3 Example: POST</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://jsonplaceholder.typicode.com/todos'</span>, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      completed: <span class="literal">true</span>,</span><br><span class="line">      title: <span class="string">'new todo item'</span>,</span><br><span class="line">      userId: <span class="number">1</span></span><br><span class="line">    &#125;),</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">"Content-type"</span>: <span class="string">"application/json; charset=UTF-8"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function"><span class="params">json</span> =&gt;</span> <span class="built_in">console</span>.log(json))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure><blockquote><p>Response<br>➤ {completed: true, title: “new todo item”, userId: 1, id: 201}</p></blockquote><p>上述代码中需要注意的两件事:-</p><ul><li><code>POST</code>请求类似于<code>GET</code>请求。我们需要另外在<code>fetch() API</code>的第二个参数中发送<code>method、body和headers</code>属性。</li><li>我们必须明确 <code>JSON.stringify()</code> 要求body参数</li></ul><h2><span id="4-axios-api">4. Axios API</span></h2><p><code>Axios API</code>非常类似于只有很少增强的获取API。我个人更喜欢使用<code>Axios API</code>而不是<code>fetch() API</code>，原因如下</p><ul><li>为GET axios.get()， POST axios.post()，…提供不同的方法，这使您的代码更简洁</li><li>考虑<code>299++</code>响应代码(如404,500)作为错误，可以在<code>catch()</code>块中处理，因此您不需要显式地处理这些错误</li><li>它提供了与旧浏览器(如IE11)的向后兼容性</li><li>它将响应作为JSON对象返回，因此不需要进行任何解析</li><li>它将POST请求体作为JSON对象，因此不需要进行任何stringify</li></ul><h3><span id="41-example-get">4.1. Example: GET</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// way to include script in chrome console</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">script.src = <span class="string">'https://unpkg.com/axios/dist/axios.min.js'</span>;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://jsonplaceholder.typicode.com/todos/1'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(response.data))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err));</span><br></pre></td></tr></table></figure><blockquote><p>Response<br>{ userId: 1, id: 1, title: “delectus aut autem”, completed: false }</p></blockquote><p>我们看到我们直接使用 <code>response.data</code> 得到响应数据。与<code>fetch() API</code>不同，数据没有任何解析对象。</p><h5><span id="错误处理-error-handling">错误处理 Error Handling</span></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'http://httpstat.us/500'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(response.data))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">"Inside catch block:"</span>, err));</span><br></pre></td></tr></table></figure><blockquote><p>➤ Inside catch block: Error: Network Error</p></blockquote><h3><span id="43-example-post">4.3. Example: POST</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'https://jsonplaceholder.typicode.com/todos'</span>, &#123;</span><br><span class="line">      completed: <span class="literal">true</span>,</span><br><span class="line">      title: <span class="string">'new todo item'</span>,</span><br><span class="line">      userId: <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(response.data))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure><blockquote><p>➤ {completed: true, title: “new todo item”, userId: 1, id: 201}</p></blockquote><p>我们看到<code>POST</code>方法非常简短和简洁。你可以直接传递请求体参数，而不是像f<code>etch() API</code>那样进行字符串化。</p><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/how-to-make-ajax-calls-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-make-ajax-calls-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API</a></li><li><a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生的价值，并不是用时间，而是用深度去衡量的。 ——&amp;lt;列夫·托尔斯泰&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源： &lt;a href=&quot;https://codingnconcepts.com
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中在数组开头添加元素</title>
    <link href="https://cl9000.github.io/2020/09/21/JavaScript%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E5%BC%80%E5%A4%B4%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0/"/>
    <id>https://cl9000.github.io/2020/09/21/JavaScript%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E5%BC%80%E5%A4%B4%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0/</id>
    <published>2020-09-21T13:16:43.000Z</published>
    <updated>2021-05-04T13:30:09.291Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/how-to-add-element-at-beggining-of-javascript-array/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-add-element-at-beggining-of-javascript-array/</a></p></blockquote><p>在本教程中，我们将学习在 <code>JavaScript</code> 数组的开头添加新元素的不同方法。</p><h2><span id="1-使用-arrayunshift">1. 使用 Array.unshift（）</span></h2><p>在数组开头添加元素的最简单方法是使用<code>unshift()</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">"Apple"</span>, <span class="string">"Banana"</span>, <span class="string">"Mango"</span>];</span><br><span class="line"></span><br><span class="line">fruits.unshift(<span class="string">"Orange"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="comment">// Prints ["Orange", "Apple", "Banana", "Mango"]</span></span><br><span class="line"></span><br><span class="line">fruits.unshift(<span class="string">"Guava"</span>, <span class="string">"Papaya"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="comment">// Prints ["Guava", "Papaya", "Orange", "Apple", "Banana", "Mango"]</span></span><br></pre></td></tr></table></figure><p>它添加了原始数组的元素。有时您不希望更改原始数组，而是将其分配给新变量。</p><p>在Javascript中，您可以在一条语句中以多种方式执行此操作。</p><h2><span id="2-使用-扩展运算符">2. 使用 扩展运算符（…）</span></h2><p>我们可以使用扩展运算符 <strong>…</strong> 来制作数组的副本。简短的语法非常方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">"Apple"</span>, <span class="string">"Banana"</span>, <span class="string">"Mango"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moreFruits = [<span class="string">"Orange"</span>, ...fruits];</span><br><span class="line"><span class="built_in">console</span>.log(moreFruits);</span><br><span class="line"><span class="comment">// Prints ["Orange", "Apple", "Banana", "Mango"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someoMoreFruits = [<span class="string">"Guava"</span>, <span class="string">"Papaya"</span>, ...moreFruits];</span><br><span class="line"><span class="built_in">console</span>.log(someoMoreFruits);</span><br><span class="line"><span class="comment">// Prints ["Guava", "Papaya", "Orange", "Apple", "Banana", "Mango"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="comment">// Prints ["Apple", "Banana", "Mango"]</span></span><br></pre></td></tr></table></figure><p>在开头添加新元素，然后是原始Array的副本（使用<code>...</code>），并分配给新变量。</p><p>我们看到我们的原始数组保持不变。</p><h2><span id="3-使用-arrayconcat">3. 使用 Array.concat（）</span></h2><p>我们也可以使用用户<code>concat()</code>方法在开始时连接两个（或更多）数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">"Apple"</span>, <span class="string">"Banana"</span>, <span class="string">"Mango"</span>];</span><br><span class="line"><span class="keyword">var</span> moreFruits = [<span class="string">"Orange"</span>];</span><br><span class="line"><span class="keyword">var</span> someoMoreFruits = [<span class="string">"Guava"</span>, <span class="string">"Papaya"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allFruits = someoMoreFruits.concat(moreFruits, fruits);</span><br><span class="line"><span class="built_in">console</span>.log(allFruits);</span><br><span class="line"><span class="comment">// Prints ["Guava", "Papaya", "Orange", "Apple", "Banana", "Mango"]</span></span><br></pre></td></tr></table></figure><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/how-to-add-element-at-beggining-of-javascript-array/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-add-element-at-beggining-of-javascript-array/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcept
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中合并两个或多个JSON对象</title>
    <link href="https://cl9000.github.io/2020/09/08/JavaScript%E4%B8%AD%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%88%96%E5%A4%9A%E4%B8%AAJSON%E5%AF%B9%E8%B1%A1/"/>
    <id>https://cl9000.github.io/2020/09/08/JavaScript%E4%B8%AD%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%88%96%E5%A4%9A%E4%B8%AAJSON%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-09-08T12:44:23.000Z</published>
    <updated>2021-05-03T12:47:50.565Z</updated>
    
    <content type="html"><![CDATA[<p>生活只有在平淡无味的人看来才是空虚而平淡无味的。 ——&lt;尼古拉·加夫里诺维奇·车尔尼雪夫斯基&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/combine-json-objects-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/combine-json-objects-in-javascript/</a></p></blockquote><p>在本快速教程中，我们将学习如何在JavaScript中将两个或多个JSON对象组合为一个对象。</p><h2><span id="objectassign">Object.assign()</span></h2><p><code>Object.assign</code>是添加两个或更多对象的最直接方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">eat</span>: <span class="string">'pizza'</span>, <span class="attr">drink</span>: <span class="string">'coke'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">drive</span>: <span class="string">'car'</span>, <span class="attr">ride</span>: <span class="string">'bus'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123; <span class="attr">pet</span>: <span class="string">'dog'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj4 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1, obj2, obj3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj4);</span><br><span class="line"><span class="comment">// &#123;eat: "pizza", drink: "coke", drive: "car", ride: "bus", pet: "dog"&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="扩展运算符">扩展运算符 (…)</span></h2><p>如果您已开始使用ES6，则建议使用扩展运算符 (…)，它可以更方便地组合两个或更多对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">eat</span>: <span class="string">'pizza'</span>, <span class="attr">drink</span>: <span class="string">'coke'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">drive</span>: <span class="string">'car'</span>, <span class="attr">ride</span>: <span class="string">'bus'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123; <span class="attr">pet</span>: <span class="string">'dog'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj4 = &#123; ...obj1, ...obj2, ...obj3 &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj4);</span><br><span class="line"><span class="comment">// &#123;eat: "pizza", drink: "coke", drive: "car", ride: "bus", pet: "dog"&#125;</span></span><br></pre></td></tr></table></figure><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/combine-json-objects-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/combine-json-objects-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生活只有在平淡无味的人看来才是空虚而平淡无味的。 ——&amp;lt;尼古拉·加夫里诺维奇·车尔尼雪夫斯基&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnc
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 使用DevTools检查叠加元素</title>
    <link href="https://cl9000.github.io/2020/08/27/Chrome%E4%BD%BF%E7%94%A8DevTools%E6%A3%80%E6%9F%A5%E5%8F%A0%E5%8A%A0%E5%85%83%E7%B4%A0/"/>
    <id>https://cl9000.github.io/2020/08/27/Chrome%E4%BD%BF%E7%94%A8DevTools%E6%A3%80%E6%9F%A5%E5%8F%A0%E5%8A%A0%E5%85%83%E7%B4%A0/</id>
    <published>2020-08-27T12:34:42.000Z</published>
    <updated>2021-05-03T12:43:12.199Z</updated>
    
    <content type="html"><![CDATA[<p>人生的价值，并不是用时间，而是用深度去衡量的。 ——&lt;列夫·托尔斯泰&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/inspect-overlay-elements-chrome-devtools/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/inspect-overlay-elements-chrome-devtools/</a></p></blockquote><p>在本教程中，我们将学习如何使用 <code>Chrome DevTool</code> 检查覆盖元素。</p><h2><span id="1-叠加元素">1. 叠加元素</span></h2><p>叠加元素是在另一个元素上呈现的那些元素。例如：</p><ul><li>单击<strong>Combo Box</strong>时，下拉值显示为覆盖图</li><li>当您单击或悬停在<strong>Menu</strong>上时，<strong>子菜单</strong>列表将显示为覆盖图</li><li>单击或将鼠标悬停在<strong>Icon</strong>上时，工具提示将显示为覆盖图</li><li>当您开始在<strong>Search Box</strong>输入内容时，搜索建议将显示为覆盖图<br>所有这些叠加元素中普遍存在的一件事是，它们的原始元素（例如组合框，菜单，图标或搜索框）失去焦点后，它们就会消失。</li></ul><p>我很难检查和调试这些叠加层元素的CSS，因为一旦我单击<code>Chrome DevTool Inspect ⬉Icon</code>，它们就会消失。直到我发现了这个绝妙的技巧。</p><h2><span id="2-检查覆盖元素">2. 检查覆盖元素</span></h2><h3><span id="21-在子树修改上使用break">2.1. 在子树修改上使用Break</span></h3><p>我们将检查在“搜索框”中输入时显示的Google搜索建议叠加层。按照步骤：</p><ul><li>首先，我们需要打开一个Chrome DevTool。我们可以通过多种方式做到这一点：<ul><li>在<code>Chrome</code>的主菜单中，选择<code>更多工具➞开发人员工具</code><br>-右键单击元素附近，选择<code>检查</code></li></ul></li><li>单击<code>DevTool</code>的<code>Elements</code>选项卡。</li><li>右键单击<code>&lt;body&gt;</code>HTML元素。</li><li>选择<code>Break on➞</code>子树修改</li></ul><p>就是这样。现在，当您开始在Google搜索框中输入内容时。搜索建议显示为DOM修改的覆盖元素，在该<code>&lt;body&gt;</code>元素上应用了断点并冻结了浏览器。</p><p>现在，您可以检查搜索建议覆盖元素，它不会消失。</p><p><strong>注意</strong>：您正在对<code>&lt;body&gt;</code>元素应用分隔符，因此当您开始在搜索框中键入内容时，您会看到不希望的断点。一直按F8以跳过这些断点，直到出现叠加元素。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/chrome-devtool-break-subtree-mod.png" alt></p><h3><span id="22-使用break-on属性修改">2.2. 使用Break on属性修改</span></h3><p>我们将检查Account悬停处显示的Amazon Sign in overlay菜单。按照步骤：</p><ul><li>开启Chrome DevTool</li><li>单击DevTool的Elements选项卡</li><li>使用 <code>检查图标</code> 检查 <code>帐户</code> 菜单元素。它将在“元素”选项卡中聚焦该特定的HTML元素<code>⬉</code></li><li>右键单击<code>&lt;a&gt;</code> HTML元素</li><li>选择 <code>Break on➞</code> 属性修改</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/chrome-devtool-break-attribute-mod.png" alt><br>就是这样。现在，当您将鼠标悬停在“帐户”菜单上时。它修改元素的class属性<code>&lt;a&gt;</code>，这是对属性的修改，将断点应用于<code>&lt;a&gt;</code>元素并冻结浏览器。</p><p>现在您可以检查“叠加”菜单，它不会消失。</p><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/inspect-overlay-elements-chrome-devtools/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/inspect-overlay-elements-chrome-devtools/</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生的价值，并不是用时间，而是用深度去衡量的。 ——&amp;lt;列夫·托尔斯泰&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/
      
    
    </summary>
    
    
      <category term="Chrome" scheme="https://cl9000.github.io/categories/Chrome/"/>
    
    
      <category term="Chrome" scheme="https://cl9000.github.io/tags/Chrome/"/>
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的错误处理</title>
    <link href="https://cl9000.github.io/2020/07/18/JavaScript%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://cl9000.github.io/2020/07/18/JavaScript%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</id>
    <published>2020-07-18T14:16:05.000Z</published>
    <updated>2021-05-02T14:53:57.875Z</updated>
    
    <content type="html"><![CDATA[<p>人生不是一种享乐，而是一桩十分沉重的工作。 ——&lt;列夫·托尔斯泰&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/error-handling-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/error-handling-in-javascript/</a></p></blockquote><p>在本教程中，我们将使用学习错误处理 <code>try，catch，finally</code> 和 <code>throw</code> 语句。我们还将学习内置的 <code>JavaScript</code> 错误对象（ <code>Error, SyntaxError, ReferenceError,</code> 等）以及如何定义自定义错误。</p><h2><span id="1-使用-trycatchfinallythrow">1. 使用 try…catch…finally…throw</span></h2><p>我们使用 <code>try，catch，finally</code> 和 <code>throw</code> 关键字在 <code>JavaScript</code> 处理错误。</p><ul><li><code>try</code> 块包装您的代码以检查错误。</li><li><code>throw</code> 关键字用于抛出自定义错误。</li><li><code>catch</code> 块处理捕获的错误。您将 <code>catch</code>块与<code>try</code>块链接起来。</li><li><code>finally</code> 的代码块不管结果始终的执行。您用 <code>try</code> 和 <code>catch</code>块链接<code>finally</code>。</li></ul><h3><span id="11-try">1.1. try</span></h3><p>每个 <code>try</code> 块必须与<code>catch</code>或<code>finally</code>块中的至少一个链接在一起，否则将引发 <code>SyntaxError</code>。</p><p>让我们<code>try</code>单独使用块来验证：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error while executing the code'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><span style="color:red;">ⓧ Uncaught SyntaxError: Missing catch or finally after try</span></p></blockquote><h3><span id="12-trycatch">1.2. try…catch</span></h3><p>推荐使用 <code>try</code> 与 <code>catch</code> 块，处理由优雅抛出的错误 <code>try</code> 块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error while executing the code'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><span style="color:red;">➤ ⓧ Error while executing the code</span></p></blockquote><h4><span id="121-无效代码使用-trycatch">1.2.1 无效代码使用 try…catch</span></h4><p>在<code>try..catch</code>无法捕捉的无效的<code>JavaScript</code>代码的例外，例如下面的代码<code>try</code>块在语法上是错误的，不能被捕获<code>catch</code>块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ~!$%^&amp;*</span><br><span class="line">&#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"code execution will never reach here"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="122-异步代码使用-trycatch">1.2.2. 异步代码使用 try…catch</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    noSuchVariable;   <span class="comment">// undefined variable</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"code execution will never reach here"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未捕获的<code>ReferenceError</code>将在1秒后引发</p><blockquote><p><span style="color:red;">➤ ⓧ Uncaught ReferenceError: noSuchVariable is not definedn</span></p></blockquote><p>应该在异步代码以这种方式使用 try…catch 优雅地处理错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    noSuchVariable;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"error is caught here!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h4><span id="123-嵌套-trycatch">1.2.3. 嵌套 try…catch</span></h4><p>我们还可以使用嵌套 <code>try</code>和 <code>catch</code> 块，并向上抛出错误，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error while executing the inner code'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Error caught by outer block:"</span>);</span><br><span class="line">  <span class="built_in">console</span>.error(err.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Error caught by outer block:<br><span style="color:red;">➤ ⓧ Error while executing the code</span></p></blockquote><h3><span id="13-tryfinally">1.3. try…finally</span></h3><p>这是不推荐在使用 <code>try</code> 与  <code>finally</code>（在之间的块不使用 <code>catch</code>）。让我们看看发生了什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error while executing the code'</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>finally<br><span style="color:red;">➤ ⓧ Uncaught Error: Error while executing the code</span></p></blockquote><p>我们应该在这里注意两件事：</p><ul><li>即使在 <code>try</code> 块抛出错误后，<code>finally</code> 块仍然执行</li><li>如果没有 <code>catch</code>块，错误将无法被优雅地处理，从而导致未捕获错误</li></ul><h3><span id="14-trycatchfinally">1.4. try…catch…finally</span></h3><p>这是推荐使用 <code>try</code> 与 <code>catch</code> 块和可选<code>finally</code> 块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Start of try block"</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error while executing the code'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"End of try block -- never reached"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.message);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Finally block always run'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Code execution outside try-catch-finally block continue.."</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Start of try block<br><span style="color:red;">➤ ⓧ Error while executing the code</span><br>Finally block always run<br>Code execution outside try-catch-finally block continue…</p></blockquote><p>我们还要在这里注意两件事：</p><ul><li>在 <code>try</code> 块中抛出错误后的代码永远不会执行。</li><li>由 <code>catch</code> 块优雅地处理错误。</li><li>即使在 <code>try块</code> 抛出错误后，<code>finally</code> 块仍然执行。</li></ul><p><code>finally</code> 块通常用于清理资源或关闭流，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ry &#123;</span><br><span class="line">  openFile(file);</span><br><span class="line">  readFile(file);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.message);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  closeFile(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="15-throw">1.5. throw</span></h3><p><code>throw</code> 语句用于抛出异常。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// throw primitives and functions</span></span><br><span class="line"><span class="keyword">throw</span> <span class="string">"Error404"</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="number">42</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">throw</span> &#123;<span class="attr">toString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"I'm an object!"</span>; &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// throw error object</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error while executing the code'</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">'Something is wrong with the syntax'</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">'Oops..Wrong reference'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// throw custom error object</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ValidationError</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'ValidationError'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ValidationError(<span class="string">'Value too high'</span>);</span><br></pre></td></tr></table></figure><h2><span id="2-异步代码中的错误处理">2. 异步代码中的错误处理</span></h2><p>建议使用 <code>Promises</code> 和 <code>async await</code> 异步代码(API调用)，因为它们提供了对错误处理的支持。</p><h3><span id="21-thencatch-with-promises">2.1. then…catch with Promises</span></h3><p>你可以使用 <code>then()</code> 和 <code>catch()</code> 链接多个 <code>promise</code>来处理链中单个<code>promise</code>的错误，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);  <span class="comment">// prints '1'</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'something went wrong'</span>);  <span class="comment">// throw error</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);  <span class="comment">// code will not reach here</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// code will not reach since promise not resolved in prev block here due to error</span></span><br><span class="line">      <span class="built_in">console</span>.log(res);    </span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err.message);  <span class="comment">// prints 'something went wrong'</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);  <span class="comment">// prints '3'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// code will not reach since promise resolved in prev block</span></span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>让我们看一个更实际的例子，我们使用 <code>fetch</code> 调用<code>API</code>，它返回一个<code>promise</code>对象。我们使用<code>catch</code>块优雅地处理API失败。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleErrors</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!response.ok) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">"http://httpstat.us/500"</span>)</span><br><span class="line">    .then(handleErrors)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"ok"</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Caught"</span>, error));</span><br></pre></td></tr></table></figure><blockquote><p>Caught Error: Internal Server Error<br>at handleErrors (<anonymous>:3:15)</anonymous></p></blockquote><h3><span id="22-trycatch-with-async-await">2.2. try…catch with async await</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> fetch(<span class="string">"http://httpstat.us/500"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err.message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我们看一个同样的例子，我们使用<code>fetch</code>调用<code>API</code>返回一个<code>promise</code>对象。我们使用<code>try..catch</code>块优雅地处理API失败。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleErrors</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!response.ok) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">"http://httpstat.us/500"</span>);</span><br><span class="line">      handleErrors(response);</span><br><span class="line">      <span class="keyword">let</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Caught"</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>Caught Error: Internal Server Error<br>at handleErrors (<anonymous>:3:15)<br>at <anonymous>:11:7</anonymous></anonymous></p></blockquote><h2><span id="3-内置javascript错误">3. 内置JavaScript错误</span></h2><p>JavaScript有内置的错误对象，通常由try块和catch块抛出。</p><p>错误对象包含以下属性:</p><ul><li>name: 是错误的名称，例如&quot;error&quot;， “SyntaxError”， &quot;ReferenceError&quot;等。</li><li>Message: 是关于错误详细信息的消息</li><li>堆栈: 用于调试目的的错误堆栈跟踪。<br>让我们创建一个 <code>Error Object</code> 并查看它的<code>name</code>和<code>message</code>属性:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error while executing the code'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name:"</span>, err.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"message:"</span>, err.message);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"stack:"</span>, err.stack);</span><br></pre></td></tr></table></figure><blockquote><p>name: Error<br>message: Error while executing the code<br>stack: Error: Error while executing the code<br>at <anonymous>:1:13</anonymous></p></blockquote><p><code>JavaScript</code> 有以下继承自<code>Error</code>对象的内置错误:</p><h3><span id="32-evalerror">3.2. EvalError</span></h3><p><code>EvalError</code>指示一个关于全局<code>eval()</code>函数的错误。此异常不再由J<code>avaScript</code>抛出，它的存在是为了向后兼容。</p><h3><span id="33-rangeerror">3.3. RangeError</span></h3><p>当值超出范围时抛出 <code>RangeError</code>。</p><blockquote><p>➤ [].length = -1<br>ⓧ Uncaught RangeError: Invalid array length</p></blockquote><h3><span id="34-referenceerror">3.4. ReferenceError</span></h3><p>当引用一个不存在的变量时，会抛出<code>ReferenceError</code>。</p><blockquote><p>➤ x = x + 1;<br><span style="color:red;">ⓧ Uncaught ReferenceError: x is not defined</span></p></blockquote><h3><span id="35-syntaxerror">3.5. SyntaxError</span></h3><p>当在 <code>JavaScript</code> 代码中使用任何错误的语法时，将抛出 <code>SyntaxError</code> 。</p><blockquote><p>➤ function() { return ‘Hi!’ }<br><span style="color:red;">ⓧ Uncaught SyntaxError: Function statements require a function name</span><br>➤ 1 = 1<br><span style="color:red;">ⓧ Uncaught SyntaxError: Invalid left-hand side in assignment</span><br>➤ JSON.parse(&quot;{ x }&quot;);<br><span style="color:red;">ⓧ Uncaught SyntaxError: Unexpected token x in JSON at position 2</span></p></blockquote><h3><span id="36-typeerror">3.6. TypeError</span></h3><p>当值不是期望的类型时，抛出 <code>TypeError</code>。</p><blockquote><p>➤ 1();<br><span style="color:red;">ⓧ Uncaught TypeError: 1 is not a function</span><br>➤ <a href="http://null.name" target="_blank" rel="noopener">null.name</a>;<br><span style="color:red;">ⓧ Uncaught TypeError: Cannot read property ‘name’ of null</span></p></blockquote><h3><span id="37-urierror">3.7. URIError</span></h3><p>当全局 <code>URI</code> 处理函数以错误的方式使用时，抛出 <code>URIError</code>。</p><blockquote><p>➤ decodeURI(&quot;%%%&quot;);<br><span style="color:red;">ⓧ Uncaught URIError: URI malformed</span></p></blockquote><h2><span id="4-定义并抛出自定义错误">4. 定义并抛出自定义错误</span></h2><p>我们还可以这样定义自定义错误:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(message) &#123;</span><br><span class="line">    <span class="keyword">super</span>(message);</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"CustomError"</span>;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> CustomError(<span class="string">'Custom error while executing the code'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name:"</span>, err.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"message:"</span>, err.message);</span><br></pre></td></tr></table></figure><blockquote><p>name: CustomError<br>message: Custom error while executing the code</p></blockquote><p>我们可以进一步增强 <code>CustomError</code> 对象，使其包含错误代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(message, code) &#123;</span><br><span class="line">    <span class="keyword">super</span>(message);</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"CustomError"</span>;</span><br><span class="line">    <span class="keyword">this</span>.code = code;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> CustomError(<span class="string">'Custom error while executing the code'</span>, <span class="string">"ERROR_CODE"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name:"</span>, err.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"message:"</span>, err.message);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"code:"</span>, err.code);</span><br></pre></td></tr></table></figure><blockquote><p>name: CustomError<br>message: Custom error while executing the code<br>code: ERROR_CODE</p></blockquote><p>我们在 <code>try..catch</code> 块中使用这个:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="literal">null</span>.name;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CustomError(err.message, err.name);  <span class="comment">//message, code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err.name, err.code, err.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CustomError TypeError Cannot read property ‘name’ of null</p></blockquote><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/error-handling-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/error-handling-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try…catch</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/throw" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/throw</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生不是一种享乐，而是一桩十分沉重的工作。 ——&amp;lt;列夫·托尔斯泰&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/ja
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的Classes</title>
    <link href="https://cl9000.github.io/2020/07/18/JavaScript%E4%B8%AD%E7%9A%84Classes/"/>
    <id>https://cl9000.github.io/2020/07/18/JavaScript%E4%B8%AD%E7%9A%84Classes/</id>
    <published>2020-07-18T10:34:24.000Z</published>
    <updated>2021-04-19T05:47:25.185Z</updated>
    
    <content type="html"><![CDATA[<p>预测未来最好的方法就是去创造未来。——&lt;亚伯拉罕·林肯&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/classes-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/classes-in-javascript/</a></p></blockquote><h2><span id="类声明-class-declaration">类声明 Class Declaration</span></h2><p>让我们看看在<code>JavaScript</code>中使用<code>function构造函数</code>和<code>class关键字</code>创建类的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 Function Constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">brand, color, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.brand = brand;</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">  <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 Class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(brand, color, price) &#123;</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.price = price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，<code>class</code>是一种函数类型，所以我们用它来替换<code>function</code>。从这个意义上说，两种创建类的方法几乎是相同的。</p><p>我们可以让我们的代码更短，像这样:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(brand, color, price) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123; brand, color, price&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="方法-methods">方法 Methods</span></h2><p>让我们向 <code>Car类</code> 添加一些方法</p><ul><li><strong><code>Getter Setter方法(实例方法)</code></strong> 从类的实例中调用。它们分别使用 <code>get</code> 和 <code>set</code> 关键字来定义，以获取和设置属性。</li><li><strong><code>原型方法(实例方法)</code></strong> 从类的实例中调用。它们用于访问实例属性并对它们执行一些操作。</li><li><strong><code>静态方法(类方法)</code></strong> 直接从类调用。它们是使用static关键字定义的，通常用于创建实用函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(brand, color, price) &#123;</span><br><span class="line">    <span class="keyword">this</span>._brand = brand;</span><br><span class="line">    <span class="keyword">this</span>._color = color;</span><br><span class="line">    <span class="keyword">this</span>._price = price;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter method</span></span><br><span class="line">  <span class="keyword">get</span> color()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`color is <span class="subst">$&#123;<span class="keyword">this</span>._color.toUpperCase()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setter method</span></span><br><span class="line">  <span class="keyword">set</span> color(newColor)&#123;</span><br><span class="line">    <span class="keyword">this</span>._color = newColor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// prototype method</span></span><br><span class="line">  drive()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`driving <span class="subst">$&#123;<span class="keyword">this</span>._brand&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>._color&#125;</span> color car`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// static method</span></span><br><span class="line">  <span class="keyword">static</span> compareCars(car1, car2)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;car2._brand&#125;</span> is <span class="subst">$&#123;(car1._price &gt; car2._price) ? <span class="string">"cheaper"</span> : <span class="string">"costlier"</span>&#125;</span> then <span class="subst">$&#123;car1._brand&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们使用 <code>Car</code> 类创建一些对象，并调用它们的 <code>getter、setter、prototype</code> 和静态方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redToyotaCar = <span class="keyword">new</span> Car(<span class="string">"Toyota"</span>, <span class="string">"red"</span>, <span class="number">500000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar);  </span><br><span class="line"><span class="comment">// prints Car &#123;_brand: "Toyota", _color: "red", _price: 500000&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.color);  </span><br><span class="line"><span class="comment">// (getter method)</span></span><br><span class="line"><span class="comment">// prints 'color is RED'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.drive());  </span><br><span class="line"><span class="comment">// (prototype method)</span></span><br><span class="line"><span class="comment">// prints 'driving Toyota red color car'</span></span><br><span class="line"></span><br><span class="line">redToyotaCar.color = <span class="string">"blue"</span>;  </span><br><span class="line"><span class="comment">// (setter method)</span></span><br><span class="line"><span class="comment">// set color to blue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.color); </span><br><span class="line"><span class="comment">// (getter method)</span></span><br><span class="line"><span class="comment">// prints 'color is BLUE'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.drive()); </span><br><span class="line"><span class="comment">// (prototype method)</span></span><br><span class="line"><span class="comment">// prints 'driving Toyota blue color car'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> blackAudiCar = <span class="keyword">new</span> Car(<span class="string">"Audi"</span>, <span class="string">"black"</span>, <span class="number">900000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Car.compareCars(redToyotaCar, blackAudiCar));  </span><br><span class="line"><span class="comment">// (static method)</span></span><br><span class="line"><span class="comment">// prints 'Audi is costlier then Toyota'</span></span><br></pre></td></tr></table></figure><p>在上面的类中，我们有<code>color</code>属性的 <code>getter</code> 和 <code>setter</code>。我们使用 <code>_</code> convention来创建一个后备字段来存储我们的<code>color</code>属性。如果每次不调用<code>get</code>或<code>set</code>，就会导致堆栈溢出。<code>get</code>将被调用，这将导致<code>get</code>被反复调用，从而创建一个无限循环。</p><blockquote><p>VM172:12 Uncaught RangeError: Maximum call stack size exceeded<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)</anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></p></blockquote><h2><span id="继承-inheritance">继承 Inheritance</span></h2><p>假设我们想从<code>Car</code>类创建一个<code>Toyota</code>子类并添加一些额外的字段，如<code>&quot; model &quot;</code>和<code>&quot; make &quot;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toyota</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(color, price, model, make)&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"Toyota"</span>, color, price);</span><br><span class="line">        <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;model, make&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    drive()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">super</span>.drive()&#125;</span> made in <span class="subst">$&#123;<span class="keyword">this</span>.make&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从Toyota子类中创建一些对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> toyotaCamery = <span class="keyword">new</span> Toyota(<span class="string">"red"</span>, <span class="number">800000</span>, <span class="string">"Camary"</span>, <span class="number">2010</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toyotaCamery);</span><br><span class="line"><span class="comment">// prints Toyota &#123;_brand: "Toyota", _color: "red", _price: 800000, model: "Camary", make: 2010&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toyotaCamery.color);</span><br><span class="line"><span class="comment">// prints 'color is RED'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toyotaCamery.drive());</span><br><span class="line"><span class="comment">// prints 'driving Toyota red color car made in 2010'</span></span><br></pre></td></tr></table></figure><p>我们看到，使用ES6 class关键字创建子类非常方便和容易。</p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/classes-in-javascript/" target="_blank" rel="noopener">原文 - https://codingnconcepts.com/javascript/classes-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;预测未来最好的方法就是去创造未来。——&amp;lt;亚伯拉罕·林肯&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javascr
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的调试技巧</title>
    <link href="https://cl9000.github.io/2020/07/16/JavaScript%E4%B8%AD%E7%9A%84%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>https://cl9000.github.io/2020/07/16/JavaScript%E4%B8%AD%E7%9A%84%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</id>
    <published>2020-07-16T09:19:43.000Z</published>
    <updated>2021-04-30T02:52:02.934Z</updated>
    
    <content type="html"><![CDATA[<p>在事情成功之前，一切总看似不可能。——&lt;纳尔逊·曼德拉&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/debugging-tips-and-tricks/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/debugging-tips-and-tricks/</a></p></blockquote><p>在本教程中，我们将学习大量使用 <code>Chrome DevTool</code> 调试 <code>JavaScript</code> 代码的技巧和窍门，使用控制台 <code>API</code> 记录到控制台的不同方法，以及更多…</p><h2><span id="1-对-alerts-说-no">1. 对 <strong>alerts</strong> 说 <strong>No</strong></span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"I will pop up in browser"</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/debug-alert.png" alt="浏览器调试警报"></p><p>当我们使用 <code>alert()</code> 调试值时，它会在浏览器中弹出，这很令人讨厌。尽量避免使用它们，因为还有其他方法可用于调试，我们将在后面介绍它们。</p><h2><span id="2-浏览器调试器">2. 浏览器调试器</span></h2><p>大多数现代浏览器，如 <code>Chrome</code>、<code>Firefox</code>、<code>Edge</code>、<code>Opera</code> 和 <code>Safari</code> 都内置了对 <code>JavaScript</code> 调试的支持。<code>Chrome</code> 作为调试器通常是开发者的首选。</p><h4><span id="chrome开发工具-chrome-developer-tool">Chrome开发工具 Chrome Developer Tool</span></h4><blockquote><p>从 <code>Chrome</code> 的主菜单中打开 <code>DevTool</code> ，选择 <code>更多工具</code> <strong>➞</strong> <code>开发人员工具</code>。</p></blockquote><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">Mac</th><th style="text-align:center">Windows, Linux, Chrome OS</th></tr></thead><tbody><tr><td style="text-align:center">Elements Tab</td><td style="text-align:center">Command+Option+C</td><td style="text-align:center">Control+Shift+C</td></tr><tr><td style="text-align:center">Console Tab</td><td style="text-align:center">Command+Option+J</td><td style="text-align:center">Control+Shift+J</td></tr><tr><td style="text-align:center">Sources Tab</td><td style="text-align:center">Command+Option+I</td><td style="text-align:center">Control+Shift+I</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/chrome-developer-tool.png" alt="Chrome Developer Tool"></p><p><code>Chrome DevTools</code> 一些最常用的图标:-</p><ul><li>使用 <strong>Inspect icon ⬉</strong>在页面中选择一个元素，然后在 <code>Elements</code> 选项卡中检查其 <code>DOM</code> 位置。您可以更新或删除一个 <code>DOM</code> 元素，检查在 <code>DOM</code> 元素上应用的 <code>CSS</code>，及在 <code>Elements</code> 选项卡中进行更多操作。</li><li>使用设备 <strong>Device icon ⍇</strong>检查网站的响应性。它在你的浏览器页面上增加了一个额外的工具栏，你可以模拟不同设备的视图，例如手机(如iPhone，三星Galaxy, Nexus, LG，诺基亚，黑莓等)，平板电脑(如iPad等)和笔记本电脑(有或没有触摸)。</li><li>在 <code>Sources</code> 选项卡下，您可以看到呈现该页面的所有 <code>JavaScript</code> 源代码。通常，源文件是压缩的，很难理解它们和应用断点。使用格式图标 <code>{}</code> 将这些压缩的文件格式化为人可读的格式。</li></ul><h2><span id="3-代码行断点">3. 代码行断点</span></h2><p>您可以使用断点暂停浏览器中的 <code>JavaScript</code> 代码。最著名的断点类型是代码行断点。</p><p>在 <code>DevTools</code> 中设置代码行断点:</p><ul><li>单击 <code>Sources</code> 选项卡。</li><li>打开文件并转到要调试的代码行。</li><li>您将看到代码左侧的行号列。点击它。行号旁边出现一个图标，表示设置了断点。</li><li>如果要删除断点，请在相同的行号上再次单击。图标消失。</li></ul><p>请注意，根据 <code>Chrome</code> 版本和操作系统（Windows或MacOS），<code>DevTool</code> 中的断点图标外观可能有所不同</p><p>有时，代码行断点的设置效率很低，尤其是在您不知道确切的位置或正在使用大型代码库的情况下。您可以通过知道如何以及何时使用其他类型的断点来节省调试时间。</p><table><thead><tr><th style="text-align:center"><strong>断点类型</strong></th><th style="text-align:center"><strong>当您想暂停时使用此功能…</strong></th></tr></thead><tbody><tr><td style="text-align:center">代码行</td><td style="text-align:center">在确切的一行代码上。</td></tr><tr><td style="text-align:center">条件代码行</td><td style="text-align:center">在精确的代码行上，但仅当其条件为 <code>true</code> 时。</td></tr><tr><td style="text-align:center">DOM</td><td style="text-align:center">修改或删除特定 <code>DOM</code>节点及其子节点的代码。</td></tr><tr><td style="text-align:center">XHR</td><td style="text-align:center">关于XHR <code>send()</code>或 <code>fetch()</code> 方法当请求URL包含字符串模式时。</td></tr><tr><td style="text-align:center">Event listener</td><td style="text-align:center">在事件(如 <code>click</code>)触发后运行的代码上。</td></tr><tr><td style="text-align:center">Exception</td><td style="text-align:center">在引发捕获或未捕获异常的代码行上。</td></tr><tr><td style="text-align:center">Function</td><td style="text-align:center">每当调用特定 <code>Function</code> 时。</td></tr></tbody></table><h2><span id="4-使用-debugger-语句从代码中设置断点">4. 使用’ debugger '语句从代码中设置断点</span></h2><p>当浏览器中的调试器模式处于打开状态并且代码执行到达 <code>debugger;</code> 语句时，它会像该行代码断点一样在该行上暂停。</p><p>当您想在浏览器中调试代码的某个部分时，调试器语句非常有用。通常您会在浏览器开发人员工具中找到有问题的代码，并设置一个断点进行调试。有时不容易在浏览器中找到代码，在这种情况下，可以插入 <code>debugger;</code> 语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> phrase = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">debugger</span>;  <span class="comment">// &lt;-- the debugger pause on this line</span></span><br><span class="line"></span><br><span class="line">  say(phrase);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="5-条件断点">5. 条件断点</span></h2><p>当您知道需要调查的确切代码行时，可以使用条件代码行断点，但您只希望在某些其他条件为真时暂停。</p><ul><li>设置一个条件代码行断点:</li><li>单击 <code>Sources</code> 选项卡。</li><li>打开文件并转到要调试的代码行。</li><li>您将看到代码左侧的行号列。右键单击它。</li><li>选择 <code>Edit breakpoint..</code>，代码行下面会显示一个对话框。</li><li>在对话框中输入条件。</li><li>按 <code>Enter</code> 激活断点。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/chrome-devtool-conditional-breakpoint.png" alt="Chrome DevTool Conditional Breakpoint"></p><h2><span id="6-dom更改断点">6. DOM更改断点</span></h2><p>当您想暂停更改 <code>DOM</code> 节点或其子级的代码时，请使用 <code>DOM</code> 更改断点。</p><p>要设置 <code>DOM</code> 更改断点：</p><ul><li>单击 <code>Elements</code> 选项卡。</li><li>转到要在其上设置断点的元素。</li><li>右键单击该元素。</li><li>将鼠标悬停在 <code>Break on</code> 上，然后选择 <code>Subtree modifications, Attribute modifications</code> 或 <code>Node removal</code>。</li></ul><h4><span id="dom更改断点的类型-types-of-dom-change-breakpoints">DOM更改断点的类型 Types of DOM change breakpoints</span></h4><ul><li><strong>Subtree modifications</strong>`: 当删除或添加当前选定节点的子节点，或更改子节点的内容时触发。不会在子节点属性更改时触发，也不会在当前选择的节点发生任何更改时触发。</li><li><strong>Attributes modifications</strong>: 当在当前选择的节点上添加或删除属性时触发，或者当属性值更改时触发。</li><li><strong>Node Removal</strong>: 当当前选择的节点被移除时触发。</li></ul><h2><span id="7-xhrfetch-断点">7. XHR/Fetch 断点</span></h2><p>如果您在 <code>AJAX</code> 请求中遇到错误，并且无法识别提交此请求的代码，那么 <code>XHR</code> 断点对于快速找到 <code>AJAX</code> 源代码非常有用。</p><p>当 <code>AJAX</code> 请求的 <code>URL</code> 包含指定的字符串时，<code>XHR</code> 断点将暂停代码的执行。<code>AJAX send()</code> 和 <code>fetch()</code>方法支持 <code>XHR</code> 断点。</p><p>设置XHR断点:</p><ul><li>单击 <code>Sources</code> 选项卡。</li><li>展开 <code>XHR Breakpoints</code> 窗口。</li><li>点击 <strong>Add breakpoint</strong>。</li><li>输入要中断的字符串。当这个字符串出现在 <code>XHR</code>的请求 <code>URL</code> 中的任何地方时，<code>DevTools</code>会暂停。</li><li>按 <code>Enter</code> 确认。</li></ul><h2><span id="8-事件监听器断点">8. 事件监听器断点</span></h2><p>当您想在事件触发后运行的事件侦听器代码上暂停时，请使用事件侦听器断点。您可以选择特定的事件，如单击鼠标下的事件，或所有事件，如剪切、复制、粘贴下的剪贴板类别。</p><p>打开事件监听器断点:</p><ul><li>单击 <strong>Sources</strong> 选项卡。</li><li>展开<strong>Event Listener Breakpoints</strong>窗格。<code>DevTools</code>显示了一个事件类别列表，如<code>Animation, Canvas, Clipboard, Mouse</code>等。</li><li>要么检查 <strong>☑</strong> 类别以包含该类别下的所有事件，要么展开该类别并检查☑某个特定事件。</li></ul><h2><span id="9-异常断点">9. 异常断点</span></h2><p><code>Chrome</code> 开发者工具允许你在抛出捕获或未捕获异常时暂停 <code>JavaScript</code> 代码的执行。当代码没有抛出错误和失败时，这一点特别有用。这使得您可以在创建 <code>Error</code>对象时检查应用程序的状态。</p><p>打开异常断点:</p><ul><li>单击 <strong>Sources</strong>选项卡。</li><li>单击异常图标上的 <strong>Pause</strong>。启用时变为蓝色。</li><li>如果您也想暂停已捕获异常的执行，请检查 <strong>☑Pause on uncaught exceptions</strong>。</li><li>完成后记得关掉它们。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/chrome-devtool-advance-breakpoints.png" alt="Chrome DevTool XHR, Event Listener and Exception Breakpoints"></p><h2><span id="10-function-breakpoint">10. Function Breakpoint</span></h2><p>调用 <code>debug(functionName)</code>，其中 <code>functionName</code> 是您想要调试的函数，当您想在调用特定函数时暂停时。你可以在你的代码中插入<code>debug()</code>(就像<code>Console.log()</code>语句)或者从<code>DevTools</code>控制台调用它。<code>Debug()</code>等价于在函数的第一行设置代码行断点。</p><p>确保目标函数在范围内。如果要调试的函数不在范围内，<code>DevTools</code> 将抛出一个<code>ReferenceError</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = a + b; <span class="comment">// DevTools pauses on this line.</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">debug(sum); <span class="comment">// Pass the function object, not a string.</span></span><br><span class="line">sum();</span><br></pre></td></tr></table></figure><h2><span id="11-黑盒脚本文件">11. 黑盒脚本文件</span></h2><p>您在 <code>Chrome DevTool</code> 中调试应用程序代码并逐行浏览代码时，调试器有时会跳转到您不关注的源文件中（例如第三方JS库）。我确定您在回到自己的应用程序代码之前已经经历了逐步浏览库代码的烦恼。</p><p><code>Chrome DevTool</code>提供了将 <code>JavaScript</code> 文件添加为黑匣子的功能，以便调试器在逐步调试代码时不会跳入这些文件并忽略它们。</p><p>对脚本进行黑名单处理会怎样？</p><ul><li>从库代码引发的异常不会暂停（如果启用了“暂停暂停”），</li><li>进入/退出/跳过库代码，</li><li>事件侦听器断点不会在库代码中中断，</li><li>调试器不会在库代码中设置的任何断点处暂停。</li></ul><p>最终结果是您正在调试应用程序代码，而不是第三方资源。要将JavaScript文件黑匣子：</p><ul><li>单击 <strong>Main Menu &gt; Settings</strong> 图标，或使用 <strong>F1</strong>快捷键打开设置</li><li>单击 <strong>Blackboxing</strong> 菜单项。</li><li>点击 <strong>Add Pattern…</strong> 按钮。</li><li>在文本框中输入文件名或格式，然后单击 <strong>Add</strong> 按钮。</li><li>选中 <strong>☑ Blackbox content script</strong> 以启用黑盒。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/chrome-devtool-blackbox-script.png" alt="Chrome DevTool Blackbox Script"></p><h2><span id="12-片段">12. 片段</span></h2><p>通常，我们使用浏览器控制台执行和测试一些代码片段。有时，我们需要一次又一次地测试相同的代码。<code>Chrome DevTools</code>提供了保存代码段以供将来使用的功能。</p><p>要保存您的代码段，请执行以下操作：</p><ul><li>单击 <strong>Sources</strong> 选项卡。</li><li>在 <strong>Sources</strong> 选项卡的左侧面板中，单击 <strong>Snippets</strong> 子选项卡。</li><li>单击 <strong>+ New Snippet</strong> 创建一个新文件以保存您的代码段。</li><li>当您打开代码段代码时。有用于格式化和执行代码的图标。</li></ul><p>您可以使用摘要来存储由您或其他开发人员制作的常用调试代码脚本。保罗爱尔兰写了一些有用的片段- <code>stopBefore.js，Grep.js</code>您可以在您的<code>DevTool</code>段分别复制。可从控制台访问代码片段。让我们来看看它们：</p><ul><li>该<code>storeBefore.js</code>片段允许设置时触发某个函数被调用之前断点。例如，这将在document.getElementById调用该函数之前触发一个断点：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stopBefore(<span class="built_in">document</span>, <span class="string">'getElementById'</span>)</span><br></pre></td></tr></table></figure><ul><li>所述<code>grep.js</code>代码段允许搜索的对象及其匹配给定的搜索条件的属性的原型链。例如，此指令将搜索与文档对象中的get匹配的所有属性：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep(<span class="built_in">document</span>, <span class="string">'get'</span>);</span><br></pre></td></tr></table></figure><ul><li>当访问给定的属性时，<code>debugAccess.js</code>片段允许触发断点。例如，每次调用document.cookie时，这都会触发一个断点：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debugAccess(<span class="built_in">document</span>, <span class="string">'cookie'</span>);</span><br></pre></td></tr></table></figure><h2><span id="13-打印多个值">13. 打印多个值</span></h2><p>大多数开发人员使用 <code>console.log()</code> 在浏览器控制台中调试值。它是调试之王，可以解决您的大多数调试问题。</p><p>您可能不知道的是，<code>console.log()</code> 可以通过提供逗号分隔的值来打印多个值，因此您无需自己连接多个值。</p><p>每个逗号 <code>,</code> 在值之间添加一个空格。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'x ='</span>, x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'x ='</span>, x, <span class="string">'y ='</span>, y, <span class="string">'fruits ='</span>, fruits, <span class="string">'obj ='</span>, obj);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>x = 1<br>x = 1 y = hello fruits = (3) [“apple”, “banana”, “mango”] obj = {a: 1, b: 2}</p></blockquote><p>您也可以使用Template Literal在单个字符串中组合多个值，如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`x = <span class="subst">$&#123;x&#125;</span>, y = <span class="subst">$&#123;y&#125;</span>, fruits = <span class="subst">$&#123;fruits&#125;</span>, obj = <span class="subst">$&#123;obj&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h2><span id="14-避免记录对象引用">14. 避免记录对象引用</span></h2><blockquote><p>不要使用<code>console.log(obj)</code>，使用<code>console.log(JSON.parse(JSON.stringify(obj)))</code>替代。</p></blockquote><p>当您使用 <code>console.log()</code> 记录阵列（或对象）并随后进行更新时。许多浏览器会向您显示数组（或对象）的最新状态，这可能会引起误解。</p><p>使用 <code>console.log(JSON.parse(JSON.stringify(obj)))</code> 确保记录，您正在打印数组（或对象）的副本，该副本将在打印时记录确切的状态。</p><p>让我们从下面的数组示例中了解这一点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits =  [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(fruits))); <span class="comment">//makes a copy of it</span></span><br><span class="line"></span><br><span class="line">fruits.push(<span class="string">'grapes'</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ (3) [“apple”, “banana”, “mango”]<br>0: &quot;apple&quot;<br>1: &quot;banana&quot;<br>2: &quot;mango&quot;<br>3: &quot;grapes&quot;<br>length: 4<br>➤ <strong>proto</strong>: Array(0)<br>▼ (3) [“apple”, “banana”, “mango”]<br>0: &quot;apple&quot;<br>1: &quot;banana&quot;<br>2: &quot;mango&quot;<br>length: 3<br>➤ <strong>proto</strong>: Array(0)</p></blockquote><p>我们看到 <code>console.log()</code> 显示长度为4的数组的最新状态，而在记录时其长度为3。</p><p>让我们看一下对象示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =  &#123; <span class="attr">name</span>: <span class="string">'adam'</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">gender</span>: <span class="string">'male'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(person))); <span class="comment">//makes a copy of it</span></span><br><span class="line"></span><br><span class="line">person.married = <span class="string">'NO'</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ {name: “adam”, age: 21, gender: “male”}<br>age: 21<br>gender: &quot;male&quot;<br>married: &quot;NO&quot;<br>name: &quot;adam&quot;<br>➤ <strong>proto</strong>: Object<br>▼ {name: “adam”, age: 21, gender: “male”}<br>age: 21<br>gender: &quot;male&quot;<br>name: &quot;adam&quot;<br>➤ <strong>proto</strong>: Object</p></blockquote><p>我们看到 <code>console.log()</code> 显示了对象的最新状态，包括在记录时丢失的 <code>married</code> 字段。</p><h2><span id="15-以json格式打印dom元素">15. 以JSON格式打印DOM元素</span></h2><p>使用 <code>console.log()</code> 将 <code>DOM</code> 元素打印为 <code>HTML</code> 元素树结构。相反，我们可以使用 <code>console.dir()</code> 来查看 <code>JSON</code> 中的 <code>DOM</code> 元素（如树结构）。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.body);</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/console-log-vs-dir.png" alt></p><h2><span id="16-打印构造函数的原型方法">16. 打印构造函数的原型方法</span></h2><p>该 <code>console.dir()</code> 是打印构造函数的内部属性非常有用，如原型方法。</p><p>在下面的示例中，我们看到 <code>console.log()</code> 仅显示构造函数的名称，而使用 <code>console.dir()</code> ，我们可以看到 <code>Array</code> 函数的所有原型方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Array</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>ƒ Array() { [native code] }<br>▼ ƒ Array()<br>arguments: (…)<br>caller: (…)<br>length: 1<br>name: &quot;Array&quot;<br>▼ prototype: ƒ ()<br>length: 0<br>➤ constructor: ƒ Array()<br>➤ concat: ƒ concat()<br>➤ find: ƒ find()<br>➤ findIndex: ƒ findIndex()<br>➤ lastIndexOf: ƒ lastIndexOf()<br>➤ pop: ƒ pop()<br>➤ push: ƒ push()<br>➤ reverse: ƒ reverse()<br>➤ slice: ƒ slice()<br>➤ sort: ƒ sort()<br>➤ splice: ƒ splice()<br>➤ includes: ƒ includes()<br>➤ indexOf: ƒ indexOf()<br>➤ join: ƒ join()<br>➤ toString: ƒ toString()<br>…</p></blockquote><h2><span id="17-打印功能的关闭">17. 打印功能的关闭</span></h2><p>所述 <code>console.dir()</code> 是打印功能的内部属性，如示波器和封闭件相当有用的。</p><p>在下面的示例中，我们看到 <code>console.log()</code> 仅使用 <code>console.dir()</code> 打印函数的签名，我们可以看到函数的原型方法，作用域以及最重要的是闭包。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outerFunc  = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> innerFunc = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">var</span> innerMostFunc = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c + d + e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> innerMostFunc;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> innerFunc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print innerMostFunc</span></span><br><span class="line"><span class="built_in">console</span>.log(outerFunc(<span class="number">3</span>)(<span class="number">4</span>)); </span><br><span class="line"><span class="built_in">console</span>.dir(outerFunc(<span class="number">3</span>)(<span class="number">4</span>));</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>ƒ (e) {<br>return a + b + c + d + e;<br>}<br>▼ ƒ innerMostFunc©<br>length: 1<br>name: &quot;innerMostFunc&quot;<br>arguments: null<br>caller: null<br>➤ prototype: {constructor: ƒ}<br>➤ <strong>proto</strong>: ƒ ()<br>[[FunctionLocation]]:<br>▼ [[Scopes]]: Scopes[3]<br>➤ 0: Closure (innerFunc) {d: 4, b: 2}<br>➤ 1: Closure (outerFunc) {c: 3, a: 1}<br>➤ 2: Global {parent: Window, opener: null, top: Window, length: 1, frames: Window, …}</p></blockquote><h2><span id="18-打印对象的内部属性">18. 打印对象的内部属性</span></h2><p>一些浏览器在使用 <code>console.log()</code> 时打印对象的字符串化版本，而在使用 <code>console.dir()</code> 时打印对象的<code>JSON</code> 树。预先打印在浏览器（例如<code>chrome</code>）中并没有太大区别，这两种方法都可以打印对象<code>JSON树</code>。<br>我们发现在 <code>Chrome</code>浏览器中同时使用两种方法打印对象时，没有什么不同</p><blockquote><p><strong>Output</strong><br>▼ {a: 1, b: 2}<br>a: 1<br>b: 2<br>➤ <strong>proto</strong>: Object<br>▼ Object<br>a: 1<br>b: 2<br>➤ <strong>proto</strong>: Object</p></blockquote><h2><span id="19-将对象打印为表格">19. 将对象打印为表格</span></h2><p>所述 <code>console.table()</code> 方法是打印一个大的数据集以表格形式容易地可视化它非常有用。此方法还提供了从那些大型数据集中打印一些字段的功能。当在浏览器中呈现为表格时，浏览器提供了对表格的列进行排序的功能。</p><p>让我们看一下以表格格式记录大型<code>JSON</code>的示例，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personDetails = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"_id"</span>: <span class="string">"5edbbb78633118f455e877fb"</span>,</span><br><span class="line">    <span class="string">"index"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"guid"</span>: <span class="string">"30dd1d2c-5083-4165-8580-5ae734cd0d12"</span>,</span><br><span class="line">    <span class="string">"isActive"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"balance"</span>: <span class="string">"$1,778.03"</span>,</span><br><span class="line">    <span class="string">"picture"</span>: <span class="string">"http://placehold.it/32x32"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="string">"eyeColor"</span>: <span class="string">"blue"</span>,</span><br><span class="line">    <span class="string">"name"</span>: &#123;</span><br><span class="line">      <span class="string">"first"</span>: <span class="string">"Anderson"</span>,</span><br><span class="line">      <span class="string">"last"</span>: <span class="string">"Sargent"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"company"</span>: <span class="string">"MAZUDA"</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"anderson.sargent@mazuda.com"</span>,</span><br><span class="line">    <span class="string">"phone"</span>: <span class="string">"+1 (839) 437-3851"</span>,</span><br><span class="line">    <span class="string">"address"</span>: <span class="string">"235 Ashland Place, Chautauqua, Minnesota, 3487"</span>,</span><br><span class="line">    <span class="string">"about"</span>: <span class="string">"Pariatur nisi cillum culpa aliquip mollit veniam. Laboris in minim non dolor ut deserunt ex sit occaecat irure consequat pariatur esse. Cillum velit dolore enim non enim ipsum aliqua veniam fugiat adipisicing magna mollit occaecat."</span>,</span><br><span class="line">    <span class="string">"registered"</span>: <span class="string">"Saturday, April 8, 2017 3:02 AM"</span>,</span><br><span class="line">    <span class="string">"latitude"</span>: <span class="string">"26.03084"</span>,</span><br><span class="line">    <span class="string">"longitude"</span>: <span class="string">"-74.869342"</span>,</span><br><span class="line">    <span class="string">"tags"</span>: [</span><br><span class="line">      <span class="string">"labore"</span>,</span><br><span class="line">      <span class="string">"nulla"</span>,</span><br><span class="line">      <span class="string">"ea"</span>,</span><br><span class="line">      <span class="string">"qui"</span>,</span><br><span class="line">      <span class="string">"sunt"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"range"</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">    <span class="string">"friends"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Coleman Nunez"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Foley Curry"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Kara Glass"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"greeting"</span>: <span class="string">"Hello, Anderson! You have 5 unread messages."</span>,</span><br><span class="line">    <span class="string">"favoriteFruit"</span>: <span class="string">"apple"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(personDetails);</span><br><span class="line"><span class="built_in">console</span>.table(personDetails, [<span class="string">"age"</span>, <span class="string">"eyeColor"</span>]);  <span class="comment">// print few fields</span></span><br></pre></td></tr></table></figure><p>以下表格格式的输出来自<code>chrome</code>浏览器<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/console-table-output.png" alt></p><h2><span id="20-执行代码所需的打印时间">20. 执行代码所需的打印时间</span></h2><p>可以打印由执行代码，通过使用所用的时间）<code>console.time</code>（前和<code>console.timeEnd()</code> 该特定的代码之后。很少的指针：</p><ul><li><code>console.time()</code> 和 <code>console.timeEnd()</code> 方法应具有相同的标签。</li><li>您还可以通过为方法分配不同的标签来设置多个计时器。</li><li><code>console.time()</code> 和 <code>console.timeEnd()</code> 是 <code>Console API</code> 的一部分（就像<code>console.log()</code>一样）</li></ul><p>让我们看看它是如何工作的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'Timer1'</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'Timer2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> items = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">   items.push(&#123;<span class="attr">index</span>: i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'Timer1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++)&#123;</span><br><span class="line">   items.push(&#123;<span class="attr">index</span>: j&#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'Timer2'</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>Timer1: 13.088134765625ms<br>Timer2: 26.070517578125ms</p></blockquote><h2><span id="21-打印方法执行的堆栈跟踪">21. 打印方法执行的堆栈跟踪</span></h2><p>可以使用 <code>console.trace()</code> 将方法执行流的堆栈跟踪打印到控制台。数指针:</p><ul><li><code>console.trace()</code> 兼容 <code>Chrome DevTools</code> 的 <code>snippet</code> 特性。</li><li><code>Console .trace()</code> 是 <code>Console API</code> 的一部分(就像<code>Console.log()</code>一样)</li></ul><p>让我们看看它是如何工作的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> first = <span class="function"><span class="params">()</span> =&gt;</span> &#123; second(); &#125;;</span><br><span class="line"><span class="keyword">const</span> second = <span class="function"><span class="params">()</span> =&gt;</span> &#123; third(); &#125;;</span><br><span class="line"><span class="keyword">const</span> third = <span class="function"><span class="params">()</span> =&gt;</span> &#123; fourth(); &#125;;</span><br><span class="line"><span class="keyword">const</span> fourth = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.trace(<span class="string">"The trace"</span>); &#125;;</span><br><span class="line">first();</span><br></pre></td></tr></table></figure><p>您可以在控制台输出中获得 <code>@ file_name:line_number</code>，单击它可以导航到源文件。</p><blockquote><p><strong>Output</strong><br>▼ The trace<br>fourth        @ test:4<br>third        @ test:3<br>second        @ test:2<br>first        @ test:1<br>(anonymous)   @ test:5</p></blockquote><h2><span id="22-使用单元测试框架">22. 使用单元测试框架</span></h2><p>有许多针对JavaScript的第三方单元测试框架，它们具有自己的理念和语法。以下是最广泛使用的JavaScript测试框架：</p><ul><li><code>Mocha</code>是功能丰富的框架，可在 <code>Node.js</code> 和浏览器中运行，从而使异步测试变得简单而有趣。<code>Mocha</code>测试按顺序运行，从而可以灵活，准确地报告，同时将未捕获的异常映射到正确的测试用例。</li><li><code>JEST</code>是 <code>Facebook</code> 维护的流行框架。它是基于React的应用程序的首选框架，因为它需要零配置。它非常适合使用<code>Babel，TypeScript，Node，React，Angular和Vue</code>的项目。</li><li><code>Jasmine</code>是一个行为驱动的测试框架。它没有外部依赖性。它不需要DOM。而且它的语法清晰明了，因此您可以轻松编写测试。</li><li><code>QUnit</code>是一个功能强大，易于使用的 <code>JavaScript</code> 单元测试框架。它由<code>jQuery，jQuery UI</code>和<code>jQuery Mobile</code>项目使用，并且能够测试任何通用 <code>JavaScript</code>代码</li></ul><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/debugging-tips-and-tricks/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/debugging-tips-and-tricks/</a></li><li><a href="https://developers.google.com/web/tools/chrome-devtools/" target="_blank" rel="noopener">MDN - https://developers.google.com/web/tools/chrome-devtools/</a></li><li><a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha - https://mochajs.org/</a></li><li><a href="https://jestjs.io/" target="_blank" rel="noopener">JEST - https://jestjs.io/</a></li><li><a href="https://jasmine.github.io/" target="_blank" rel="noopener">Jasmine - https://jasmine.github.io/</a></li><li><a href="https://qunitjs.com/" target="_blank" rel="noopener">QUnit - https://qunitjs.com/</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在事情成功之前，一切总看似不可能。——&amp;lt;纳尔逊·曼德拉&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javascr
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中使用数组解构</title>
    <link href="https://cl9000.github.io/2020/07/09/JavaScript%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84/"/>
    <id>https://cl9000.github.io/2020/07/09/JavaScript%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84/</id>
    <published>2020-07-09T13:37:15.000Z</published>
    <updated>2021-04-28T14:00:44.788Z</updated>
    
    <content type="html"><![CDATA[<p>在事情成功之前，一切总看似不可能。——&lt;纳尔逊·曼德拉&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/array-destructuring/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/array-destructuring/</a></p></blockquote><p>在本教程中，我们将通过示例来学习 <code>JavaScript</code> <strong>ES6</strong> 中数组解构的用法。</p><p>解构分配是JavaScript ES6中引入的一种特殊语法，它使我们可以在单个语句中从数组或对象中提取多个项目并将它们分配给变量。</p><h2><span id="1-基本阵列解构">1. 基本阵列解构</span></h2><p>我们可以从数组中提取多个元素，然后在单个语句中使用数组解构将它们分配给变量。</p><p>与我们将元素逐一分配给变量的传统方式相比，数组解构的简写语法非常方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//const one   = numbers[0];         //传统方式</span></span><br><span class="line"><span class="comment">//const two   = numbers[1];</span></span><br><span class="line"><span class="comment">//const three = numbers[2];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [one, two, three] = numbers;  <span class="comment">//Array Destructuring 数组解构</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one);   <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(two);   <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(three); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>我们还可以在赋值之前声明变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> one, two, three;</span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">[one, two, three] = numbers;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one);   <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(two);   <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(three); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>或者我们可以内联声明它们：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [one, two, three] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one);   <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(two);   <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(three); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h2><span id="2-默认值">2. 默认值</span></h2><p>我们可以为未定义或不存在的数组元素提供默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [one = <span class="string">"I"</span>, two = <span class="string">"II"</span>, three = <span class="string">"III"</span>, four = <span class="string">"IV"</span>] = numbers;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one);   <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(two);   <span class="comment">//II  &lt;- default value since 'undefined'</span></span><br><span class="line"><span class="built_in">console</span>.log(three); <span class="comment">//3 </span></span><br><span class="line"><span class="built_in">console</span>.log(four);  <span class="comment">//IV  &lt;- default value since doesn't exist</span></span><br></pre></td></tr></table></figure><p>我们看到第二个元素是未定义的，第四个元素不存在。在这两种情况下，均将默认值分配给变量。</p><h2><span id="3-嵌套数组解构">3. 嵌套数组解构</span></h2><p>我们还可以执行嵌套数组解构以从嵌套数组中获取更深层次的元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">9</span>, <span class="number">10</span>, [<span class="number">11</span>, <span class="number">12</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [one, two, [nine, ten, [eleven, twelve]]] = numbers</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one)    <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(nine)   <span class="comment">//9</span></span><br><span class="line"><span class="built_in">console</span>.log(eleven) <span class="comment">//11</span></span><br></pre></td></tr></table></figure><p>嵌套数组解构的另一种方法是使用<code>ES9</code> <code>Array.flat()</code>方法，该方法将嵌套数组展平为普通数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">9</span>, <span class="number">10</span>, [<span class="number">11</span>, <span class="number">12</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flattenNumbers = numbers.flat().flat();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [one, two, nine, ten, eleven, twelve] = flattenNumbers;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one)    <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(nine)   <span class="comment">//9</span></span><br><span class="line"><span class="built_in">console</span>.log(eleven) <span class="comment">//11</span></span><br></pre></td></tr></table></figure><p>请注意，该 <code>Array.flat()</code> 方法将嵌套数组的深度展平了一层。这就是为什么我们两次调用此方法<code>numbers.flat().flat()</code> 以在两个层次上展平。</p><p>另请注意，<code>Array.flat()</code> 方法是 <code>Array.flatMap()</code> 方法的缩写，两者的工作原理相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">9</span>, <span class="number">10</span>, [<span class="number">11</span>, <span class="number">12</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flat = numbers.flat();</span><br><span class="line"><span class="keyword">const</span> flatMap = numbers.flatMap(<span class="function"><span class="params">x</span> =&gt;</span> x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flat);        <span class="comment">// [1, 2, 9, 10, [11, 12]]</span></span><br><span class="line"><span class="built_in">console</span>.log(flatMap);     <span class="comment">// [1, 2, 9, 10, [11, 12]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flatten one more level deeper</span></span><br><span class="line"><span class="keyword">const</span> flatDeep = flat.flat();</span><br><span class="line"><span class="keyword">const</span> flatMapDeep = flatMap.flatMap(<span class="function"><span class="params">x</span> =&gt;</span> x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flatDeep);    <span class="comment">// [1, 2, 9, 10, 11, 12]</span></span><br><span class="line"><span class="built_in">console</span>.log(flatMapDeep); <span class="comment">// [1, 2, 9, 10, 11, 12]</span></span><br></pre></td></tr></table></figure><h2><span id="4-使用逗号跳过元素">4. 使用逗号跳过元素</span></h2><p>我们还可以使用 <strong>逗号分隔符</strong> 来跳过某些元素。让我们获取数组的第一个和第四个元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [one, , , four] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one);   <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(four);  <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>这里 <code>, ,</code> ，数组解构中的两个额外的逗号分隔符会跳过第二个和第三个元素。同样，让我们​​跳过第一个和第三个元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [ , two , , four] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(two);   <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(four);  <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h2><span id="5-剩余元素">5. 剩余元素</span></h2><p>我们还可以使用 <strong>rest运算符 …</strong> 从数组中获取其余元素，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> [one, two, three, ...others] = numbers;</span><br><span class="line"><span class="built_in">console</span>.log(one);    <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(two);    <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(three);  <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(others); <span class="comment">//[4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>请注意，**rest运算符…**始终最后使用，否则会引发错误。</p><h2><span id="6-rest-和-spread-运算符">6. Rest 和 Spread 运算符</span></h2><p>我们经常会混淆 <code>Rest</code> 和 <code>Spread</code> 运算符，因为它们都使用相同的 <code>...</code> 语法。<code>Rest</code> 和 <code>Spread</code> 运算符可以在 <code>Array Destructuring</code> 语句中一起使用:</p><ul><li><strong>Rest 操作符</strong>: 在语句的 <strong>左边</strong> 使用，用于从数组获取<strong>剩余</strong>属性</li><li><strong>Spread 操作符</strong>: 在语句的 <strong>右侧</strong> 使用，用于将属性<strong>复制</strong>到数组中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tens      = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">const</span> hundreds  = [<span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line"><span class="keyword">const</span> thousands = [<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Rest operator                     // Spread Operator</span></span><br><span class="line"><span class="keyword">const</span> [one, two, ten, twenty, ...others] = [<span class="number">1</span>, <span class="number">2</span>, ...tens, ...hundreds, ...thousands];;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one);      <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(two);      <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(ten);      <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(twenty);   <span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(others);   <span class="comment">//[30, 100, 200, 1000]</span></span><br></pre></td></tr></table></figure><h2><span id="7-解构返回语句">7. 解构返回语句</span></h2><p>我们可以通过以下方式使用数组解构从函数返回的数组中提取数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumberArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [one, ...others] = getNumberArray();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one);    <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(others); <span class="comment">//[2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2><span id="8-解构函数参数">8. 解构函数参数</span></h2><p>我们甚至可以将数组传递给函数，然后使用 <code>Array Destructuring</code> 以这种方式仅提取我们想要的元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumberArray</span>(<span class="params"> [ one, ...others ] </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(one);    <span class="comment">//1</span></span><br><span class="line">  <span class="built_in">console</span>.log(others); <span class="comment">//[2, 3, 4, 5]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getNumberArray(numbers);</span><br></pre></td></tr></table></figure><h2><span id="9-实际用例">9. 实际用例</span></h2><h4><span id="91-内部for-of循环">9.1. 内部for-of循环</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过以下方式在内部循环中使用数组解构<span class="keyword">for</span>-<span class="keyword">of</span>：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [ [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ], [ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ], [ <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ] ];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [ a, b, c ] <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"><span class="comment">// 4 5 6</span></span><br><span class="line"><span class="comment">// 7 8 9</span></span><br></pre></td></tr></table></figure><h4><span id="92-内部foreach功能">9.2. 内部forEach功能</span></h4><p>我们可以使用数组解构轻松地遍历对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.entries(obj).forEach(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>)); <span class="comment">// "foo: bar", "baz: 42"</span></span><br></pre></td></tr></table></figure><p>我们看到 <code>Object.entries</code> 返回带有键值对的数组，该数组是使用 <strong>[key, value]</strong> 解构方法提取的。</p><h3><span id="93-内部map迭代">9.3. 内部Map迭代</span></h3><p>我们也可以使用 <strong>[key, value]</strong> 解构来解构 <code>Map</code> 的键值对。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">"one"</span>, <span class="number">1</span>);</span><br><span class="line">map.set(<span class="string">"two"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// one is 1</span></span><br><span class="line"><span class="comment">// two is 2</span></span><br></pre></td></tr></table></figure><p>仅迭代键：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或仅迭代值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [,value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="94-交换值">9.4. 交换值</span></h4><p>使用数组解构交换值非常有趣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> one = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> two = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[one, two] = [two, one];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one);  <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(two);  <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4><span id="95-正则表达式">9.5. 正则表达式</span></h4><p>正则表达式函数（例如，<code>match</code> 返回匹配项的数组）可以使用 <code>Array Destructuring</code> 映射到变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d] = <span class="string">'one two three'</span>.match(<span class="regexp">/\w+/g</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a = 'one', b = 'two', c = 'three', d = undefined</span></span><br></pre></td></tr></table></figure><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/array-destructuring/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/array-destructuring/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在事情成功之前，一切总看似不可能。——&amp;lt;纳尔逊·曼德拉&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javascr
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中数组的forEach()和map()的区别</title>
    <link href="https://cl9000.github.io/2020/07/09/JavaScript%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84forEach-%E5%92%8Cmap-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://cl9000.github.io/2020/07/09/JavaScript%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84forEach-%E5%92%8Cmap-%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-07-09T12:33:07.000Z</published>
    <updated>2021-05-01T12:47:38.215Z</updated>
    
    <content type="html"><![CDATA[<p>预测未来最好的方法就是去创造未来。——&lt;亚伯拉罕·林肯&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/difference-between-foreach-and-map-in-javascript-array/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/difference-between-foreach-and-map-in-javascript-array/</a></p></blockquote><p>在本教程中，我们将看到JavaScript Array中 <code>Array.forEach()</code> 和 <code>Array.map()</code> 方法之间的区别。</p><p><code>forEach()</code> 和 <code>map()</code> 方法大多是通过数组元素用于迭代，但也有一些不同之处，我们会看他们一个接一个。</p><h2><span id="1-返回值">1. 返回值</span></h2><p><code>forEach()</code> 方法返回 <code>undefined</code> ，而 <code>map()</code> 返回一个包含转换后元素的新数组。</p><p>让我们使用以下两种方法找出数组中每个元素的平方：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// using forEach()</span></span><br><span class="line"><span class="keyword">const</span> squareUsingForEach = [];</span><br><span class="line">numbers.forEach(<span class="function"><span class="params">x</span> =&gt;</span> squareUsingForEach.push(x*x));</span><br><span class="line"></span><br><span class="line"><span class="comment">// using map()</span></span><br><span class="line"><span class="keyword">const</span> squareUsingMap = numbers.map(<span class="function"><span class="params">x</span> =&gt;</span> x*x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(squareUsingForEach); <span class="comment">// [1, 4, 9, 16, 25]</span></span><br><span class="line"><span class="built_in">console</span>.log(squareUsingMap);     <span class="comment">// [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><p>由于 <code>forEach()</code> 返回 <code>undefined</code> ，因此我们需要传递一个空数组来创建一个新的转换后的数组。<code>map()</code> 直接返回新的转换数组的方法没有这种问题。在这种情况下，建议使用<code>map()</code> 方法。</p><h2><span id="2-链接其他方法">2. 链接其他方法</span></h2><p><code>map()</code> 方法输出可以与 <code>reduce()、sort()、filter()</code> 等其他方法链接，以在一条语句中执行多个操作。</p><p>另一方面，<code>forEach()</code> 是一种终端方法，这意味着它不能与其他方法链接，因为它返回<code>undefined</code>。</p><p>让我们使用以下两种方法找出数组中 <strong>每个元素的平方和</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// using forEach()</span></span><br><span class="line"><span class="keyword">const</span> squareUsingForEach = []</span><br><span class="line"><span class="keyword">let</span> sumOfSquareUsingForEach = <span class="number">0</span>;</span><br><span class="line">numbers.forEach(<span class="function"><span class="params">x</span> =&gt;</span> squareUsingForEach.push(x*x));</span><br><span class="line">squareUsingForEach.forEach(<span class="function"><span class="params">square</span> =&gt;</span> sumOfSquareUsingForEach += square);</span><br><span class="line"></span><br><span class="line"><span class="comment">// using map()</span></span><br><span class="line"><span class="keyword">const</span> sumOfSquareUsingMap = numbers.map(<span class="function"><span class="params">x</span> =&gt;</span> x*x).reduce(<span class="function">(<span class="params">total, value</span>) =&gt;</span> total + value);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumOfSquareUsingForEach); <span class="comment">// 55</span></span><br><span class="line"><span class="built_in">console</span>.log(sumOfSquareUsingMap);     <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><p>当需要多次操作时，使用 <code>forEach()</code> 方法是如此繁琐的工作。在这种情况下，我们可以使用 <code>map()</code> 方法。</p><h2><span id="3-性能">3. 性能</span></h2><p>我们创建了一个具有1百万个随机数（范围从1到1000）的数组。让我们检查每种方法的性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array:</span></span><br><span class="line"><span class="keyword">var</span> numbers = [];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ ) &#123;</span><br><span class="line">    numbers.push(<span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">1000</span>) + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. forEach()</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"forEach"</span>);</span><br><span class="line"><span class="keyword">const</span> squareUsingForEach = [];</span><br><span class="line">numbers.forEach(<span class="function"><span class="params">x</span> =&gt;</span> squareUsingForEach.push(x*x));</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"forEach"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. map()</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"map"</span>);</span><br><span class="line"><span class="keyword">const</span> squareUsingMap = numbers.map(<span class="function"><span class="params">x</span> =&gt;</span> x*x);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"map"</span>);</span><br></pre></td></tr></table></figure><p>这是在MacBook Pro的Google Chrome v83.0.4103.106（64位）上运行上述代码后的结果。我建议复制上面的代码，然后在控制台中尝试一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forEach: <span class="number">26.596923828125</span>ms</span><br><span class="line">map:     <span class="number">21.97998046875</span>ms</span><br></pre></td></tr></table></figure><p>显然，<code>map()</code> 方法要比 <code>forEach()</code> 转换元素更好。</p><h2><span id="4-中断迭代">4. 中断迭代</span></h2><p>这不是这两种方法之间的区别，但重要的是要知道， 如果您在 <code>forEach()</code>或 <code>map()</code>中使用<code>break;</code>方法，则无法停止或进行迭代。唯一的方法是从回调函数引发异常，这在大多数情况下可能是不希望的。</p><p>如果我们 在 <code>forEach()</code> 或 <code>map()</code> 方法的回调函数中使用 <code>break;</code> 声明，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// break; inside forEach()</span></span><br><span class="line"><span class="keyword">const</span> squareUsingForEach = [];</span><br><span class="line">numbers.forEach(<span class="function"><span class="params">x</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">if</span>(x == <span class="number">3</span>) <span class="keyword">break</span>; <span class="comment">// &lt;- SyntaxError </span></span><br><span class="line">  squareUsingForEach.push(x*x);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// break; inside map()</span></span><br><span class="line"><span class="keyword">const</span> squareUsingMap = numbers.map(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(x == <span class="number">3</span>) <span class="keyword">break</span>; <span class="comment">// &lt;- SyntaxError </span></span><br><span class="line">  <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>JavaScript</code> 会引发 <code>SyntaxError</code> ，如下所示：</p><blockquote><p><span style="color:red">ⓧ Uncaught SyntaxError: Illegal break statement</span></p></blockquote><h2><span id="5-总结">5. 总结</span></h2><p>建议使用 <code>map()</code> 变换数组的元素，因为它语法短，可链接且具有更好的性能。</p><p>如果你不使用返回数组或者不转换数组的元素，你不应该使用 <code>map()</code>。这是一种反模式；相反，您应该使用 <code>forEach()</code>方法。</p><p>最后，如果要基于某种条件停止或中断数组的迭代，则应使用简单 <code>for</code> 循环或<code>for-of/for-in</code>循环。</p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/difference-between-foreach-and-map-in-javascript-array/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/difference-between-foreach-and-map-in-javascript-array/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;预测未来最好的方法就是去创造未来。——&amp;lt;亚伯拉罕·林肯&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javascr
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中使用对象解构</title>
    <link href="https://cl9000.github.io/2020/07/09/JavaScript%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84/"/>
    <id>https://cl9000.github.io/2020/07/09/JavaScript%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84/</id>
    <published>2020-07-09T10:51:10.000Z</published>
    <updated>2021-04-28T09:19:35.343Z</updated>
    
    <content type="html"><![CDATA[<p>人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/object-destructuring/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/object-destructuring/</a></p></blockquote><p>在本教程中，我们将通过示例学习在 <code>JavaScript</code> <code>ES6</code> 中对象解构的使用。</p><blockquote><p>解构赋值是<code>JavaScript</code> <strong>ES6</strong>中引入的一种特殊语法，它允许我们在一条语句中从数组或对象中提取多个项，并将它们赋值给变量。</p></blockquote><h2><span id="1-基本对象解构">1. 基本对象解构</span></h2><p>我们可以从一个对象中提取多个属性，并在一条语句中使用对象解构(Object Destructuring)将它们赋给变量。</p><p>对象解构的简写语法与我们将属性一个一个分配给变量的传统方法相比非常方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let name = person.name;            //Traditional Way</span></span><br><span class="line"><span class="comment">// let company = person.company;</span></span><br><span class="line"><span class="comment">// let job = person.job;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, company, job &#125; = person;   <span class="comment">//Object Destructuring</span></span><br></pre></td></tr></table></figure><p>我们也可以将变量声明为内联的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, company, job &#125; = &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span> &#125;;</span><br></pre></td></tr></table></figure><h2><span id="2-未赋值的声明">2. 未赋值的声明</span></h2><p>我们可以在不赋值的情况下声明变量。值可以稍后使用对象解构来赋值，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> name, company, job;</span><br><span class="line"></span><br><span class="line">(&#123; name, company, job &#125; = person);</span><br></pre></td></tr></table></figure><p>注意 <strong>(…);</strong> 使用不带声明的对象文字解构分配时，需要在赋值语句周围加上括号。</p><h2><span id="3-变量名">3. 变量名</span></h2><p>默认情况下，变量名与您正在提取的对象属性名相同。我们总是可以像这样改变变量名:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: foo, <span class="attr">job</span>: bar&#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo);  <span class="comment">//"John"</span></span><br><span class="line"><span class="built_in">console</span>.log(bar);  <span class="comment">//"Developer"</span></span><br></pre></td></tr></table></figure><p>请注意，现在我们只能使用 <code>foo</code> 和 <code>bar</code> 变量访问值。如果试图使用 <code>name</code> 和 <code>age</code> 变量访问值，则会得到未定义的错误。</p><h2><span id="4-默认值">4. 默认值</span></h2><p>我们还可以为变量提供默认值，以防提取的对象属性未定义或不存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span>, <span class="attr">department</span>: <span class="literal">undefined</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name = <span class="string">"Bob"</span>, department = <span class="string">"NA"</span>, age = <span class="number">21</span> &#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);        <span class="comment">//"John"</span></span><br><span class="line"><span class="built_in">console</span>.log(department);  <span class="comment">//"NA"  &lt;- default value since 'undefined'</span></span><br><span class="line"><span class="built_in">console</span>.log(age);         <span class="comment">//21    &lt;- default value since doesn't exist</span></span><br></pre></td></tr></table></figure><p>我们还可以使用新的变量名称设置默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span>, <span class="attr">department</span>: <span class="literal">undefined</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>:foo = <span class="string">"Bob"</span>, <span class="attr">department</span>:bar = <span class="string">"NA"</span>, <span class="attr">age</span>:baz = <span class="number">21</span> &#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo);   <span class="comment">//"John"</span></span><br><span class="line"><span class="built_in">console</span>.log(bar);   <span class="comment">//"NA"</span></span><br><span class="line"><span class="built_in">console</span>.log(baz);   <span class="comment">//21</span></span><br></pre></td></tr></table></figure><h2><span id="5-动态属性名称">5. 动态属性名称</span></h2><p>我们还可以使用动态名称（属性名称在运行时已知）提取属性，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prop = <span class="string">"name"</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span>, <span class="attr">department</span>: <span class="literal">undefined</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; [prop]:foo &#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo);   <span class="comment">//"John"</span></span><br></pre></td></tr></table></figure><h2><span id="6-嵌套对象解构">6. 嵌套对象解构</span></h2><p>我们还可以执行嵌套对象解构以从更深层次的嵌套对象中提取属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">"John"</span>,</span><br><span class="line">    friends : [<span class="string">"Adam"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>],</span><br><span class="line">    hobbies: [<span class="string">"Biking"</span>, <span class="string">"Cooking"</span>],    </span><br><span class="line">    location: &#123;</span><br><span class="line">        country: <span class="string">"USA"</span>, </span><br><span class="line">        city: <span class="string">"NY"</span> </span><br><span class="line">    &#125;, </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; name, friends, <span class="attr">hobbies</span> : [firstHobby, secondHobby], <span class="attr">location</span>: &#123; country, city &#125; &#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);         <span class="comment">//"John"</span></span><br><span class="line"><span class="built_in">console</span>.log(friends);      <span class="comment">//["Adam", "Bob", "Charlie"]</span></span><br><span class="line"><span class="built_in">console</span>.log(firstHobby);   <span class="comment">//"Biking"</span></span><br><span class="line"><span class="built_in">console</span>.log(secondHobby);  <span class="comment">//"Cooking"</span></span><br><span class="line"><span class="built_in">console</span>.log(country);      <span class="comment">//"USA"</span></span><br><span class="line"><span class="built_in">console</span>.log(city);         <span class="comment">//"NY"</span></span><br></pre></td></tr></table></figure><h2><span id="7-剩余对象属性">7. 剩余对象属性</span></h2><p>其余操作符 <code>...</code>  可用于将剩余的属性提取到新变量中，这些新变量尚未被对象解构所提取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span>, <span class="attr">friends</span> : [<span class="string">"Adam"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>]&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;name, friends, ...others&#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);     <span class="comment">//"John"</span></span><br><span class="line"><span class="built_in">console</span>.log(friends);  <span class="comment">//["Adam", "Bob", "Charlie"]</span></span><br><span class="line"><span class="built_in">console</span>.log(others);   <span class="comment">//&#123;company: "Google", job: "Developer"&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="8-rest-和-spread-运算符">8. Rest 和 Spread 运算符</span></h2><p>我们经常会混淆 <code>Rest</code> 和 <code>Spread</code> 运算符，因为它们都使用相同的 <code>...</code> 语法。<code>Rest</code> 和 <code>Spread</code> 运算符可以在 <code>Object Destructuring</code> 语句中一起使用:</p><ul><li><strong>Rest 操作符</strong>: 用于语句的 <strong>左边</strong>，用于从对象获取<strong>剩余</strong>属性</li><li><strong>Spread 操作符</strong>: 用于语句的 <strong>右侧</strong>，用于将属性<strong>复制</strong>到对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> primaryDetails = &#123;<span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span>&#125;</span><br><span class="line"><span class="keyword">const</span> otherDetails = &#123;<span class="attr">friends</span>: [<span class="string">"Adam"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>], <span class="attr">hobbies</span>: [<span class="string">"Biking"</span>, <span class="string">"Cooking"</span>]&#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Rest operator                      // Spread Operator</span></span><br><span class="line"><span class="keyword">const</span> &#123;name, company, hobbies, ...others&#125; = &#123;...primaryDetails, ...otherDetails&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);      <span class="comment">//"John"</span></span><br><span class="line"><span class="built_in">console</span>.log(company);   <span class="comment">//"Google"</span></span><br><span class="line"><span class="built_in">console</span>.log(hobbies);   <span class="comment">//["Biking", "Cooking"]</span></span><br><span class="line"><span class="built_in">console</span>.log(others);    <span class="comment">//&#123;job: "Developer", friends: ["Adam", "Bob", "Charlie"]&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="9-解构返回语句">9. 解构返回语句</span></h2><p>使用 <code>object Destructuring</code> 可以从函数返回的对象中提取数据，方法如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersonDetails</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span>&#125;;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;name, ...others&#125; = getPersonDetails();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);    <span class="comment">//"John"</span></span><br><span class="line"><span class="built_in">console</span>.log(others);  <span class="comment">//&#123;company: "Google", job: "Developer"&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="10-解构函数参数">10. 解构函数参数</span></h2><p>我们甚至可以将对象传递给函数，然后使用对象解构(object Destructuring)只提取我们想要的属性，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersonDetails</span>(<span class="params">&#123;name, ...others &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);    <span class="comment">//"John"</span></span><br><span class="line">  <span class="built_in">console</span>.log(others);  <span class="comment">//&#123;company: "Google", job: "Developer"&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getPersonDetails(person);</span><br></pre></td></tr></table></figure><p>我们也可以像这样为函数参数设置默认值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersonDetails</span>(<span class="params">&#123;name, department = <span class="string">"NA"</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);        <span class="comment">//"John"</span></span><br><span class="line">  <span class="built_in">console</span>.log(department);  <span class="comment">//"NA"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getPersonDetails(person);</span><br></pre></td></tr></table></figure><h2><span id="11-常见用例">11. 常见用例</span></h2><h4><span id="111-内部for-of循环">11.1. 内部for-of循环</span></h4><p>我们可以通过以下方式在循环内部使用对象分解 <code>for-of</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [&#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"Adam"</span>, <span class="attr">company</span>: <span class="string">"Microsoft"</span>, <span class="attr">job</span>: <span class="string">"Analyst"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"Bob"</span>, <span class="attr">company</span>: <span class="string">"Yahoo"</span>, <span class="attr">job</span>: <span class="string">"Data Scientist"</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> &#123;name, company&#125; <span class="keyword">of</span> users) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name, company);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// John Google</span></span><br><span class="line"><span class="comment">// Adam Microsoft</span></span><br><span class="line"><span class="comment">// Bob Yahoo</span></span><br></pre></td></tr></table></figure><h4><span id="112-内部map功能">11.2. 内部map功能</span></h4><p>我们可以通过以下方式在函数内部使用对象解构 <code>map</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [&#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">company</span>: <span class="string">"Google"</span>, <span class="attr">job</span>: <span class="string">"Developer"</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"Adam"</span>, <span class="attr">company</span>: <span class="string">"Microsoft"</span>, <span class="attr">job</span>: <span class="string">"Analyst"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">"Bob"</span>, <span class="attr">company</span>: <span class="string">"Yahoo"</span>, <span class="attr">job</span>: <span class="string">"Data Scientist"</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userNames = users.map(<span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(userNames);</span><br><span class="line"><span class="comment">//["John", "Adam", "Bob"]</span></span><br></pre></td></tr></table></figure><h4><span id="113-命名导出">11.3. 命名导出</span></h4><p>我们可以使用 <code>Object Destructuring</code> 和 <code>import</code> 关键字选择要从模块中导出的内容。如果您使用过<code>Angular</code>，<code>React</code>或任何其他J<code>avaScript</code>框架。您可能遇到过这样的 <strong>Named Export</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'React'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Old way</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'React'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New way</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'React'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>同样的事情也适用于我们导入的任何其他包，我们可以只选择我们想要的函数并独立地使用它们。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isEmail, isCreditCard &#125; <span class="keyword">from</span> <span class="string">'validator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isEmail(<span class="string">'my@email.com'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4><span id="114-console-api">11.4. Console API</span></h4><p>我们可以从 <code>Console API</code> 对象中解构函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; log, warn, error &#125; = <span class="built_in">console</span>;</span><br><span class="line"></span><br><span class="line">log(<span class="string">'Hello World!'</span>);            <span class="comment">// equivalent to console.log('...');</span></span><br><span class="line">warn(<span class="string">'Watch out!'</span>);             <span class="comment">// console.warn('...');</span></span><br><span class="line">error(<span class="string">'Something went wrong!'</span>); <span class="comment">// console.error('...');</span></span><br></pre></td></tr></table></figure><h4><span id="115-交换变量">11.5. 交换变量</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">有趣的是，我们可以使用<span class="built_in">Object</span> Destructuring交换变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">"a"</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">"b"</span>;</span><br><span class="line">[b, a] = [a, b];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// b</span></span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">// a</span></span><br></pre></td></tr></table></figure><h4><span id="116-html元素">11.6. HTML元素</span></h4><p>我们可以像这样解构*<em>HTML</em>8元素的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; value &#125; = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span><br></pre></td></tr></table></figure><p>这样，从输入元素中获取 <code>value</code> 属性就容易得多，就像从 <code>button</code> 元素中获取禁用属性一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; disabled &#125; = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br></pre></td></tr></table></figure><h4><span id="117-html事件">11.7. HTML事件</span></h4><p>让我们使用解构函数参数来处理<strong>HTML</strong>事件，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> onchange=<span class="string">"handleChange(event)"</span>/&gt;</span><br></pre></td></tr></table></figure><p>现在，我们将从事件对象中提取目标对象，然后从目标中提取 <code>value</code> 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = event.target;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// # 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">&#123; target &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = target;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// # 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">&#123; target: &#123; value &#125; &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="118-创建条件对象">11.8. 创建条件对象</span></h4><p>我们还可以使用 <code>Object Destructuring</code> 根据条件在运行时创建对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEmployed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> friends = [<span class="string">"Adam"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>];</span><br><span class="line"><span class="keyword">const</span> hobbies = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123; </span><br><span class="line">  name: <span class="string">"John"</span>, </span><br><span class="line">  ...(isEmployed &amp;&amp; &#123;</span><br><span class="line">    company: <span class="string">"Google"</span>, </span><br><span class="line">    job: <span class="string">"Developer"</span></span><br><span class="line">  &#125;),</span><br><span class="line">  ...(friends &amp;&amp; &#123;friends&#125;),</span><br><span class="line">  ...(hobbies &amp;&amp; &#123;hobbies&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br><span class="line"><span class="comment">// prints &#123;name: "John", company: "Google", job: "Developer", friends: ["Adam", "Bob", "Charlie"]&#125;</span></span><br></pre></td></tr></table></figure><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/object-destructuring/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/object-destructuring/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcept
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中随机排列数组</title>
    <link href="https://cl9000.github.io/2020/07/08/JavaScript%E4%B8%AD%E9%9A%8F%E6%9C%BA%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84/"/>
    <id>https://cl9000.github.io/2020/07/08/JavaScript%E4%B8%AD%E9%9A%8F%E6%9C%BA%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84/</id>
    <published>2020-07-08T14:50:18.000Z</published>
    <updated>2021-05-08T14:53:31.949Z</updated>
    
    <content type="html"><![CDATA[<p>To the one with a hammer, everything looks like a nail. （手中有锤，看什么都像钉）——&lt;芒格&gt;</p><p>此代码段在此处使用<a href="https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle" target="_blank" rel="noopener">Fisher-Yates</a>改组算法对指定数组进行改组。<br><a href="https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle" target="_blank" rel="noopener">Fisher-Yates - https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i,</span><br><span class="line">        j,</span><br><span class="line">        temp;</span><br><span class="line">    <span class="keyword">for</span> (i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> b = shuffle(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">// [2, 7, 8, 6, 5, 3, 1, 4]</span></span><br></pre></td></tr></table></figure><h4><span id="参考">参考</span></h4><ul><li><a href="https://www.jstips.co/en/javascript/shuffle-an-array/" target="_blank" rel="noopener">https://www.jstips.co/en/javascript/shuffle-an-array/</a></li><li><a href="https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle" target="_blank" rel="noopener">https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;To the one with a hammer, everything looks like a nail. （手中有锤，看什么都像钉）——&amp;lt;芒格&amp;gt;&lt;/p&gt;
&lt;p&gt;此代码段在此处使用&lt;a href=&quot;https://www.wikiwand.com/en/Fi
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中清空数组</title>
    <link href="https://cl9000.github.io/2020/07/08/JavaScript%E4%B8%AD%E6%B8%85%E7%A9%BA%E6%95%B0%E7%BB%84/"/>
    <id>https://cl9000.github.io/2020/07/08/JavaScript%E4%B8%AD%E6%B8%85%E7%A9%BA%E6%95%B0%E7%BB%84/</id>
    <published>2020-07-08T14:45:29.000Z</published>
    <updated>2021-05-08T14:53:27.809Z</updated>
    
    <content type="html"><![CDATA[<p>人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><p>定义一个数组，并想清空其内容。通常，您可以这样操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define Array</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//empty your array</span></span><br><span class="line">    list = [];</span><br><span class="line">&#125;</span><br><span class="line">empty();</span><br></pre></td></tr></table></figure><p>还有另一种方法可以清空性能更高的数组。</p><p>使用如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//empty your array</span></span><br><span class="line">    list.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">empty();</span><br></pre></td></tr></table></figure><ul><li><p><code>list = []</code> 将对新数组的引用分配给变量，而其他任何引用均不受影响。这意味着对先前数组内容的引用仍保留在内存中，从而导致内存泄漏。</p></li><li><p><code>list.length = 0</code> 删除数组中的所有内容，并击中其他引用。</p></li></ul><p>换句话说，如果您有两个对同一个数组（<code>a = [1,2,3]; a2 = a;）</code>的引用，并且使用删除了该数组的内容 <code>list.length = 0</code>，则两个引用（a和a2）现在都将指向同一空数组。（因此，如果您不希望a2持有一个空数组，请不要使用此技术！）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> bar = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> foo2 = foo;</span><br><span class="line"><span class="keyword">var</span> bar2 = bar;</span><br><span class="line">foo = [];</span><br><span class="line">bar.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo, bar, foo2, bar2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [] [] [1, 2, 3] []</span></span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/4804235/difference-between-array-length-0-and-array" target="_blank" rel="noopener">数组长度0和数组之间的差异 - https://stackoverflow.com/questions/4804235/difference-between-array-length-0-and-array</a></p><h4><span id="参考">参考</span></h4><ul><li><a href="https://www.jstips.co/en/javascript/two-ways-to-empty-an-array/" target="_blank" rel="noopener">https://www.jstips.co/en/javascript/two-ways-to-empty-an-array/</a></li><li><a href="https://stackoverflow.com/questions/4804235/difference-between-array-length-0-and-array" target="_blank" rel="noopener">https://stackoverflow.com/questions/4804235/difference-between-array-length-0-and-array</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;p&gt;定义一个数组，并想清空其内容。通常，您可以这样操作：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中等分数组</title>
    <link href="https://cl9000.github.io/2020/07/06/JavaScript%E4%B8%AD%E7%AD%89%E5%88%86%E6%95%B0%E7%BB%84/"/>
    <id>https://cl9000.github.io/2020/07/06/JavaScript%E4%B8%AD%E7%AD%89%E5%88%86%E6%95%B0%E7%BB%84/</id>
    <published>2020-07-06T12:18:44.000Z</published>
    <updated>2021-05-01T12:44:54.370Z</updated>
    
    <content type="html"><![CDATA[<p>在事情成功之前，一切总看似不可能。——&lt;纳尔逊·曼德拉&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/how-to-divide-array-in-equal-parts-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-divide-array-in-equal-parts-in-javascript/</a></p></blockquote><p>在本教程中，我们将学习如何使用 <code>Array.splice()</code> JavaScript中的方法将数组等分。我们还将学习它与 <code>Array.slice()</code> 方法的不同之处。</p><h2><span id="1-将数组分为两个相等的部分">1. 将数组分为两个相等的部分</span></h2><p>我们可以分两步将数组分成两半：</p><ul><li>使用 <code>length/2</code> 和 <code>Math.ceil()</code> 方法找到数组的中间索引，</li><li>使用此中间索引和 <code>Array.splice()</code> 方法获取数组的两个相等部分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> middleIndex = <span class="built_in">Math</span>.ceil(list.length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstHalf = list.splice(<span class="number">0</span>, middleIndex);   </span><br><span class="line"><span class="keyword">const</span> secondHalf = list.splice(-middleIndex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstHalf);  <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(secondHalf); <span class="comment">// [4, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(list);       <span class="comment">// []</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Array.splice()</code> 方法通过删除，替换或添加元素来更改数组的内容。请勿将此方法与 <code>Array.slice()</code> 用于 <strong>复制数组</strong> 的方法混淆。</p></blockquote><ul><li><code>list.splice(0, middleIndex)</code> 从数组中从0索引开始的前3个元素中删除并返回它。</li><li><code>list.splice(-middleIndex)</code> 从数组中删除最后3个元素并返回它。</li></ul><p>在这两个操作的最后，由于我们从数组中删除了所有元素，因此<strong>原始数组为空</strong>。</p><p>另请注意，在上述情况下，元素数为偶数，如果元素数为奇数，则前半部分将有一个额外的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> middleIndex = <span class="built_in">Math</span>.ceil(list.length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">list.splice(<span class="number">0</span>, middleIndex); <span class="comment">// returns [1, 2, 3]</span></span><br><span class="line">list.splice(-middleIndex);   <span class="comment">// returns [4, 5]</span></span><br></pre></td></tr></table></figure><h2><span id="2-arrayslice和arraysplice">2. Array.slice和Array.splice</span></h2><p>有时您 <strong>不希望更改原始数组</strong>，也可以通过使用以下 <code>Array.slice()</code> 和 <code>Array.splice()</code> 方法链接起来完成此操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> middleIndex = <span class="built_in">Math</span>.ceil(list.length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstHalf = list.slice().splice(<span class="number">0</span>, middleIndex);   </span><br><span class="line"><span class="keyword">const</span> secondHalf = list.slice().splice(-middleIndex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstHalf);  <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(secondHalf); <span class="comment">// [4, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(list);       <span class="comment">// [1, 2, 3, 4, 5, 6];</span></span><br></pre></td></tr></table></figure><p>我们看到原始数组保持不变，因为我们在使用 <code>Array.slice()</code> 删除元素之前先使用 <code>Array.splice()</code> 复制了原始数组。</p><h2><span id="3-将数组分为三个相等的部分">3. 将数组分为三个相等的部分</span></h2><p>让我们定义一个数组，并使用 <code>Array.splice</code> 方法将它们分为三个相等的部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> threePartIndex = <span class="built_in">Math</span>.ceil(list.length / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thirdPart = list.splice(-threePartIndex);</span><br><span class="line"><span class="keyword">const</span> secondPart = list.splice(-threePartIndex);</span><br><span class="line"><span class="keyword">const</span> firstPart = list;     </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstPart);  <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(secondPart); <span class="comment">// [4, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(thirdPart);  <span class="comment">// [7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>让我们分解一下它是如何发生的：</p><ul><li>我们首先使用提取了thirdPart <code>list.splice(-threePartIndex)</code>，它删除了最后3个元素<code>[7、8、9]</code>，此时list仅包含前6个元素<code>[1、2、3、4、5、6]</code>。</li><li>现在，我们使用提取了secondPart <code>list.splice(-threePartIndex)</code>，它从剩余<code>list = [1, 2, 3, 4, 5, 6]</code>中删除了最后3个元素<code>[4，5，6]</code>，这时list仅包含前3个元素<code>[1，2，3]</code>，它们是firstPart。</li></ul><h2><span id="4-arraysplice的更多信息">4. Array.splice的更多信息</span></h2><p>让我们看一下使用 <code>Array.splice()</code> 方法的更多示例。请注意，<code>array. slice()</code> 在 <code>array. splice()</code> 之前使用过，因为我们不想改变原始数组。如果你想在下面的例子中改变原来的数组，你可以省略<code>array.slice()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define an array</span></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br></pre></td></tr></table></figure><ul><li>获取数组的第一个元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.slice().splice(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><ul><li>获取数组的前五个元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.slice().splice(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li>获取数组的前五个元素之后的所有元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.slice().splice(<span class="number">5</span>);   <span class="comment">// [6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><ul><li>获取数组的最后一个元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.slice().splice(<span class="number">-1</span>);   <span class="comment">// [9]</span></span><br></pre></td></tr></table></figure><ul><li>获取数组的最后三个元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.slice().splice(<span class="number">-3</span>);   <span class="comment">// [7, 8, 9]</span></span><br></pre></td></tr></table></figure><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/difference-between-foreach-and-map-in-javascript-array/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/difference-between-foreach-and-map-in-javascript-array/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在事情成功之前，一切总看似不可能。——&amp;lt;纳尔逊·曼德拉&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javascr
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
