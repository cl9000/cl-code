<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Weichanglu</title>
  <icon>https://www.gravatar.com/avatar/749a0cb196d7f8d7b7f41d5a5fa372e4</icon>
  <subtitle>你知道的越多，你不知道的越多</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cl9000.github.io/"/>
  <updated>2021-04-16T05:51:04.993Z</updated>
  <id>https://cl9000.github.io/</id>
  
  <author>
    <name>cl9000</name>
    <email>cl9000@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>可选链【?.】JavaScript中的运算符</title>
    <link href="https://cl9000.github.io/2021/01/28/JavaScript%E5%8F%AF%E9%80%89%E9%93%BE%E3%80%90-%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://cl9000.github.io/2021/01/28/JavaScript%E5%8F%AF%E9%80%89%E9%93%BE%E3%80%90-%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-01-28T09:12:40.000Z</published>
    <updated>2021-04-16T05:51:04.993Z</updated>
    
    <content type="html"><![CDATA[<p>人生不是一种享乐，而是一桩十分沉重的工作。 —-&lt;列夫·托尔斯泰&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/</a></p></blockquote><p>可选的链?.运算符用于通过隐式空检查访问嵌套的对象属性。</p><h2><span id="概述">概述</span></h2><p>如何使用无效<code>（null和undefined）</code>检查访问对象的嵌套属性？假设我们必须通过网络api的响应访问用户详细信息？</p><p>您可以<code>? ... :</code>像这样使用嵌套的三元运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response ? (response.data ? (response.data.user ? response.data.user.name : <span class="literal">null</span>) : <span class="literal">null</span>) : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>或者您可以在<code>if</code>这种情况下进行空值检查：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(response &amp;&amp; response.data &amp;&amp; response.data.user)&#123;</span><br><span class="line">  userName = response.data.user.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至更好的方法可以使其&amp;&amp;像这样的单衬板链条状态：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response &amp;&amp; response.data &amp;&amp; response.data.user &amp;&amp; response.data.user.name;</span><br></pre></td></tr></table></figure><p>上面的代码的共同点是，链接有时可能真的很长，并且变得更加难以格式化和读取。这是可选的链接?.运算符提供帮助的地方，该运算符提供了隐式的无效检查，并使我们的代码更小，更好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response?.data?.user?.name;</span><br></pre></td></tr></table></figure><h2><span id="句法">句法</span></h2><p>可选的链<code>?.</code>运算符在<code>Javascript ES2020</code>中引入，其语法如下：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.val?.prop       returns obj.val.prop <span class="keyword">if</span> val exists, otherwise <span class="literal">undefined</span>.</span><br><span class="line">obj.func?.(args)    returns obj.func(args) <span class="keyword">if</span> func exists, otherwise <span class="literal">undefined</span>.</span><br><span class="line">obj.arr?.[index]    returns obj.array[index] <span class="keyword">if</span> array exists, otherwise <span class="literal">undefined</span>.</span><br></pre></td></tr></table></figure><p>使用可选链<code>?.</code>运算符</p><p>让我们看看<code>?.</code>操作符与<code>user</code>对象的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  homeaddress: &#123;</span><br><span class="line">    country: <span class="string">"USA"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  hobbies: [&#123;<span class="attr">name</span>: <span class="string">"Coding"</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">"Cooking"</span>&#125;],</span><br><span class="line">  getFirstName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="具有属性">具有属性</span></h2><p>访问存在的属性返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.homeaddress.country); </span><br><span class="line"><span class="comment">// prints "USA";</span></span><br></pre></td></tr></table></figure><p>访问不存在的属性会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.officeaddress.country); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property 'country' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用<code>?.</code>不存在的可选链运算符访问属性将返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.officeaddress?.country); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="具有功能">具有功能</span></h2><p>调用存在的函数返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getFirstName()); </span><br><span class="line"><span class="comment">// prints "John";</span></span><br></pre></td></tr></table></figure><p>调用不存在的函数会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getLastName()); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: user.getLastName is not a function";</span></span><br></pre></td></tr></table></figure><p>用<code>?.</code>不存在的<code>Optional chaining operator</code>调用一个函数将返回<code>undefined：-</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getLastName?.()); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="与数组">与数组</span></h2><p>访问数组的现有索引返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">0</span>].name); </span><br><span class="line"><span class="comment">// prints "Coding";</span></span><br></pre></td></tr></table></figure><p>访问数组的不存在的索引会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">3</span>].name); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property 'name' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用可选的链运算符访问数组的不存在的索引<code>?.</code> 将返回undefined：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">3</span>]?.name); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><p>访问不存在的数组会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.dislikes[<span class="number">0</span>].name); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property '0' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用<code>?.</code>不存在的可选链运算符访问数组将返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.dislikes?.[<span class="number">0</span>]?.name); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="与nullish合并-操作符">与Nullish合并?? 操作符</span></h2><p>现在，您知道如果对象不存在，则可选链运算符<code>?.</code>将返回<code>undefined</code>。有时您想返回一个值，而不是<code>undefined</code>通过使用<code>Nullish Coalescing??</code>运算符和可选的<code>chaining?.</code>运算符来返回一个值。</p><p>如果没有空值合并<code>??</code>运算符，则返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> country = user.officeaddress?.country;</span><br><span class="line"><span class="built_in">console</span>.log(country);</span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><p>使用空值合并<code>??</code>运算符，返回默认值：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> country = user.officeaddress?.country ?? <span class="string">"USA"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(country);</span><br><span class="line"><span class="comment">// prints "USA"</span></span><br></pre></td></tr></table></figure><p>原文链接：<br><a href="https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/</a></p><p>参考其它：<br><a href="https://seifi.org/javascript/optional-chaining-in-javascript.html" target="_blank" rel="noopener">https://seifi.org/javascript/optional-chaining-in-javascript.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生不是一种享乐，而是一桩十分沉重的工作。 —-&amp;lt;列夫·托尔斯泰&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/ja
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="运算符" scheme="https://cl9000.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>python：ERROR:root:code for hash md5 was not found.</title>
    <link href="https://cl9000.github.io/2020/11/05/python-error-root-code-for-hash-md5/"/>
    <id>https://cl9000.github.io/2020/11/05/python-error-root-code-for-hash-md5/</id>
    <published>2020-11-05T10:35:48.000Z</published>
    <updated>2020-11-10T09:16:14.940Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="python-errorrootcode-for-hash-md5-was-not-found">python: ERROR:root:code for hash md5 was not found.</span></h3><h3><span id="解决方案错误日志在下面">解决方案（错误日志在下面👇）</span></h3><p><strong>解决方案</strong></p><ul><li>执行命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /usr/<span class="built_in">local</span>/Cellar/openssl</span></span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.0.2s</span><br></pre></td></tr></table></figure><ul><li>根据现有版本（<strong>根据自己终端的响应修改，例如1.0.2t</strong>），运行：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew switch openssl 1.0.2s</span></span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cleaning /usr/local/Cellar/openssl/1.0.2s</span><br><span class="line">Opt link created for /usr/local/Cellar/openssl/1.0.2s</span><br></pre></td></tr></table></figure><p>然后，在在Python 2.7 virtualenv中运行以下测试命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> hashlib;</span>m=hashlib.md5();print(m.hexdigest())</span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d41d8cd98f00b204e9800998ecf8427e</span><br></pre></td></tr></table></figure><p>如此便正常解决了</p><p><strong>如下错误日志：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">ERROR:root:code for hash md5 was not found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> <span class="keyword">md5</span></span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> <span class="keyword">sha1</span> was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> <span class="keyword">sha1</span></span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha224 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha224</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha256 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha256</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha384 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha384</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha512 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha512</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/bin/pip"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    load_entry_point(<span class="string">'pip==19.0.2'</span>, <span class="string">'console_scripts'</span>, <span class="string">'pip'</span>)()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">489</span>, <span class="keyword">in</span> load_entry_point</span><br><span class="line">    <span class="keyword">return</span> get_distribution(dist).load_entry_point(<span class="keyword">group</span>, <span class="keyword">name</span>)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2793</span>, <span class="keyword">in</span> load_entry_point</span><br><span class="line">    <span class="keyword">return</span> ep.load()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2411</span>, <span class="keyword">in</span> <span class="keyword">load</span></span><br><span class="line">    <span class="keyword">return</span> self.resolve()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2417</span>, <span class="keyword">in</span> resolve</span><br><span class="line">    <span class="keyword">module</span> = __import__(self.module_name, fromlist=[<span class="string">'__name__'</span>], <span class="keyword">level</span>=<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_internal/__init__.py"</span>, line <span class="number">19</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> pip._vendor.urllib3.exceptions <span class="keyword">import</span> DependencyWarning</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/__init__.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .connectionpool <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/connectionpool.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .connection <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/connection.py"</span>, line <span class="number">38</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .util.ssl_ <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/util/__init__.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .ssl_ <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/util/ssl_.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> hashlib <span class="keyword">import</span> <span class="keyword">md5</span>, <span class="keyword">sha1</span>, sha256</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> <span class="keyword">name</span> <span class="keyword">md5</span></span><br></pre></td></tr></table></figure><h3><span id="ref">ref</span></h3><ul><li><a href="https://stackoverflow.com/questions/59269208/errorrootcode-for-hash-md5-was-not-found-when-using-any-hg-mercurial-command#" target="_blank" rel="noopener">“ERROR:root:code for hash md5 was not found” when using any hg mercurial commands<br></a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;python-errorrootcode-for-hash-md5-was-not-found&quot;&gt;python: ERROR:root:code for hash md5 was not found.&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span id=
      
    
    </summary>
    
    
    
      <category term="python error" scheme="https://cl9000.github.io/tags/python-error/"/>
    
      <category term="ERROR:root:code" scheme="https://cl9000.github.io/tags/ERROR-root-code/"/>
    
  </entry>
  
  <entry>
    <title>iOS-virtualPositon 虚拟定位</title>
    <link href="https://cl9000.github.io/2020/10/19/iOS-virtualPositon/"/>
    <id>https://cl9000.github.io/2020/10/19/iOS-virtualPositon/</id>
    <published>2020-10-19T04:18:29.000Z</published>
    <updated>2021-04-16T05:49:39.682Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="方案一">方案一</span></h2><p>使用xcode修改的定位是设备的定位，iOS开发者较为熟悉。</p><h4><span id="一-xcode中新建一个项目创建一个gpx文件">一、Xcode中新建一个项目，创建一个gpx文件</span></h4><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location001.png" alt></p><h4><span id="二-修改经纬度">二、修改经纬度</span></h4><p>修改定位文件gpx，把里面的经纬度改成你要设定的地点的经纬度。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location004.png" alt></p><h4><span id="三-修改绑定">三、修改绑定</span></h4><p>修改定位文件为你刚才创建的文件<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location002.png" alt></p><h4><span id="四-运行修改">四、运行修改</span></h4><p>选择真机设备 运行一下工程，然后打开地图，查看一下当前定位，改变了就成功了。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location003.png" alt></p><h2><span id="方案二-简单快捷">方案二 简单快捷</span></h2><p>若没有iOS开发经验，需要简单快捷，可使用<strong>i4</strong> 修改软件虚拟位置，步骤入下</p><ol><li>Mac appStore（或PC-i4官网）下载 i4（爱思助手）<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location001.png" alt="ios-location001.png"></li><li>数据线连接手机后，工具 - 虚拟定位<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location002.png" alt="ios-location002.png"></li><li>搜索位置或经纬度录入设置<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location003.png" alt="ios-location003.png"></li></ol><p><strong>注意</strong><br>iOS14系统仅支持4个小时，若恢复真实位置，需要重新启动手机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;方案一&quot;&gt;方案一&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;使用xcode修改的定位是设备的定位，iOS开发者较为熟悉。&lt;/p&gt;
&lt;h4&gt;&lt;span id=&quot;一-xcode中新建一个项目创建一个gpx文件&quot;&gt;一、Xcode中新建一个项目，创建一个gpx文件&lt;/sp
      
    
    </summary>
    
    
    
      <category term="工具" scheme="https://cl9000.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="虚拟定位" scheme="https://cl9000.github.io/tags/%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/"/>
    
      <category term="手机定位" scheme="https://cl9000.github.io/tags/%E6%89%8B%E6%9C%BA%E5%AE%9A%E4%BD%8D/"/>
    
      <category term="修改定位" scheme="https://cl9000.github.io/tags/%E4%BF%AE%E6%94%B9%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 个人页的README文件 GitHub Profile</title>
    <link href="https://cl9000.github.io/2020/10/15/GitHub-Profile-GitHub%E4%B8%AA%E4%BA%BA%E9%A6%96%E9%A1%B5/"/>
    <id>https://cl9000.github.io/2020/10/15/GitHub-Profile-GitHub%E4%B8%AA%E4%BA%BA%E9%A6%96%E9%A1%B5/</id>
    <published>2020-10-15T08:39:18.000Z</published>
    <updated>2020-11-10T09:12:56.469Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="github-个人页的readme文件">GitHub 个人页的README文件</span></h3><p>当你尝试去创建一个与你<code>Github</code>用户名相同的仓库时，会发现这是<code>Github</code>为你预留的特殊仓库，用来作为你的<code>Github Profile</code>，这个仓库就相当于一个可以显示在你<code>Github</code>个人页的README文件。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-gprpf-20201106.png" alt="img-gprpf-20201106.png"></p><p>本文会帮助你美化你的Github Profile，让它展示更多有用的信息。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-gh-profile-20201106.png" alt="img-gh-profile-20201106.png"></p><p>例如添加一个<code>首页被访问次数的计数器</code>，一个Github被Star与Commit的概览信息，以及各种技能<code>标签</code>，设备标签等。还可以利用<code>wakatime</code>显示你<code>最近编码各类语言的使用时长</code>，以及你最近<code>Steam游戏游玩排行榜</code>。</p><h4><span id="首页计数器">首页计数器</span></h4><p>这个很容易实现，只需要一个统计资源请求的后台服务即可，有很多第三方的服务可以使用，page_id后面替换为自己的Github用户名。</p><p><code>![](https://visitor-badge.glitch.me/badge?page_id=cl9000.readme)</code><br><img src="https://visitor-badge.glitch.me/badge?page_id=cl9000.readme" alt></p><p>参考另位博友自己搭建的，是使用下方。（@后面替换为自己的Github用户名）<br><code>![](http://antzuhl.cn:4000/get/@antzuhl.readme)</code></p><h4><span id="github信息概览">Github信息概览</span></h4><p><img src="https://github-readme-stats.vercel.app/api?username=cl9000&amp;show_icons=true&amp;count_private=true&amp;hide=prs&amp;theme=default_repocard" alt="info"></p><p>这个也是使用现有的<a href="https://github.com/anuraghazra/github-readme-stats" target="_blank" rel="noopener">开源github项目 github-readme-stats</a>，根据url来配置卡片信息。</p><p><code>![info](https://github-readme-stats.vercel.app/api?username=cl9000&amp;show_icons=true&amp;count_private=true&amp;hide=prs&amp;theme=default_repocard)</code></p><p>url中username为你的Github用户名，theme为主题配置，支持的主题样式丰富，如下：<br><code>dark, radical, merko, gruvbox, tokyonight, onedark, cobalt, synthwave, highcontrast, dracula</code></p><h4><span id="技能-ampamp-设备卡片">技能 &amp;&amp; 设备卡片</span></h4><p>这是Github很多开源仓库都会使用的东西，其本质也是第三方服务后台动态生成的图片，类似：<br><img src="https://visitor-badge.glitch.me/badge?page_id=@cl9000.readme" alt="访客徽章"></p><p><code>simpleicons</code>提供了很多的icon，几乎可以找到所以的程序语言，设备，IDE，开源产品的icon。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-simpleicons-20201106.png" alt="img-simpleicons-20201106.png"></p><p>可参阅 <a href="https://simpleicons.org/" target="_blank" rel="noopener">simpleicons</a> 和 <a href="https://shields.io/" target="_blank" rel="noopener">shields.io</a> 配合使用展现不同样式，如下：</p><ul><li>linux卡片</li></ul><p><code>[![](https://img.shields.io/badge/OS-Arch%20Linux-33aadd?style=flat-square&amp;logo=arch-linux&amp;logoColor=ffffff)](https://www.archlinux.org/)</code><br><a href="https://www.archlinux.org/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/OS-Arch%20Linux-33aadd?style=flat-square&amp;logo=arch-linux&amp;logoColor=ffffff" alt></a></p><ul><li>mac卡片</li></ul><p><code>[![](https://img.shields.io/badge/macOS-Hackintosh-292e33?style=flat-square&amp;logo=apple&amp;logoColor=ffffff)](https://www.tonymacx86.com/)</code><br><a href="https://www.tonymacx86.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/macOS-Hackintosh-292e33?style=flat-square&amp;logo=apple&amp;logoColor=ffffff" alt></a></p><ul><li>手机设备</li></ul><p><code>[![](https://img.shields.io/badge/Honor-V30-f5010c?style=flat-square&amp;logo=huawei&amp;logoColor=ffffff)](https://www.apple.com/)</code><br><a href="https://www.apple.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Honor-V30-f5010c?style=flat-square&amp;logo=huawei&amp;logoColor=ffffff" alt></a></p><ul><li>程序语言</li></ul><p><code>[![](https://img.shields.io/badge/-Java-007396?style=flat-square&amp;logo=java&amp;logoColor=ffffff)](https://reactjs.org/)</code><br><a href="https://reactjs.org/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/-Java-007396?style=flat-square&amp;logo=java&amp;logoColor=ffffff" alt></a></p><ul><li>游戏</li></ul><p><code>[![](https://img.shields.io/badge/Steam-171a21?style=flat-square&amp;logo=steam&amp;logoColor=ffffff)](https://steamcommunity.com/id/antzuhl)</code><br><a href="https://steamcommunity.com/id/antzuhl" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Steam-171a21?style=flat-square&amp;logo=steam&amp;logoColor=ffffff" alt></a></p><h4><span id="编程-ampamp-游戏时长统计">编程 &amp;&amp; 游戏时长统计</span></h4><p>主要利用了 <code>Github Action</code> 的机制，触发定时任务去 <code>Wakatime平台</code> 拉取数据进行统计，而 Wakatime 平台提供了 <code>JetBrains全家桶、 VsCode、 Chrome的插件</code>，用于统计用户的编程时长数据。</p><ol><li>创建一个Github Gist（下方）： <code>https://gist.github.com/</code></li><li>新建一个拥有gist空间权限的Token，保存它 <code>https://github.com/settings/tokens/new</code></li><li>创建一个WakaTime的账号 <code>https://wakatime.com/signup</code></li><li>在你的WakaTime账号设置中选择公开你的编码活动 <code>https://wakatime.com/settings/profile</code><br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-wakatim-20201106.png" alt="img-wakatim-20201106.png"></li><li>在你WakaTime账户设置中创建Api-Key，并且复制它 <code>https://wakatime.com/settings/api-key</code></li><li>Fork这个仓库 <code>https://github.com/matchai/waka-box</code></li><li>编辑 <code>.github/workflows/schedule.yml</code> 文件，将其中的GIST_ID设置为你创建的gist页面的url</li><li>在你仓库的安全设置中添加下面两个环境变量 <code>Settings &gt; Secrets</code><ul><li>GH_TOKEN: 第2步的 <code>gist token</code></li></ul><ul><li>WAKATIME_API_KEY: 第5步中的 <code>wakatime Api-key</code></li></ul></li></ol><p>这样就算是完成了，如果你有 Github Action知识，并且懂 cron 表达式，可以看看这个仓库的action脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name: Update gist with WakaTime stats</span><br><span class="line">on:</span><br><span class="line">  schedule:</span><br><span class="line">    - cron: &quot;0 0 * * *&quot;</span><br><span class="line">jobs:</span><br><span class="line">  update-gist:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@master</span><br><span class="line">      - name: Update gist</span><br><span class="line">        uses: matchai/waka-box@master</span><br><span class="line">        env:</span><br><span class="line">          GH_TOKEN: $&#123;&#123; secrets.GH_TOKEN &#125;&#125;</span><br><span class="line">          GIST_ID: 968220c97e8da1d047a9a480fa432e54</span><br><span class="line">          WAKATIME_API_KEY: $&#123;&#123; secrets.WAKATIME_API_KEY &#125;&#125;</span><br></pre></td></tr></table></figure><p>其中 cron 就是该脚本执行的时间，每个小时的0秒0分，也就是指每小时执行一次。</p><p>你可以将这个gist的script文件添加到你的 Github Profile 中，用来在首页显示你的编码时间。</p><p>统计 Steam 游戏时间也是类似，不过没有 Wakatime 这样的平台去让我们拉取数据，但是我们可以直接去 Steam 拉取。</p><p>可以参考这个仓库 <a href="https://github.com/journey-ad/steam-go" target="_blank" rel="noopener">https://github.com/journey-ad/steam-go</a></p><p>代码片段，可以看到 <code>STEAM_API_KEY</code> 与 <code>STEAM_ID</code> 也是需要你设置到仓库环境变量中去的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">true<span class="string">"context"</span></span><br><span class="line">true<span class="string">"fmt"</span></span><br><span class="line">true<span class="string">"os"</span></span><br><span class="line">true<span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">truesteam <span class="string">"github.com/YouEclipse/steam-go/pkg"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">truesteamClient := steam.NewClient(os.Getenv(<span class="string">"STEAM_API_KEY"</span>), <span class="literal">nil</span>)</span><br><span class="line">truesteamID, _ := strconv.ParseUint(os.Getenv(<span class="string">"STEAM_ID"</span>), <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">truectx := context.Background()</span><br><span class="line">trueparams := &amp;steam.GetOwnedGamesParams&#123;</span><br><span class="line">truetrueSteamID:                steamID,</span><br><span class="line">truetrueIncludeAppInfo:         <span class="literal">true</span>,</span><br><span class="line">truetrueIncludePlayedFreeGames: <span class="literal">true</span>,</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">trueresult, err := steamClient.IPlayerService.GetOwnedGames(ctx, params)</span><br><span class="line">true<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">truetrue<span class="built_in">panic</span>(err)</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">truefmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质都是类似于爬虫，利用 <code>Github Action</code> 来达到触发的效果。</p><p>这样就算是完成了，还有更多玩法可以自己探索。</p><h3><span id="关于访问gist入口-ampamp-无法访问gist解决方案">关于访问Gist入口 &amp;&amp; 无法访问Gist解决方案</span></h3><ol><li>登录GitHub后，菜单中 <strong>your gists</strong></li><li>修改hosts文件，新增以下：</li></ol><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.30.253.113</span>  github.com</span><br><span class="line"><span class="number">192.30.253.118</span>  gist.github.com</span><br><span class="line"><span class="number">192.30.253.119</span>  gist.github.com</span><br></pre></td></tr></table></figure><h3><span id="ref">ref</span></h3><p><a href="http://antzuhl.cn/archives/githubprofile" target="_blank" rel="noopener">http://antzuhl.cn/archives/githubprofile</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;github-个人页的readme文件&quot;&gt;GitHub 个人页的README文件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;当你尝试去创建一个与你&lt;code&gt;Github&lt;/code&gt;用户名相同的仓库时，会发现这是&lt;code&gt;Github&lt;/code&gt;为你预留的特
      
    
    </summary>
    
    
    
      <category term="Github" scheme="https://cl9000.github.io/tags/Github/"/>
    
      <category term="Github Profile" scheme="https://cl9000.github.io/tags/Github-Profile/"/>
    
      <category term="Github Gist" scheme="https://cl9000.github.io/tags/Github-Gist/"/>
    
      <category term="wakatime" scheme="https://cl9000.github.io/tags/wakatime/"/>
    
      <category term="shields.io" scheme="https://cl9000.github.io/tags/shields-io/"/>
    
      <category term="simpleicons" scheme="https://cl9000.github.io/tags/simpleicons/"/>
    
      <category term="visitor-badge" scheme="https://cl9000.github.io/tags/visitor-badge/"/>
    
      <category term="readme" scheme="https://cl9000.github.io/tags/readme/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的Classes</title>
    <link href="https://cl9000.github.io/2020/07/18/JavaScript%E4%B8%AD%E7%9A%84Classes/"/>
    <id>https://cl9000.github.io/2020/07/18/JavaScript%E4%B8%AD%E7%9A%84Classes/</id>
    <published>2020-07-18T10:34:24.000Z</published>
    <updated>2021-04-19T05:47:25.185Z</updated>
    
    <content type="html"><![CDATA[<p>预测未来最好的方法就是去创造未来。——&lt;亚伯拉罕·林肯&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/classes-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/classes-in-javascript/</a></p></blockquote><h2><span id="类声明-class-declaration">类声明 Class Declaration</span></h2><p>让我们看看在<code>JavaScript</code>中使用<code>function构造函数</code>和<code>class关键字</code>创建类的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 Function Constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">brand, color, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.brand = brand;</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">  <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 Class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(brand, color, price) &#123;</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.price = price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，<code>class</code>是一种函数类型，所以我们用它来替换<code>function</code>。从这个意义上说，两种创建类的方法几乎是相同的。</p><p>我们可以让我们的代码更短，像这样:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(brand, color, price) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123; brand, color, price&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="方法-methods">方法 Methods</span></h2><p>让我们向 <code>Car类</code> 添加一些方法</p><ul><li><strong><code>Getter Setter方法(实例方法)</code></strong> 从类的实例中调用。它们分别使用 <code>get</code> 和 <code>set</code> 关键字来定义，以获取和设置属性。</li><li><strong><code>原型方法(实例方法)</code></strong> 从类的实例中调用。它们用于访问实例属性并对它们执行一些操作。</li><li><strong><code>静态方法(类方法)</code></strong> 直接从类调用。它们是使用static关键字定义的，通常用于创建实用函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(brand, color, price) &#123;</span><br><span class="line">    <span class="keyword">this</span>._brand = brand;</span><br><span class="line">    <span class="keyword">this</span>._color = color;</span><br><span class="line">    <span class="keyword">this</span>._price = price;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter method</span></span><br><span class="line">  <span class="keyword">get</span> color()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`color is <span class="subst">$&#123;<span class="keyword">this</span>._color.toUpperCase()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setter method</span></span><br><span class="line">  <span class="keyword">set</span> color(newColor)&#123;</span><br><span class="line">    <span class="keyword">this</span>._color = newColor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// prototype method</span></span><br><span class="line">  drive()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`driving <span class="subst">$&#123;<span class="keyword">this</span>._brand&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>._color&#125;</span> color car`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// static method</span></span><br><span class="line">  <span class="keyword">static</span> compareCars(car1, car2)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;car2._brand&#125;</span> is <span class="subst">$&#123;(car1._price &gt; car2._price) ? <span class="string">"cheaper"</span> : <span class="string">"costlier"</span>&#125;</span> then <span class="subst">$&#123;car1._brand&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们使用 <code>Car</code> 类创建一些对象，并调用它们的 <code>getter、setter、prototype</code> 和静态方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redToyotaCar = <span class="keyword">new</span> Car(<span class="string">"Toyota"</span>, <span class="string">"red"</span>, <span class="number">500000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar);  </span><br><span class="line"><span class="comment">// prints Car &#123;_brand: "Toyota", _color: "red", _price: 500000&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.color);  </span><br><span class="line"><span class="comment">// (getter method)</span></span><br><span class="line"><span class="comment">// prints 'color is RED'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.drive());  </span><br><span class="line"><span class="comment">// (prototype method)</span></span><br><span class="line"><span class="comment">// prints 'driving Toyota red color car'</span></span><br><span class="line"></span><br><span class="line">redToyotaCar.color = <span class="string">"blue"</span>;  </span><br><span class="line"><span class="comment">// (setter method)</span></span><br><span class="line"><span class="comment">// set color to blue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.color); </span><br><span class="line"><span class="comment">// (getter method)</span></span><br><span class="line"><span class="comment">// prints 'color is BLUE'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.drive()); </span><br><span class="line"><span class="comment">// (prototype method)</span></span><br><span class="line"><span class="comment">// prints 'driving Toyota blue color car'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> blackAudiCar = <span class="keyword">new</span> Car(<span class="string">"Audi"</span>, <span class="string">"black"</span>, <span class="number">900000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Car.compareCars(redToyotaCar, blackAudiCar));  </span><br><span class="line"><span class="comment">// (static method)</span></span><br><span class="line"><span class="comment">// prints 'Audi is costlier then Toyota'</span></span><br></pre></td></tr></table></figure><p>在上面的类中，我们有<code>color</code>属性的 <code>getter</code> 和 <code>setter</code>。我们使用 <code>_</code> convention来创建一个后备字段来存储我们的<code>color</code>属性。如果每次不调用<code>get</code>或<code>set</code>，就会导致堆栈溢出。<code>get</code>将被调用，这将导致<code>get</code>被反复调用，从而创建一个无限循环。</p><blockquote><p>VM172:12 Uncaught RangeError: Maximum call stack size exceeded<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)</anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></p></blockquote><h2><span id="继承-inheritance">继承 Inheritance</span></h2><p>假设我们想从<code>Car</code>类创建一个<code>Toyota</code>子类并添加一些额外的字段，如<code>&quot; model &quot;</code>和<code>&quot; make &quot;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toyota</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(color, price, model, make)&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"Toyota"</span>, color, price);</span><br><span class="line">        <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;model, make&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    drive()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">super</span>.drive()&#125;</span> made in <span class="subst">$&#123;<span class="keyword">this</span>.make&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从Toyota子类中创建一些对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> toyotaCamery = <span class="keyword">new</span> Toyota(<span class="string">"red"</span>, <span class="number">800000</span>, <span class="string">"Camary"</span>, <span class="number">2010</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toyotaCamery);</span><br><span class="line"><span class="comment">// prints Toyota &#123;_brand: "Toyota", _color: "red", _price: 800000, model: "Camary", make: 2010&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toyotaCamery.color);</span><br><span class="line"><span class="comment">// prints 'color is RED'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toyotaCamery.drive());</span><br><span class="line"><span class="comment">// prints 'driving Toyota red color car made in 2010'</span></span><br></pre></td></tr></table></figure><p>我们看到，使用ES6 class关键字创建子类非常方便和容易。</p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/classes-in-javascript/" target="_blank" rel="noopener">原文 - https://codingnconcepts.com/javascript/classes-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;预测未来最好的方法就是去创造未来。——&amp;lt;亚伯拉罕·林肯&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javascr
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>虚拟DOM（Virtual Dom） VS 影子DOM（Shadow Dom）</title>
    <link href="https://cl9000.github.io/2020/05/27/%E8%99%9A%E6%8B%9FDOMVS%E5%BD%B1%E5%AD%90DOM/"/>
    <id>https://cl9000.github.io/2020/05/27/%E8%99%9A%E6%8B%9FDOMVS%E5%BD%B1%E5%AD%90DOM/</id>
    <published>2020-05-27T06:03:31.000Z</published>
    <updated>2021-04-15T06:47:21.176Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&lt;爱因斯坦&gt;</p><blockquote><p>作者：Ashish Lahoti<br><br>译者：cl9000 <br><br>原文：<a href="https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom</a></p></blockquote><h2><span id="dom">DOM</span></h2><p><code>DOM</code>是文档对象模型的简写-这是一种通过对象表示结构化内容的方式。<code>HTML，XHTML，XML</code>是编写结构化内容的一些方法。</p><p>当浏览器呈现HTML页面时，它会在后台编译此<code>HTML</code>并生成<code>DOM</code>对象。可以通过<code>JavaScript</code>和<code>CSS</code>访问和操作此<code>DOM</code>对象，例如，当您单击按钮时，将触发DOM单击事件，JavaScript可以侦听和操作DOM以显示弹出对话框。</p><p>默认情况下，当<code>DOM</code>对象发生任何变化时，浏览器会重新呈现整个页面。这样，<code>DOM</code>的更改在性能方面是昂贵的。</p><p>为了解决这个问题，出现了新的概念。让我们看看它们：</p><h2><span id="虚拟domvirtual-dom">虚拟DOM（Virtual Dom）</span></h2><ul><li><code>虚拟DOM</code>是<code>真实DOM</code>的内存表示形式。</li><li>流行的UI框架<a href="https://reactjs.org/" target="_blank" rel="noopener">React.js</a>和<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a>都使用<code>虚拟DOM</code>。</li><li><code>虚拟DOM</code>的概念主要是为了解决性能问题，方法如下：<ul><li><code>DOM</code>中的任何更新都首先应用于<code>虚拟DOM</code>，而不是直接应用于<code>真实DOM</code>。然后，它通过流程调用差异将更改与<code>真实DOM</code>进行比较，并仅通过重新呈现更改的元素，将更改有效地应用于<code>真实DOM</code>。</li></ul><ul><li>除此之外，它还允许收集要立即应用的多个更改，因此并非每个更改都会导致重新渲染，而是仅在将一组更改从<code>虚拟DOM</code>应用于<code>真实DOM</code>之后才进行一次重新渲染。</li></ul></li></ul><h2><span id="影子domshadow-dom">影子DOM（Shadow Dom）</span></h2><ul><li>您可以将<code>影子DOM</code>视为<code>DOM</code>中的<code>DOM</code>。一个真实的<code>DOM</code>可以有许多<code>影子DOM</code>，但是每个共享<code>DOM</code>都有自己的隔离<code>DOM</code>树，它具有自己的元素和样式，与<code>真实DOM</code>完全隔离。</li><li>大多数浏览器（包括<code>Firefox，Chrome，Opera和Safari</code>）都原生支持<code>Shadow DOM</code>的概念。</li><li>您可以制作遵循<code>Shadow DOM概念</code>的可重用本机<code>Web组件</code>。本机<code>Web组件</code>的实现和样式隐藏在<code>Shadow DOM</code>中，而不受<code>外部DOM</code>的影响。</li><li><a href="https://lit-element.polymer-project.org/" target="_blank" rel="noopener">Polymer LitElement</a> 和 <a href="https://vaadin.com/components" target="_blank" rel="noopener">Vaadin</a>提供使用<code>影子DOM</code>概念构建的开源可重用<code>Web组件</code>。</li></ul><p><code>影子DOM（Shadow DOM）</code>不是一个新概念<br>尽管只是最近才指定供Web作者使用，但是<code>影子DOM</code>已被用户代理使用多年，以创建和设置诸如表单元素之类的复杂组件。让我们以范围输入元素为例。要在页面上创建一个，我们要做的就是添加以下元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"range"</span>&gt;</span><br></pre></td></tr></table></figure><p>这一要素导致以下组成部分：</p><input type="range"><p>如果我们进行更深入的研究，我们将看到该<code>&lt;input&gt;</code>元素实际上是由几个较小的<code>&lt;div&gt;</code>元素组成的，它们控制着轨道和滑块本身。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/range-input-shadow-dom.png" alt></p><p>这是通过使用<code>影子DOM</code>来实现的。向宿主HTML文档公开的元素简单<code>&lt;input&gt;</code>，但是在其下面有与该组件相关的元素和样式，这些元素和样式不构成<code>DOM</code>全局​​范围的一部分。</p><h3><span id="参考">参考</span></h3><ul><li><p><a href="https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom" target="_blank" rel="noopener">原文 - https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_shadow_DOM" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_shadow_DOM</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&amp;lt;爱因斯坦&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;&lt;br&gt;
译者：cl9000 &lt;br&gt;&lt;br&gt;
原文：&lt;a href=&quot;https://codingncon
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cl9000.github.io/tags/DOM/"/>
    
      <category term="HTML" scheme="https://cl9000.github.io/tags/HTML/"/>
    
      <category term="Shadow Dom" scheme="https://cl9000.github.io/tags/Shadow-Dom/"/>
    
      <category term="Virtual Dom" scheme="https://cl9000.github.io/tags/Virtual-Dom/"/>
    
  </entry>
  
  <entry>
    <title>使用 JavaScript 解释区块链(Blockchain)</title>
    <link href="https://cl9000.github.io/2020/05/19/JavaScript%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <id>https://cl9000.github.io/2020/05/19/JavaScript%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%8C%BA%E5%9D%97%E9%93%BE/</id>
    <published>2020-05-19T10:36:16.000Z</published>
    <updated>2021-04-20T06:25:15.817Z</updated>
    
    <content type="html"><![CDATA[<p>创造性就是发明、实验、成长、冒险、犯规、犯错和享受乐趣。 ——&lt;玛丽·卢·库克&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/</a></p></blockquote><p>在本文中，我们将学习如何使用 <code>JavaScript</code> 实现区块链。</p><h2><span id="环境条件">环境条件</span></h2><ul><li>下载并安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">NodeJs - https://nodejs.org/zh-cn/</a>来运行我们的区块链代码</li><li>下载并安装用于代码开发的<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code IDE - Visual Studio Code IDE</a></li></ul><p>如果你之前没有 <code>JavaScript</code>、<code>NodeJS</code> 和 <code>VSCode</code> 方面的经验，也不必担心。只要跟随本文，你将学习区块链的基础知识，你可以稍后使用其它任何语言实现。</p><h2><span id="区块链-blockchain">区块链 Blockchain</span></h2><p>区块链只不过是一个数字的、分布式的、不可变的和可信的账本，它可以用来记录从金融交易、政府记录到土地所有权，甚至是购买订单的任何事情。</p><p>每个交易记录都是一个块，按时间顺序连接在一起，形成一个块链。如果你想改变一个特定块中的记录，你不需要重写它。相反，更改被记录在一个新的块中。</p><p>也请阅读<a href="https://codingnconcepts.com/post/blockchain-explained/" target="_blank" rel="noopener">区块链基础知识及其实用用例</a></p><h2><span id="块-block">块 Block</span></h2><p>让我们看看区块链中一个典型的块是由什么组成的</p><ul><li><code>Timestamp（时间戳）</code> 是事务发生时的日期和时间。</li><li><code>Record（记录）</code> 通常包含交易的详细信息，如发送方、接收方、金额等。我们将在我们的程序中使用发送方和接收方的实际名称，但在像 <code>比特币（bitcoin）</code> 这样的实际用例中，实际名称不会被披露，而是使用发送方和接收方的<code>数字签名（digital signature</code>）。</li><li><code>Hash（哈希）</code>是代表区块中交易的数字指纹，是完全唯一的。如果事务细节有任何变化，<code>Hash（哈希）</code>也会发生变化。通常，它是通过对事务细节应用 <code>SHA-256</code> 等加密算法生成的字母数字序列。</li><li><code>Previous Hash</code> 是区块链中前一个块的 <code>Hash</code> 值。这也用于生成块的<code>Hash（哈希）</code>。</li><li><code>Nonce</code> 是<code>“number only use once”</code>的缩写，它是一个添加到区块链块中的数字，再<code>Hash（哈希）</code>后，该数字满足难度级别限制。稍后我们将对此进行更多讨论</li></ul><h2><span id="步骤1创建block-block-js">步骤1:创建Block (Block .js)</span></h2><p>现在我们知道了 块 由什么组成，我们来创建它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SHA256 = <span class="built_in">require</span>(<span class="string">'crypto-js/sha256'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(timestamp, previousHash, record, difficultyLevel) &#123;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">        <span class="keyword">this</span>.record = record;</span><br><span class="line">        <span class="keyword">this</span>.previousHash = previousHash;</span><br><span class="line">        <span class="keyword">const</span> proofOfWork = <span class="keyword">this</span>.proofOfWork(difficultyLevel);</span><br><span class="line">        <span class="keyword">this</span>.hash = proofOfWork.hash;</span><br><span class="line">        <span class="keyword">this</span>.nonce = proofOfWork.nonce;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* Genesis Block */</span></span><br><span class="line">    <span class="keyword">static</span> genesis() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>(<span class="keyword">new</span> <span class="built_in">Date</span>(), </span><br><span class="line">            <span class="string">""</span>,</span><br><span class="line">            <span class="string">"GENESIS"</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Block Mining */</span></span><br><span class="line">    <span class="keyword">static</span> mineBlock(previousBlock, record, difficultyLevel) &#123;</span><br><span class="line">        <span class="keyword">const</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">const</span> previousHash = previousBlock.hash;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Block(timestamp, previousHash, record, difficultyLevel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Generate Hash using SHA256 */</span></span><br><span class="line">    <span class="keyword">static</span> computeHash(message)&#123;</span><br><span class="line">        <span class="keyword">return</span> SHA256(message).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Proof of Work */</span></span><br><span class="line">    proofOfWork(difficultyLevel) &#123;</span><br><span class="line">        <span class="keyword">const</span> message = <span class="keyword">this</span>.timestamp + <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.record) + <span class="keyword">this</span>.previousHash;</span><br><span class="line">        <span class="keyword">if</span>(difficultyLevel)&#123;          </span><br><span class="line">            <span class="keyword">const</span> leadingZeros = <span class="string">"0"</span>.repeat(difficultyLevel);</span><br><span class="line">            <span class="keyword">let</span> nonce = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> hash =  Block.computeHash(message + nonce);</span><br><span class="line">                <span class="keyword">if</span>(hash.substring(<span class="number">0</span>, difficultyLevel) == leadingZeros)&#123;             </span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        hash,</span><br><span class="line">                        nonce</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                nonce++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                hash: Block.computeHash(message),</span><br><span class="line">                nonce: <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Block;</span><br></pre></td></tr></table></figure><p>再来理解几个术语</p><ul><li><code>Genesis Block（创世区块）</code> 是区块链中第一个没有任何交易细节和先前哈希的区块。这通常是在创建区块链时添加的。也被称为 <strong>零块</strong></li><li><code>Difficulty Level （难度等级）</code> 是对块生成哈希值的限制。难度越高，生成哈希所需的时间就越多。</li><li><code>Block Mining（块挖掘）</code> 是将一个新块添加到区块链的过程。谁添加了新的块被称为 <strong>块矿工</strong>，在比特币的情况下也称为<strong>比特币矿工</strong>。任何人都可以注册他们的电脑成为 <strong>比特币矿工</strong> 之一，以像比特币这样的公开区块链。所有的 <strong>比特币矿工</strong> 在比特币网络得到整个区块链的副本，当一个新的块被添加到区块链时，每个都接收到一个通知。。</li><li><code>Proof of Work（工作量证明）</code> 是区块链中的每个块矿工都试图解决的一个加密哈希谜题。一旦一个区块矿工解决了这个难题，本质上意味着生成了具有上述难度等级的区块的哈希值，他们将这个消息传播到区块链网络，哈希值由网络中所有其他区块矿工验证。</li></ul><h4><span id="对我们来说什么是工作证明">对我们来说什么是工作证明?</span></h4><p>工作量证明是根据难度级别生成以0开头的哈希。<br>难度级别5表示，生成带有5个以0开头的哈希，例如 <code>00000b4d7m3h1s0k2s8bw0hn382</code></p><h4><span id="我们将如何实现">我们将如何实现？</span></h4><p>我们将通过对交易明细和现时值应用 <code>SHA-256</code> 算法来计算哈希。我们将从 <code>0</code> 的随机数开始，一直递增，直到找到达到难度级别并以0开头的哈希。<br>我们将通过对事务细节和<code>nonce</code> 值应用 <code>SHA-256</code> 算法来计算哈希值。我们将从 <code>nonce</code> 值为 <code>0</code> 开始，并一直递增，直到找到具有难度级别并以0开头的哈希值。</p><h2><span id="步骤2建立区块链blockchainjs">步骤2：建立区块链（blockchain.js）</span></h2><p>现在已经学到了很多术语，我们来快速创建一个区块链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Block = <span class="built_in">require</span>(<span class="string">'./block'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.difficultyLevel = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.chain = [Block.genesis()];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addBlock(record) &#123;</span><br><span class="line">        <span class="keyword">const</span> newBlock = Block.mineBlock(<span class="keyword">this</span>.chain[<span class="keyword">this</span>.chain.length<span class="number">-1</span>], record, <span class="keyword">this</span>.difficultyLevel);</span><br><span class="line">        <span class="keyword">this</span>.chain.push(newBlock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Blockchain;</span><br></pre></td></tr></table></figure><h2><span id="步骤3测试区块链serverjs">步骤3：测试区块链（server.js）</span></h2><p>让我们创建一些带有随机发送方、接收方和金额细节的交易块。同时，让我们在每2次交易后增加难度等级。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Blockchain = <span class="built_in">require</span>(<span class="string">'./blockchain'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; performance &#125; = <span class="built_in">require</span>(<span class="string">'perf_hooks'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> blockchain = <span class="keyword">new</span> Blockchain();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userList = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>, <span class="string">"David"</span>, <span class="string">"Eric"</span>, <span class="string">"Franklin"</span>, <span class="string">"Gavin"</span>, <span class="string">"Harry"</span>, <span class="string">"Iris"</span>, </span><br><span class="line">                <span class="string">"Joey"</span>, <span class="string">"Kate"</span>, <span class="string">"Leo"</span>, <span class="string">"Monica"</span>, <span class="string">"Nancy"</span>, <span class="string">"Oscar"</span>, <span class="string">"Phoebe"</span>, <span class="string">"Quinn"</span>, <span class="string">"Ross"</span>, </span><br><span class="line">                <span class="string">"Sofia"</span>, <span class="string">"Tyler"</span>, <span class="string">"Umar"</span>, <span class="string">"Victor"</span>, <span class="string">"Wilson"</span>, <span class="string">"Xena"</span>, <span class="string">"Yasmine"</span>, <span class="string">"Zara"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addNBlocks = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        blockchain.addBlock(&#123;</span><br><span class="line">            sender: userList[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * userList.length)],</span><br><span class="line">            receiver: userList[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * userList.length)],</span><br><span class="line">            amount: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1000</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t0 = performance.now();</span><br><span class="line">addNBlocks(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> t1 = performance.now()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[Difficulty Level 1] Added first 2 blocks in  "</span> + (t1 - t0) + <span class="string">" milliseconds."</span>)</span><br><span class="line"></span><br><span class="line">blockchain.difficultyLevel = <span class="number">3</span>;</span><br><span class="line">addNBlocks(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> t2 = performance.now()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[Difficulty Level 3] Added next 2 blocks in  "</span> + (t2 - t1) + <span class="string">" milliseconds."</span>)</span><br><span class="line"></span><br><span class="line">blockchain.difficultyLevel = <span class="number">5</span>;</span><br><span class="line">addNBlocks(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> t3 = performance.now()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[Difficulty Level 5] Added next 2 blocks in  "</span> + (t3 - t2) + <span class="string">" milliseconds."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Print Blockchain*/</span></span><br><span class="line"><span class="built_in">console</span>.log(blockchain.chain);</span><br></pre></td></tr></table></figure><p>现在一切都准备好了，转到终端并运行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save crypto-js</span><br><span class="line">node server</span><br></pre></td></tr></table></figure><p>看到如下输出</p><blockquote><p><strong>Output</strong><br>[Difficulty Level <span style="background-color: #fd5;color: #000;">1</span>] Added first 2 blocks in <span style="background-color: #fd5;color: #000;">6.2153230011463165</span> milliseconds.<br>[Difficulty Level <span style="background-color: #fd5;color: #000;">3</span>] Added next 2 blocks in <span style="background-color: #fd5;color: #000;">175.92524899542332</span> milliseconds.<br>[Difficulty Level <span style="background-color: #fd5;color: #000;">5</span>] Added next 2 blocks in <span style="background-color: #fd5;color: #000;">2065.910447001457</span> milliseconds.<br>[ Block {<br>timestamp: 2020-05-18T17:05:37.501Z,<br>record: <span style="background-color: #fd5;color: #000;">‘GENESIS’</span>,<br>previousHash: <span style="background-color: #fd5;color: #000;">‘’</span>,<br>hash: ‘9636ccb176c9f4825d24e1b8db51e3ffb5d448ba112ec0db9672e80f6dc855c3’,<br>nonce: 0 },<br>Block {<br>timestamp: 2020-05-18T17:05:37.504Z,<br>record: { sender: ‘Xena’, receiver: ‘Umar’, amount: 770 },<br>previousHash: ‘9636ccb176c9f4825d24e1b8db51e3ffb5d448ba112ec0db9672e80f6dc855c3’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">0</span>329bb14cb5d59a2ddce485019de8041c6790b4483afbad91516ec78e21a70f4’,<br>nonce: <span style="background-color: #fd5;color: #000;">24</span> },<br>Block {<br>timestamp: 2020-05-18T17:05:37.509Z,<br>record: { sender: ‘Harry’, receiver: ‘Wilson’, amount: 601 },<br>previousHash: ‘0329bb14cb5d59a2ddce485019de8041c6790b4483afbad91516ec78e21a70f4’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">0</span>5187dd8fa18b1ebd50565f1607e43ab9ad081955a71fb6f542cb91755192b49’,<br>nonce: <span style="background-color: #fd5;color: #000;">12</span> },<br>Block {<br>timestamp: 2020-05-18T17:05:37.512Z,<br>record: { sender: ‘David’, receiver: ‘Quinn’, amount: 600 },<br>previousHash: ‘05187dd8fa18b1ebd50565f1607e43ab9ad081955a71fb6f542cb91755192b49’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">000</span>a0f95e605831a1fa0178351a195fc6f60752fd59e251ea56b1c0d464b8920’,<br>nonce: <span style="background-color: #fd5;color: #000;">7947</span> },<br>Block {<br>timestamp: 2020-05-18T17:05:37.620Z,<br>record: { sender: ‘Yasmine’, receiver: ‘Umar’, amount: 918 },<br>previousHash: ‘000a0f95e605831a1fa0178351a195fc6f60752fd59e251ea56b1c0d464b8920’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">000</span>e8a70d4b6673f3a10cc68fdc21e0cda7a71aa0fe56d31a13cf95832596a45’,<br>nonce: <span style="background-color: #fd5;color: #000;">5384</span> },<br>Block {<br>timestamp: 2020-05-18T17:05:37.686Z,<br>record: { sender: ‘Phoebe’, receiver: ‘Victor’, amount: 336 },<br>previousHash: ‘000e8a70d4b6673f3a10cc68fdc21e0cda7a71aa0fe56d31a13cf95832596a45’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">00000</span>5b737aaa4faa3b87b56474dec9537eee843c2881cb5f6432ca9708bd7b5’,<br>nonce: <span style="background-color: #fd5;color: #000;">45944</span> },<br>Block {<br>timestamp: 2020-05-18T17:05:38.178Z,<br>record: { sender: ‘Umar’, receiver: ‘Oscar’, amount: 239 },<br>previousHash: ‘000005b737aaa4faa3b87b56474dec9537eee843c2881cb5f6432ca9708bd7b5’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">00000</span>57a7a4c7caea164b4e5672a3c38fcf12c6c8bfb4b1c503ca876664f2660’,<br>nonce: <span style="background-color: #fd5;color: #000;">150796</span> } ]</p></blockquote><h3><span id="解析输出">解析输出</span></h3><ul><li>当我们将难度级别从 <code>1</code>、<code>3</code> 增加到 <code>5</code> 时，生成散列和添加新块需要更多的时间。像比特币这样的区块链技术需要以 <code>18</code> 到 <code>30</code> 的难度级别来解决哈希谜题。你可以想象一下解决这些谜题需要多少时间。</li><li>区块链的第一个区块是没有交易信息和先前哈希值的起源区块</li><li>请查看根据难度级别由1、3和5个以0开头生成的散列</li><li>变量 <code>nonce</code>的值随着难度级别的增加而增加，它还告诉我们哈希算法生成哈希的尝试次数。</li></ul><h2><span id="总结">总结</span></h2><p>希望你现在已经对区块链技术有了一个基本的了解，以及我们如何实现它。请注意，上面的例子是区块链的一个非常基本的实现。现实世界的例子非常复杂，但这是进入区块链世界的第一步。</p><p>请在<a href="https://github.com/ashishlahoti/blockchain.js" target="_blank" rel="noopener">github - https://github.com/ashishlahoti/blockchain.js</a>上查看这个例子的源代码</p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/</a></li><li><a href="https://github.com/ashishlahoti/blockchain.js" target="_blank" rel="noopener">github - https://github.com/ashishlahoti/blockchain.js</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创造性就是发明、实验、成长、冒险、犯规、犯错和享受乐趣。 ——&amp;lt;玛丽·卢·库克&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="区块链" scheme="https://cl9000.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>区块链 解释 Blockchain Explained</title>
    <link href="https://cl9000.github.io/2020/05/16/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%A7%A3%E9%87%8A/"/>
    <id>https://cl9000.github.io/2020/05/16/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%A7%A3%E9%87%8A/</id>
    <published>2020-05-16T10:35:12.000Z</published>
    <updated>2021-04-20T09:24:41.588Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/post/blockchain-explained/" target="_blank" rel="noopener">https://codingnconcepts.com/post/blockchain-explained/</a></p></blockquote><p>我们大多数人认为区块链是比特币背后的技术。虽然这是它最初的目的，但区块链有更多的功能……</p><h2><span id="什么是区块链">什么是区块链？</span></h2><p>区块链是数字的、分布式的、不可变的、可信的账本。</p><p>我们一个一个地理解每一个术语：</p><h3><span id="区块链是数字账本-blockchain-is-digital-ledger">区块链是数字账本 Blockchain is Digital Ledger</span></h3><p>你对分类账簿很熟悉，它只不过是记录金融交易的本子。类似地，区块链是一个数字账本，它可以通过编程来记录事情，这些事情不仅限于金融交易，还可以是任何事情，从政府记录到土地所有权，甚至是购买订单。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ledger.png" alt></p><p>分类帐簿中的每一行记录可以假定为区块链中的一块，它们按时间顺序连接在一起，形成一块链。</p><p>您在财务分类帐簿上为以前交易中的任何更改写一个新记录。类似地，如果您想要更改特定块中的记录，您不需要重写它。相反，更改被记录在一个新的块中。</p><h3><span id="区块链是分布式账本-blockchain-is-distributed-ledger">区块链是分布式账本 Blockchain is Distributed Ledger</span></h3><p>让我们假设我与我的朋友们共享一个账本，其中每个人都记录了他们共同的支出。假设，我借了100美元给我的朋友 Ben 并记录在了共享的账本上。现在我的朋友 Charlie 和 David 知道了我借给 Ben 的确切数额他们基本上认可了这笔交易并做了记录。下个月，Ben 问我最初借给他多少钱，我们可以很容易地找到我的朋友 Charlie 或 David，他们有这笔交易的记录。当你结识新朋友时，他们也可以加入你的共享账簿。</p><p>与共享分类帐类似，任何人都可以选择将自己的计算机连接到区块链网络作为节点。这样一来，他们的电脑就会收到区块链的副本，每当有新的区块被添加时，区块链就会自动更新，有点像Facebook 的新闻 Feed，每当有新的状态被发布时，它就会实时更新。</p><p>从这个意义上讲，区块链是分布式的，数据是共享的。</p><h4><span id="优势">优势</span></h4><ul><li>由于数据是共享的，并且每个节点都有事务的副本，所以不需要协调。</li><li>高可用性，因为网络中有数千个分布式节点，即使有几个节点宕机也没关系。</li></ul><h3><span id="区块链是不可变分类账簿-blockchain-is-immutable-ledger">区块链是不可变分类账簿 Blockchain is Immutable Ledger</span></h3><p>让我们看看组成区块链的各个部分，以理解它的不变性</p><ul><li><p><strong>事务（transaction）</strong>: 这是创建块时发生的事务的详细信息</p></li><li><p><strong>哈希（hash）</strong>: 这是代表区块中交易的数字指纹，是完全唯一的。如果事务细节有任何变化，散列也会发生变化。一般来说，它是通过对交易细节应用某种加密算法生成的字母数字序列</p></li><li><p><strong>前哈希（previousHash）</strong>: 这是链中的前一个块的散列值。</p></li></ul><p>我们看看下面区块链的例子。其中交易有发送方、接收方和金额的详细信息。为简单起见，我们只是通过结合事务细节来生成哈希，即。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash = sender + receiver + amount</span><br></pre></td></tr></table></figure><p>请注意，<code>区块1</code> 是我们区块链的第一个区块，也被称为起源区块，没有 <code>preoushash</code> 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Block <span class="number">1</span></span><br><span class="line">transaction     &#123; <span class="attr">sender</span>: Ash, <span class="attr">receiver</span>: Ben: amount: $<span class="number">100</span> &#125;</span><br><span class="line">hash            ashben100  </span><br><span class="line">previousHash</span><br><span class="line"></span><br><span class="line">Block <span class="number">2</span></span><br><span class="line">transaction     &#123; <span class="attr">sender</span>: Ben, <span class="attr">receiver</span>: Charlie: amount: $<span class="number">200</span> &#125;  </span><br><span class="line">hash            bencharlie200  </span><br><span class="line">previousHash    ashben100</span><br><span class="line"></span><br><span class="line">Block <span class="number">3</span></span><br><span class="line">transaction     &#123; <span class="attr">sender</span>: Ash, <span class="attr">receiver</span>: David: amount: $<span class="number">300</span> &#125;  </span><br><span class="line">hash            ashdavid300  </span><br><span class="line">previousHash    bencharlie200</span><br></pre></td></tr></table></figure><p>假设黑客试图将 <code>区块2</code> 中的交易金额从200美元编辑为999美元。一旦他们编辑了交易的金额，区块的哈希值就会改变。链中的下一个 <code>区块3</code> 将仍然包含旧的 <code>preoushash</code>，黑客需要更新该区块以掩盖他们的踪迹。然而，这样做将改变该块的散列。然后是下一个，以此类推。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Block <span class="number">2</span> (Tampered Amount)</span><br><span class="line">transaction     &#123; <span class="attr">sender</span>: Ben, <span class="attr">receiver</span>: Charlie: amount: $<span class="number">999</span> &#125;  </span><br><span class="line">hash            bencharlie999</span><br><span class="line">previousHash    ashben100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Block <span class="number">3</span> (Old Previous Hash)</span><br><span class="line">transaction     &#123; <span class="attr">sender</span>: Ash, <span class="attr">receiver</span>: David: amount: $<span class="number">300</span> &#125;  </span><br><span class="line">hash            ashdavid300  </span><br><span class="line">previousHash    bencharlie200</span><br></pre></td></tr></table></figure><p>为了改变单个区块，黑客将需要改变区块链上的每一个区块。重新计算所有这些散列将需要巨大且难以置信的计算能力。换句话说，一旦一个块被添加到区块链中，它就变得非常难以编辑，也不可能被删除。</p><p>从这个意义上说，区块链是不可变的，是防篡改的。</p><h3><span id="区块链是可信分类帐-blockchain-is-trusted-ledger">区块链是可信分类帐 Blockchain is Trusted Ledger</span></h3><p>当你把钱转账给某人时，你需要通过一个调解员，通常是银行。现在所有的交易记录都集中在银行内部。黑客篡改记录的机会也更多了。</p><p>此外，当你转移像比特币这样的加密货币时，它是由区块链技术支持的，没有中介参与，基本上所有的节点，在区块链网络中有数百万的加密货币，都是中介，有他们自己的记录副本。如果黑客想篡改任何记录，他们需要在所有的百万份记录中进行。</p><p>让我们对此有更多的了解，为了能够在区块链中添加一个新块，节点必须解决一个非常复杂的数学问题，并且需要提供所谓的工作证明。从计算(时间)和电力消耗(金钱)的角度来看，解决谜题是密集的，这既需要时间，也需要金钱。</p><p>正如我们之前看到的，黑客需要篡改所有的数百万份拷贝。如果向区块链添加一个块需要花费如此多的时间和金钱，您可以想象篡改所有数百万份拷贝会是什么样子。这当然不值得付出努力，更有可能是不可能的。</p><p>从这个意义上说，区块链技术是值得信任的。</p><h2><span id="区块链的用例">区块链的用例</span></h2><h3><span id="1-比特币-bitcoin">1. 比特币 Bitcoin</span></h3><p>大多数加密货币-比特币，Dash，Ethereum（以太坊)，Litecoin，Ripple跟随公开的区块链。公共区块链向所有人开放，以查看和访问，也称为无许可区块链，因为您不需要授权。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/cryptocurrency.png" alt="Crypto Currencies"></p><p><strong>比特币协议</strong> 建立在区块链之上。比特币以数字货币的形式推出，其匿名创造者中本聪(Satoshi Nakamoto)称其为 <strong>“一种全新的电子现金系统，完全是点对点的，没有可信的第三方。”</strong></p><h4><span id="比特币是如何运作的">比特币是如何运作的?</span></h4><p>全世界都有这样的人，他们拥有比特币。世界各地可能有数百万人至少拥有比特币的一部分。假设这数百万人中的一个想把比特币花在食品杂货上。这就是区块链的作用所在。</p><ul><li><p>当一个人用比特币为另一个人支付商品时，本质上一笔交易就启动了。这种交易包含所有必要的信息，如发送方和接收方，但不包含实际的姓名，而是使用类似于用户名的唯一 <strong>数字签名</strong> 以及金额、时间戳等。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Bitcoin Block</span><br><span class="line">transaction: &#123; </span><br><span class="line">                type: BITCOIN</span><br><span class="line">                sender: g4h4g5jnsm6bd4b8d0q6d8v4zx5k2la8d9n4c6f8, </span><br><span class="line">                receiver: m1n2h3b4b5v6c7xz89sld8ff9d47d9dft47mkd,</span><br><span class="line">                amount: <span class="number">25</span></span><br><span class="line">                timestamp: dd-mm-yyyy hh:mm:sss</span><br><span class="line">            &#125;</span><br><span class="line">hash:           ???????</span><br><span class="line">previousHash:   b4h84nv46sn29n4b5h6j7k8l2l3nx6b3n8l38xn40z54n2bv68c</span><br></pre></td></tr></table></figure></li><li><p>该交易加入了比特币网络上的其他交易。</p></li></ul><h4><span id="比特币旷工">比特币旷工</span></h4><p>比特币区块链是一个公开的区块链，这意味着任何人都可以注册自己成为<strong>比特币矿工</strong>之一。比特币矿工是比特币区块链网络中的节点。网络中的所有节点本质上都拥有所有事务的副本，任何时候进行新的事务时，它们都将收到新块的通知。</p><ul><li>网络中的所有比特币矿工开始收集这些交易，并通过查看区块链到目前为止发生的所有交易进行验证，这些交易也是有效的。</li><li>每个比特币矿工尝试解决加密哈希难题，也被称为<strong>工作证明</strong>算法。现在，这是公共区块链和无许可区块链使用的<strong>共识算法</strong>，本质上，这是他们能够就下一个区块达成共识的方式。</li><li>一旦一个比特币矿工解决了这个难题，本质上意味着生成了下一个块的哈希值，他们要做的就是将该块的哈希值广播给网络中的所有其他节点。所有节点验证哈希的真实性，- 一旦所有节点都通过验证，它就作为一个新块添加到网络中的所有节点中。<br>比特币矿工也因为他们在解决这个谜题上的工作而获得比特币奖励。解决谜题也被称为<strong>挖矿</strong></li></ul><h4><span id="如果其中一个比特币矿工是黑客呢">如果其中一个比特币矿工是黑客呢?</span></h4><p>比特币矿工是比特币网络中的一个节点，如果比特币矿工是一个黑客，他们操纵自己的记录副本，那么比特币协议通过一个称为<strong>共识</strong>的过程阻止这种被操纵的区块链的存在。当存在多个不同的区块链副本时，共识协议将采用可用的最长链。</p><h4><span id="为什么加密哈希谜题耗时">为什么加密哈希谜题耗时?</span></h4><p>每个节点都尝试通过<strong>SHA-256算法</strong>从事务细节中生成唯一的哈希值来解决哈希难题，这可能会花费更少的时间。但是一些协议，比如比特币协议，限制哈希生成时必须有32个前导0。生成带有前导或尾部零的散列要复杂得多。类似地，生成带有10个前导0的散列比使用5个前导0的散列计算量更大。</p><p>现在您会说事务细节已经固定，它将根据这些细节生成散列。我们如何生成一个前缀为0的哈希?因为这个块有一个叫做<strong>nonce</strong>的特殊字段，它也被包含在生成哈希表中。每个节点都不断地尝试修改nonce值，直到找到具有指定前导零的散列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHA<span class="number">-256</span> ( nonce + transaction details ) = <span class="number">00000</span>h3bdju7vb3n9s73nf92n1b38d</span><br></pre></td></tr></table></figure><h3><span id="2-私有区块链-private-blockchain">2. 私有区块链 Private Blockchain</span></h3><p>区块链也可以用于供应链、银行和政府部门等业务。它们大多是<strong>私有区块链</strong>，可以被一组经过选择的授权用户访问，如您的公司、一组银行或政府机构。这也被称为<strong>许可</strong>区块链。</p><p>私有区块链也使用共识算法，但由于节点数量有限，它们不像公共区块链那么复杂。</p><p>在被许可的区块链中，节点是受信任的，所以它们通常彼此认识。此外，它们并不总是代表用户，而是代表整个组织。所以，在这种情况下，我们的隐私是被许可的区块链的主要租户之一，这是非常重要的。</p><h3><span id="3供应链-supply-chain">3.供应链 Supply Chain</span></h3><p>举个例子，假设有一个零售商以1000美元购买了25件商品。现在，制造商收到零售商的订单，并说:“好的，让我们批准”。让我们确保仓库里有足够的库存，并与货运公司合作。于是，他们去找船运公司，他们说，“好吧，我们把这100件商品运出去吧”他们要花100美元来装运。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Block <span class="number">1</span></span><br><span class="line">transaction: &#123; </span><br><span class="line">                type: BUY</span><br><span class="line">                company: Star Retailer Ltd., </span><br><span class="line">                items: <span class="number">25</span>,</span><br><span class="line">                total_cost: $<span class="number">1000</span>,</span><br><span class="line">                discount: $<span class="number">50</span></span><br><span class="line">             &#125;</span><br><span class="line">hash:           buystartcompanyltd25100050</span><br><span class="line">previousHash:   -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Block <span class="number">2</span></span><br><span class="line">transaction: &#123; </span><br><span class="line">                type: SHIP</span><br><span class="line">                company: Shipping Bird Co., </span><br><span class="line">                items: <span class="number">25</span>,</span><br><span class="line">                total_cost: $<span class="number">100</span>,</span><br><span class="line">                dispatch_date: DD MM YY,</span><br><span class="line">                arrival_date: DD MM YY</span><br><span class="line">             &#125; </span><br><span class="line">hash:           shipshippingbirdco25100ddmmyyddmmyy </span><br><span class="line">previousHash:   buystartcompanyltd25100050</span><br></pre></td></tr></table></figure><p>这里有一些隐私问题，</p><ul><li>制造商应该知道关于零售商和运输的所有信息</li><li>零售商不必知道运输成本</li><li>发货不一定要知道零售商花了多少钱</li><li>其他在区块链的零售商不应该知道这个零售商和装运</li></ul><p>因此在本例中，所有的组织都是区块链的一部分，只有作为交易一部分的零售商才能<br>看到该信息。因此，隐私必须是区块链的一部分，以便企业能够控制谁可以看到特定的交易细节。</p><h3><span id="4-智能合同-smart-contracts">4. 智能合同 Smart Contracts</span></h3><p>区块链技术最成功的商业应用之一是 <strong>智能合同</strong>。本质上，这是运行在区块链上的代码，只要满足某些条件，它们就会自动执行。</p><p>在之前的供应链例子中，每当零售商向制造商下订单购买一定量的商品时可能会有一个生产代理反复检查订单是否包含所有必要信息，然后，他们可能会去航运代理，以确保他们可以支付装运，如果仓库有正确的货物数量。然后他们会下装运订单。现在想象一下，如果我们可以自动化整个过程。</p><p>这就是你可以用 <strong>智能合同</strong> 做的事情，本质上是确保满足所有必要信息的代码，它会自动创建发货记录。如果不满足其中任何一个条件，它可以自动向零售商发放退款。这加快了整个过程。</p><h4><span id="房地产-real-estate">房地产 Real Estate</span></h4><p>智能合约可以自动处理业权契约，方便交易，甚至通过智能钥匙授予对物业的访问权。该技术可以简化房产销售，节省买家的时间和金钱，而不需要任何中间人或房地产代理。</p><h3><span id="5-跨境支付-cross-border-payments">5. 跨境支付 Cross Border Payments</span></h3><p>在其他国家工作的人通常会从汇款机构把钱寄回家，这需要几个小时，有时几天，而且他们还要支付一大笔费用。区块链技术将消除这些中介机构，缩短转会费和转会费的时间。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/remittance.png" alt="Blockchain innovators for Cross Border Payments"></p><h3><span id="6-在线投票-online-voting">6. 在线投票 Online Voting</span></h3><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/voting.png" alt="voting"></p><p>在许多国家，选民必须亲自到投票站投票。人们一直担心人工投票和投票机的真实性。许多国家也在网上进行投票，但他们也担心安全和欺诈。区块链可以成功地消除这些担忧，因为它将提供一个清楚的投票记录。区块链的防篡改功能使其难以破解支持区块链的投票系统。有了区块链，选民可以在舒适的家中投票。居住在国外的公民也可以投票。这可能会导致投票率大幅上升。</p><p>西弗吉尼亚州使用区块链技术实现了一种安全的移动投票应用程序，允许选民以电子方式接收、投票和返还选票，这是美国历史上2018年的第一个项目。</p><p>公司致力于在线区块链投票解决方案-</p><ul><li><a href="https://followmyvote.com/" target="_blank" rel="noopener">FollowMyVote</a>,</li><li><a href="https://voatz.com/" target="_blank" rel="noopener">Voatz, https://voatz.com/</a></li><li><a href="https://www.scytl.com/en/" target="_blank" rel="noopener">Scytl, https://www.scytl.com/en/</a></li><li><a href="https://clearballot.com/" target="_blank" rel="noopener">Clear Ballot, https://clearballot.com/</a></li><li><a href="https://www.polyas.com/" target="_blank" rel="noopener">Polyas, https://www.polyas.com/</a></li><li><a href="http://www.intelivote.com/" target="_blank" rel="noopener">Intelivote, http://www.intelivote.com/</a></li><li><a href="https://www.smartmatic.com/" target="_blank" rel="noopener">SMARTMATIC, https://www.smartmatic.com/</a></li><li><a href="https://electionrunner.com/" target="_blank" rel="noopener">electionrunner, https://electionrunner.com/</a></li></ul><h3><span id="7-银行间支付-inter-bank-payments">7. 银行间支付 Inter-bank Payments</span></h3><p>新加坡金融管理局(MAS)宣布了<a href="https://www.mas.gov.sg/schemes-and-initiatives/Project-Ubin" target="_blank" rel="noopener">Ubin-https://www.mas.gov.sg/schemes-and-initiatives/Project-Ubin</a>项目，该项目使用区块链和分布式账本技术(DLT)进行银行间支付，与美国银行美林、瑞士信贷、星展银行、汇丰银行、摩根大通、三菱UFJ金融集团、华侨银行、新加坡交易所、渣打银行、和大华银行。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/interbankpayment.png" alt></p><h3><span id="8-身份管理-identity-management">8. 身份管理 Identity Management</span></h3><p>一个人的身份包括基本信息(姓名、年龄、性别、国籍、地址、联系方式等)和身份证明文件，如出生证明、驾驶执照、选民卡和唯一身份证。这些细节都可以存储在分布式的、安全的、不可变的区块链记录中。</p><p><strong>好处</strong></p><ol><li>分布式身份管理系统可以被全球范围内的许多服务同时使用。</li><li>银行等金融服务可以使用该功能验证客户身份，以确保KYC(了解客户)的遵从性。</li><li>像学校、大学这样的教育服务机构可以用它为学生提供学术证书。这样就解决了验证证书真实性的问题，避免了假证书的欺诈。</li><li>政府机构可以用它来保存出生证明，结婚证，土地权证，以避免腐败。</li></ol><h2><span id="总结-summary">总结 Summary</span></h2><p>我希望读完这篇文章后，你对区块链技术和它的实际应用有一个基本的了解。我会根据我的发现继续更新这篇文章。感谢你的阅读。</p><p>如果对一些区块链编码感兴趣，请阅读文章——<a href="https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/" target="_blank" rel="noopener">使用JavaScript实现区块链 - https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/</a></p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/post/blockchain-explained/" target="_blank" rel="noopener">https://codingnconcepts.com/post/blockchain-explained/</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcept
      
    
    </summary>
    
    
      <category term="区块链" scheme="https://cl9000.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="https://cl9000.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>三个有用的JS技巧</title>
    <link href="https://cl9000.github.io/2020/04/12/JavaScript%E4%B8%89%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84JS%E6%8A%80%E5%B7%A7/"/>
    <id>https://cl9000.github.io/2020/04/12/JavaScript%E4%B8%89%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84JS%E6%8A%80%E5%B7%A7/</id>
    <published>2020-04-12T08:56:06.000Z</published>
    <updated>2021-04-16T05:51:20.749Z</updated>
    
    <content type="html"><![CDATA[<p>​<br>人只有献身于社会，才能找出那短暂而有风险的生命的意义。——&lt;阿尔伯特·爱因斯坦&gt;</p><p>原文链接<br><a href="https://www.jstips.co/en/javascript/three-useful-hacks/" target="_blank" rel="noopener">https://www.jstips.co/en/javascript/three-useful-hacks/</a></p><h2><span id="1-从后到前获取数组项">1、从后到前获取数组项</span></h2><p>如果要从后到前获取数组项，只需执行以下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-1</span>)); <span class="comment">// [4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-2</span>)); <span class="comment">// [3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-3</span>)); <span class="comment">// [2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-4</span>)); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2><span id="2-短路有条件">2、短路有条件</span></h2><p>如果必须在条件为 true 的情况下执行函数，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    dosomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以像这样使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition &amp;&amp; dosomething();</span><br></pre></td></tr></table></figure><h2><span id="3-使用-设置变量默认值">3、使用 || 设置变量默认值</span></h2><p>如果必须为变量设置默认值，则可以执行以下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefined</span></span><br><span class="line">​</span><br><span class="line">a = a || <span class="string">'default value'</span>;</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//default value</span></span><br><span class="line">​</span><br><span class="line">a = a || <span class="string">'new value'</span>;</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//default valu</span></span><br></pre></td></tr></table></figure><blockquote><p>原文链接：<a href="https://www.jstips.co/en/javascript/three-useful-hacks/" target="_blank" rel="noopener">https://www.jstips.co/en/javascript/three-useful-hacks/</a></p></blockquote><p>关注【公众号】，了解更多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​&lt;br&gt;
人只有献身于社会，才能找出那短暂而有风险的生命的意义。——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;p&gt;原文链接&lt;br&gt;
&lt;a href=&quot;https://www.jstips.co/en/javascript/three-useful-hacks/&quot; ta
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用 tap 快速 debug</title>
    <link href="https://cl9000.github.io/2020/04/12/JavaScript-%E4%BD%BFtap%E6%9D%A5%E5%BF%AB%E9%80%9Fdebug/"/>
    <id>https://cl9000.github.io/2020/04/12/JavaScript-%E4%BD%BFtap%E6%9D%A5%E5%BF%AB%E9%80%9Fdebug/</id>
    <published>2020-04-12T08:29:00.000Z</published>
    <updated>2021-04-22T02:20:10.718Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/javascript-7.png" alt></p><p>在这里 <code>tap</code> 是一个可以用来快速调试、链式调用、匿名函数，还可以打印任何你想打印的东西的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么我们不用 console.log 这个老方式了？让我来示范一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bank_totals_by_client(bank_info(<span class="number">1</span>, banks), table)</span><br><span class="line">            .filter(<span class="function"><span class="params">c</span> =&gt;</span> c.balance &gt; <span class="number">25000</span>)</span><br><span class="line">            .sort(<span class="function">(<span class="params">c1, c2</span>) =&gt;</span> c1.balance &lt; = c2.balance ? <span class="number">1</span> : <span class="number">-1</span> )</span><br><span class="line">            .map(<span class="function"><span class="params">c</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;c.id&#125;</span> | <span class="subst">$&#123;c.tax_number&#125;</span> (<span class="subst">$&#123;c.name&#125;</span>) =&gt; <span class="subst">$&#123;c.balance&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>现在，加入你从这个链式调用中没有得到任何返回。 在哪里除了问题呢？或许 bank_info 没有返回东西，我们需要监听（tap）它:</p><p><code>bank_totals_by_client(tap(bank_info(1, banks)), table)</code></p><p>基于我们特殊的实现，它可能会打印一些东西，也可能什么也不打印。 我们假设，打印出来的东西是正确的，因此， <code>bank_info</code> 没有问题。</p><p>我们需要继续调试下一个函数，<code>filter</code> 。</p><p><code>.filter(c =&gt; tap(c).balance &gt; 25000)</code></p><p>我们可以得到 <code>c</code> 吗？如果可以，说明 <code>bank_totals_by_client</code> 运行正常。 可能是 <code>filter</code> 内的条件有问题？</p><p><code>.filter(c =&gt; tap(c.balance &gt; 25000))</code></p><p>我们发现除了 false 没有打印其他东西，所以说明没有一个 client &gt;25000， 这就是为什么方法什么也没返回的原因。</p><p>(附) 更先进的 tap</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span>(<span class="params">x, fn = x =&gt; x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fn(x));</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想在监听 <code>（tap）</code> 之前事先做一些操作应该怎么办？比如，我们只想方位某个对象特定的参数，位于一个逻辑运算，等等。<br>使用上面的方法，在调用的时候增加一个额外参数，这个函数在被监听 <code>（tap）</code> 的时候就会被执行。</p><p><code>tap(3, x =&gt; x + 2) === 3; // 打印出来 5 ，但是返回 true ，为什么 :-)?</code></p><br><h3><span id="参考">参考</span></h3><blockquote><p>原文：<a href="https://github.com/loverajoel/jstips/blob/master/_posts/en/javascript/2017-03-16-tapping-for-quick-debugging.md" target="_blank" rel="noopener">https://github.com/loverajoel/jstips/blob/master/_posts/en/javascript/2017-03-16-tapping-for-quick-debugging.md</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/javascript-7.png&quot; a
      
    
    </summary>
    
    
    
      <category term="debug" scheme="https://cl9000.github.io/tags/debug/"/>
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>window.location备忘录</title>
    <link href="https://cl9000.github.io/2020/04/08/window-location%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://cl9000.github.io/2020/04/08/window-location%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2020-04-08T09:46:23.000Z</published>
    <updated>2021-04-07T10:06:28.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在事情成功之前，一切总看似不可能。——&lt;纳尔逊·曼德拉&gt;</p></blockquote><blockquote><p>作者：Samantha Ming<br>译者：cl9000<br>来源：medium<br>原文：<a href="https://morioh.com/p/b444d291bdfb" target="_blank" rel="noopener">https://morioh.com/p/b444d291bdfb</a></p></blockquote><p>如果你想获取站点的URL信息，那么window.location对象什么很适合你！使用其属性获取有关当前页面地址的信息，或使用其方法进行某些页面重定向或刷新。</p><p><code>https://morioh.com/search?c=cl9000#1</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.origin    → <span class="string">'"https://morioh.com'</span></span><br><span class="line">               .protocol  → <span class="string">'https:'</span></span><br><span class="line">               .host      → <span class="string">'morioh.com'</span></span><br><span class="line">               .hostname  → <span class="string">'morioh.com'</span></span><br><span class="line">               .port      → <span class="string">''</span></span><br><span class="line">               .pathname  → <span class="string">'/search'</span></span><br><span class="line">               .search    → <span class="string">'?c=cl9000'</span></span><br><span class="line">               .hash      → <span class="string">'#1'</span></span><br><span class="line">               .href      → <span class="string">'https://morioh.com/search?c=cl9000#1'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.assign(<span class="string">'url'</span>)</span><br><span class="line">                .replace(<span class="string">'url'</span>)</span><br><span class="line">                .reload()</span><br><span class="line">                .toString()</span><br><span class="line">​</span><br></pre></td></tr></table></figure><h2><span id="windowlocation-属性">window.location 属性</span></h2><table><thead><tr><th>window.location</th><th>返回值</th></tr></thead><tbody><tr><td>.origin</td><td>站点主地址(协议 + 主机名 + 端口)</td></tr><tr><td>.protocol</td><td>协议架构 (http: 或者 htts:)</td></tr><tr><td>.host</td><td>域名 + 端口</td></tr><tr><td>.port</td><td>端口</td></tr><tr><td>.pathname</td><td>最前页的 ‘/’ 后面跟的路径</td></tr><tr><td>.search</td><td>? 后跟的查询字符串</td></tr><tr><td>.hash</td><td>从 # 号开始的部分</td></tr><tr><td>.href</td><td>完整网址</td></tr></tbody></table><h2><span id="host-和-hostname-的区别">host 和 hostname 的区别</span></h2><p>在上面的示例中，你可能注意到host和hostname返回相同的值。那么为什么要这些属性。好吧，这与端口号有关，让我们来看看。</p><h4><span id="没有端口的-url">没有端口的 URL</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//morioh.com/search</span></span><br><span class="line">​</span><br><span class="line"><span class="built_in">window</span>.location.host; <span class="comment">// 'morioh.com'</span></span><br><span class="line"><span class="built_in">window</span>.location.hostname; <span class="comment">// 'morioh.com'</span></span><br><span class="line">​</span><br><span class="line"><span class="built_in">window</span>.location.port; <span class="comment">// ''</span></span><br></pre></td></tr></table></figure><h4><span id="带端口的-url">带端口的 URL</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//morioh.com/search"8080</span></span><br><span class="line">​</span><br><span class="line"><span class="built_in">window</span>.location.host; <span class="comment">// 'morioh.com:8080'</span></span><br><span class="line"><span class="built_in">window</span>.location.hostname; <span class="comment">// 'morioh.com'</span></span><br><span class="line"><span class="built_in">window</span>.location.port; <span class="comment">// '8080'</span></span><br></pre></td></tr></table></figure><p>因此，host将包括端口号，而hostname将仅返回主机名。</p><h2><span id="如何更改-url-属性">如何更改 URL 属性</span></h2><p>我们不仅可以调用location`  属性来检索URL信息，还可以使用它来设置新属性并更改URL。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始 'https://morioh.com/'</span></span><br><span class="line"><span class="built_in">window</span>.location.pathname = <span class="string">'/cl9000'</span>; <span class="comment">// 设置 pathname</span></span><br><span class="line"><span class="comment">// 结果 'https://morioh.com/cl9000'</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>下面是你可以更改的属性的完整列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事例</span></span><br><span class="line"><span class="built_in">window</span>.location.protocol = <span class="string">'https'</span></span><br><span class="line">               .host     = <span class="string">'localhost:8080'</span></span><br><span class="line">               .hostname = <span class="string">'localhost'</span></span><br><span class="line">               .port     = <span class="string">'8080'</span></span><br><span class="line">               .pathname = <span class="string">'path'</span></span><br><span class="line">               .search   = <span class="string">'query string'</span> <span class="comment">// (这里不用写 `?`)</span></span><br><span class="line">               .hash     = <span class="string">'hash'</span> <span class="comment">// (这里不用写 `#`)</span></span><br><span class="line">               .href     = <span class="string">'url'</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>唯一不能设置的属性是window.location.origin，此属性是只读的。</p><h2><span id="location-对象">Location 对象</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location返回一个Location对象。它为我们提供有关页面当前地址的信息。但是我们还可以通过几种方式访问Location对象。</span><br><span class="line"><span class="built_in">window</span>.location          → Location</span><br><span class="line"><span class="built_in">window</span>.document.location → Location</span><br><span class="line"><span class="built_in">document</span>.location        → Location</span><br><span class="line">location                 → Location</span><br></pre></td></tr></table></figure><p>我们这样做的原因是这些是我们浏览器中的全局变量。</p><h2><span id="windowlocation-vs-location">window.location  VS  location</span></h2><p>上面四个属性都指向同一个Location对象。我个人更喜欢window.location并且实际上会避免使用location。主要是因为location看起来像一个普通变量，并且我们有时可能会不小心将其命名为变量，这将覆盖全局变量。举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.samanthaming.com</span></span><br><span class="line">​</span><br><span class="line">location.protocol; <span class="comment">// 'https'</span></span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">localFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> location = <span class="string">'/sam'</span>;</span><br><span class="line">​</span><br><span class="line">  <span class="keyword">return</span> location.protocol;</span><br><span class="line">  <span class="comment">// ❌ undefined</span></span><br><span class="line">  <span class="comment">//    b/c local "location" has override the global variable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我想大多数开发人员都知道window是一个全局变量。这样就不太可能引起混淆。老实说，直到我写了这篇文章，我才知道location 是一个全局变量。建议大家多使用 window.location 来代替其它写法。</p><h2><span id="windowlocation-方法">window.location 方法</span></h2><p>方法          作用<br>.assign()加载一个新的文档<br>.replace()用新的文档替换当前文档<br>.reload()重新加载当前页面<br>.reload()返回的URL</p><h2><span id="windowlocationtostring">window.location.toString</span></h2><p>根据 MDN :<br>此方法返回 URL 的 USVString，它是 Location.href 的只读版本。</p><p>换句话说，我们可以这样得到  href  的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.samanthaming.com</span></span><br><span class="line"><span class="built_in">window</span>.location.href; <span class="comment">// https://www.samanthaming.com</span></span><br><span class="line"><span class="built_in">window</span>.location.toString(); <span class="comment">// https://www.samanthaming.com</span></span><br></pre></td></tr></table></figure><h2><span id="assign-vs-replace">assign vs replace</span></h2><p>这两种方法都是重定向或导航到另一个URL。区别在于assign 是将当前页面保存在历史记录中，因此用户可以使用“后退”按钮导航到该页面。而使用replace方法时，不会保存它。让我们来看一个例子。</p><h2><span id="assign">Assign</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 打开一个新的空白页</span><br><span class="line"><span class="number">2.</span> 输入 www.samanthaming.com (当前页)</span><br><span class="line"><span class="number">3.</span> 使用 <span class="string">`window.location.assign('https://www.baidu.com')`</span> 载入新页面</span><br><span class="line"><span class="number">4.</span> 按 <span class="string">"返回上一页"</span></span><br><span class="line"><span class="number">5.</span> 返回到了 👉 www.samanthaming.com</span><br></pre></td></tr></table></figure><h2><span id="replace">Replace</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 打开一个新的空白页</span><br><span class="line"><span class="number">2.</span> 输入 www.samanthaming.com (当前页)</span><br><span class="line"><span class="number">3.</span> 使用 <span class="string">`window.location.assign('https://www.baidu.com')`</span> 载入新页面</span><br><span class="line"><span class="number">4.</span> 按 <span class="string">"返回上一页"</span></span><br><span class="line"><span class="number">5.</span> 返回到一个空白页</span><br></pre></td></tr></table></figure><h2><span id="如何让页面重定向">如何让页面重定向</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如何重定向到另一个页面，有<span class="number">3</span>种方法。</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="string">'https://www.samanthaming.com'</span>;</span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="string">'https://www.samanthaming.com'</span>);</span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="string">'https://www.samanthaming.com'</span>);</span><br></pre></td></tr></table></figure><h2><span id="replace-vs-assign-vs-href">replace VS assign VS href</span></h2><p>这三个都可以重定向，区别在于浏览器的历史记录。href和assign 会把当前页面保存在历史记录中，而replace则不会。因此，如果你想创建一种导航无法回到原始页面的体验，请使用replace👍</p><p>现在的问题是href与assign。我更喜欢assign，因为它是一种方法，因此感觉好像我正在执行一些操作。还有一个额外的好处是它更易于测试。我已经编写了许多Jest测试，因此通过使用一种方法，它使其更易于模拟。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.assign = jest.fn();</span><br><span class="line">​</span><br><span class="line">myUrlUpdateFunction();</span><br><span class="line">​</span><br><span class="line">expect(<span class="built_in">window</span>.location.assign).toBeCalledWith(<span class="string">'http://my.url'</span>);</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>最终希望备忘单，希望能对你有所帮助，在需要的时候，能快速给你带来答案。谢谢大家的观看。</p><p>关注【公众号】，了解更多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在事情成功之前，一切总看似不可能。——&amp;lt;纳尔逊·曼德拉&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Samantha Ming&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：medium&lt;br&gt;
原文：&lt;a 
      
    
    </summary>
    
    
    
      <category term="window.location" scheme="https://cl9000.github.io/tags/window-location/"/>
    
  </entry>
  
  <entry>
    <title>basicScroll – 独立视差滚动</title>
    <link href="https://cl9000.github.io/2020/04/07/basicScroll%E7%8B%AC%E7%AB%8B%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8/"/>
    <id>https://cl9000.github.io/2020/04/07/basicScroll%E7%8B%AC%E7%AB%8B%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8/</id>
    <published>2020-04-07T09:48:40.000Z</published>
    <updated>2021-04-07T08:20:31.212Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/basicscroll001.png" alt="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/basicscroll001.png"></p><blockquote><p>使用 CSS 变量改变动画的移动端和桌面端的独立视差滚动。</p></blockquote><p><a href="https://basicscroll.electerious.com/" target="_blank" rel="noopener">basicscroll - https://basicscroll.electerious.com/</a><br><a href="https://github.com/electerious/basicScroll" target="_blank" rel="noopener">basicScroll - https://github.com/electerious/basicScroll</a></p><p>basicScroll 可以根据 CSS 变量来改变滚动位置。你可以在 CSS 中使用变量来制作想要的动画效果。basicScroll 运行非常流畅，在桌面和移动设备上运行出色，并且支持触摸。</p><p>basicScroll 独立于框架，支持 CommonJS 和 AMD ，拥有简单的 JS API 。</p><h2><span id="特性">特性</span></h2><ul><li>框架独立</li><li>疯狂的表演</li><li>支持移动和桌面</li><li>CommonJS和AMD的支持</li><li>简单的JS API</li></ul><h2><span id="安装">安装</span></h2><p>建议使用 <code>npm 或 yarn</code> 安装 <code>basicScroll</code>。</p><p><code>$ npm install basicscroll</code></p><p><code>$ yarn add basicscroll</code></p><p>将 <code>JS</code> 文件包含在 <code>&lt;body&gt;</code> 标记的末尾</p><p><code>&lt;script src=&quot;dist/basicScroll.min.js&quot;&gt;&lt;/script&gt;</code></p><p>或者跳过<code>JS</code>文件，使用<code>basicScroll</code>作为模块:</p><p><code>const basicScroll = require('basicScroll')</code></p><p><code>import * as basicScroll from 'basicscroll'</code></p><h2><span id="用法">用法</span></h2><p>下面的示例所演示的是如何在用户滚动时更改元素的不透明度。只要元素的顶部到达视口的底部，元素就开始淡化。当元素的中间部分位于视口中间时，达到.99的不透明度。</p><p>提示：从.01到.99的动画避免了元素从完全透明变为半透明，并从半透明变为完全可见时触发的重绘。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = basicScroll.create(&#123;</span><br><span class="line">trueelem: <span class="built_in">document</span>.querySelector(<span class="string">'.element'</span>),</span><br><span class="line">true<span class="keyword">from</span>: <span class="string">'top-bottom'</span>,</span><br><span class="line">trueto: <span class="string">'middle-middle'</span>,</span><br><span class="line">trueprops: &#123;</span><br><span class="line">truetrue<span class="string">'--opacity'</span>: &#123;</span><br><span class="line">truetruetrue<span class="keyword">from</span>: <span class="number">.01</span>,</span><br><span class="line">truetruetrueto: <span class="number">.99</span></span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance.start()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.element &#123;</span><br><span class="line">true<span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用与上面实例中指定的相同的CSS变量。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">trueopacity: <span class="keyword">var</span>(--opacity);</span><br><span class="line">true<span class="comment">/*</span></span><br><span class="line"><span class="comment"> * CSS 属性 will-change 为web开发者提供了一种告知浏览器该元素会有哪些变化的方法，这样浏览器可以在元素属性真正发生变 </span></span><br><span class="line"><span class="comment">         * 化之前提前做好对应的优化准备工作。这种优化可以将一部分复杂的计算工作提前准备好，使页面的反应更为快速灵敏。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="comment">// will-change: opacity;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/basicscroll001.png&quot; alt=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogI
      
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://cl9000.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Pressure.js – 用于处理Force Touch，3D Touch的JS库</title>
    <link href="https://cl9000.github.io/2020/04/07/Pressurejs%E5%A4%84%E7%90%86Touch%E7%9A%84JS%E5%BA%93/"/>
    <id>https://cl9000.github.io/2020/04/07/Pressurejs%E5%A4%84%E7%90%86Touch%E7%9A%84JS%E5%BA%93/</id>
    <published>2020-04-07T09:11:15.000Z</published>
    <updated>2021-04-07T05:38:50.374Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>干就完了 – <cl9000></cl9000></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Pressurejs.gif" alt></p><p><a href="https://pressurejs.com/" target="_blank" rel="noopener">pressurejs - https://pressurejs.com/</a><br><a href="https://github.com/stuyam/pressure" target="_blank" rel="noopener">pressurejs - https://github.com/stuyam/pressure</a></p><blockquote><p>Pressure.js 是一个用于处理 web 上的 Force Touch ，3D Touch 和指针压力的 JavaScript 库。</p></blockquote><h2><span id="安装">安装</span></h2><p>可以从 GitHub 下载 <code>pressure.min.js</code> 或 <code>pressure.js</code> 文件，也可以使用 <code>npm</code> 或 <code>bower</code> 进行安装。</p><h4><span id="npm">npm</span></h4><p><code>$ npm install pressure --save</code></p><h4><span id="bower">bower</span></h4><p><code>$ bower install pressure --save</code></p><h2><span id="配置">配置</span></h2><p>在全局空间中使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#id-name'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者与 browserify 或 CommonJS 一起使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Pressure = <span class="built_in">require</span>(<span class="string">'pressure'</span>);</span><br><span class="line"></span><br><span class="line">Pressure.set(<span class="string">'#id-name'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="用法">用法</span></h2><p>注意:每个回调方法中的&quot;this&quot;关键字将是应用于它的元素本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#element'</span>, &#123;</span><br><span class="line">  start: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 开始时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  end: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 结束时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  startDeepPress: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 压感触控/深压时, 也就是一旦压感大于0.5时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  endDeepPress: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 当压感触控/深压结束时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 每次压感发生变化时都会被调用</span></span><br><span class="line">    <span class="comment">// 在移动设备和桌面端，压感的值始终为0到1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  unsupported: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 注意：只有在polyfill选项被禁用的情况下才会调用这个选项！</span></span><br><span class="line">    <span class="comment">// 一旦触摸元素并且设备或浏览器不支持压感触控或3D触控时调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="jquery-用法">jQuery 用法</span></h2><p>注意:每个回调方法中的&quot;this&quot;关键字将是应用于它的元素本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#element'</span>).pressure(&#123;</span><br><span class="line">    start: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 开始时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    end: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 结束时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    startDeepPress: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 压感触控/深压时, 也就是一旦压感大于0.5时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    endDeepPress: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 当压感触控/深压结束时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    change: <span class="function"><span class="keyword">function</span> (<span class="params">force, event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 每次压感发生变化时都会被调用</span></span><br><span class="line">        <span class="comment">// 在移动设备和桌面端，压感的值始终为0到1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    unsupported: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 注意：只有在polyfill选项被禁用的情况下才会调用这个选项！</span></span><br><span class="line">        <span class="comment">// 一旦触摸元素并且设备或浏览器不支持压感触控或3D触控时调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="可选项">可选项</span></h2><h3><span id="polyfill-support">Polyfill Support</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;,</span><br><span class="line">  unsupported: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"Oh no, this device does not support pressure."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;<span class="attr">polyfill</span>: <span class="literal">false</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="polyfill-speed-up">Polyfill Speed Up</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;<span class="attr">polyfillSpeedUp</span>: <span class="number">5000</span>&#125;);</span><br><span class="line"><span class="comment">// takes 5 seconds to go from a force value of 0 to 1</span></span><br><span class="line"><span class="comment">// only on devices that do not support pressure</span></span><br></pre></td></tr></table></figure><h3><span id="polyfill-speed-down">Polyfill Speed Down</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;<span class="attr">polyfillSpeedDown</span>: <span class="number">2000</span>&#125;);</span><br><span class="line"><span class="comment">// takes 2 seconds to go from a force value of 1 to 0</span></span><br><span class="line"><span class="comment">// only on devices that do not support pressure</span></span><br></pre></td></tr></table></figure><h3><span id="只能在触控板鼠标上运行-only-run-on-force-touch-trackpads-mouse">只能在触控板(鼠标)上运行 Only run on Force Touch trackpads (mouse)</span></h3><blockquote><p>Set the option only to the type you want it to run on ‘mouse’, ‘touch’, or ‘pointer’. The names are the types of events that pressure will respond to.<br>【译】只设置选项的类型，你希望它运行在’鼠标’，‘触摸’，或’指针’。这些名称是压力响应的事件类型。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">only</span>: <span class="string">'mouse'</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="只在3d-touch上运行touch-only-run-on-3d-touch-touch">只在3D Touch上运行(Touch) Only run on 3D Touch (touch)</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">only</span>: <span class="string">'touch'</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="只在指针支持的设备上运行指针-only-run-on-pointer-supported-devices-pointer">只在指针支持的设备上运行(指针) Only run on Pointer Supported Devices (pointer)</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">only</span>: <span class="string">'pointer'</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="更改preventselect选项-change-the-preventselect-option">更改preventSelect选项 Change the preventSelect option</span></h3><blockquote><p>The preventDefault option in “true” by default and it prevents the default actions that happen on 3D “peel and pop” actions and the Force “define word” actions as well as other defaults. To allow the defaults to run set preventDefault to “false”<br>【译】该preventDefault选项在“true”默认情况下，它防止发生在3D“剥离和弹出”行动和Force“define word”行动以及其他默认情况下的默认行动。允许默认值运行设置preventDefault为false</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">preventSelect</span>: <span class="literal">false</span>&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;干就完了 – &lt;cl9000&gt;&lt;/cl9000&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Pressurejs.gif&quot;
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://cl9000.github.io/tags/javascript/"/>
    
      <category term="Touch" scheme="https://cl9000.github.io/tags/Touch/"/>
    
      <category term="3d-touch" scheme="https://cl9000.github.io/tags/3d-touch/"/>
    
      <category term="Pressure" scheme="https://cl9000.github.io/tags/Pressure/"/>
    
      <category term="Pressurejs" scheme="https://cl9000.github.io/tags/Pressurejs/"/>
    
      <category term="pointer-events" scheme="https://cl9000.github.io/tags/pointer-events/"/>
    
  </entry>
  
  <entry>
    <title>Plyr 是一个简单、轻量级、可定制的HTML5播放器</title>
    <link href="https://cl9000.github.io/2020/04/06/Plyr%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>https://cl9000.github.io/2020/04/06/Plyr%E6%92%AD%E6%94%BE%E5%99%A8/</id>
    <published>2020-04-06T07:59:20.000Z</published>
    <updated>2021-04-06T09:25:43.222Z</updated>
    
    <content type="html"><![CDATA[<p>​</p><blockquote><p>Plyr 是一个简单的可定制的 HTML5 媒体播放器，使用原生 JavaScript 没有其他依赖。支持 YouTube 和 Vimeo 。</p></blockquote><h2><span id="特性">特性</span></h2><p>​</p><ul><li>📼 HTML视频和音频，YouTube和Vimeo -支持主要格式</li><li>💪 可访问-充分支持VTT字幕和屏幕阅读器</li><li>🔧 Customizable -用你想要的标记让播放器看起来像你想要的样子</li><li>😎 干净的HTML -使用正确的元素。<code>&lt;input type=&quot;range&quot;&gt;</code>表示音量，<code>&lt;progress&gt;</code>表示* 进度，<code>&lt;button&gt;</code>s表示按钮。没有<code>&lt;span&gt;</code>或<code>&lt;a href=&quot;#&quot;&gt;</code>按钮hacks</li><li>📱 响应-工作与任何屏幕大小</li><li>💵 货币化-从你的视频赚钱</li><li>📹 流媒体-支持hls.js, Shaka和dash.js流媒体播放</li><li>🎛 API -通过一个标准化的API切换播放、音量、搜索等</li><li>🎤 事件-没有杂乱无章的Vimeo和YouTube api，所有的事件是标准化的格式</li><li>🔎 全屏-支持本机全屏回退到“全窗口”模式</li><li>⌨️ 快捷键-支持键盘快捷键</li><li>🖥 Picture-in-Picture -支持Picture-in-Picture模式</li><li>📱 Playsinline -支持Playsinline属性</li><li>🏎 速度控制-在飞行中调整速度</li><li>📖 多个标题-支持多个标题轨道</li><li>🌎 i18n支持-支持控件的国际化</li><li>👌 预览缩略图-支持显示预览缩略图</li><li>🤟 没有框架-写在“香草”ES6 JavaScript，不需要jQuery</li><li>💁♀️ SASS -包括在您的构建过程中</li></ul><h2><span id="插件-amp-组件">插件 &amp; 组件</span></h2><p>一些了不起的人已经为cms制作了插件，为JavaScript框架制作了组件:</p><p>TypeMaintainerLink<br>WordPressBrandon Lavigne (@drrobotnik)<a href="https://wordpress.org/plugins/plyr/" target="_blank" rel="noopener">https://wordpress.org/plugins/plyr/</a><br>AngularSimon Bobrov (@smnbbrv)<a href="https://github.com/smnbbrv/ngx-plyr" target="_blank" rel="noopener">https://github.com/smnbbrv/ngx-plyr</a><br>ReactChintan Prajapati (@chintan9)<a href="https://github.com/chintan9/plyr-react" target="_blank" rel="noopener">https://github.com/chintan9/plyr-react</a><br>VueGabe Dunn (@redxtech)<a href="https://github.com/redxtech/vue-plyr" target="_blank" rel="noopener">https://github.com/redxtech/vue-plyr</a><br>NeosJon Uhlmann (@jonnitto)<a href="https://packagist.org/packages/jonnitto/plyr" target="_blank" rel="noopener">https://packagist.org/packages/jonnitto/plyr</a><br>KirbyDominik Pschenitschni (@dpschen)<a href="https://github.com/dpschen/kirby-plyrtag" target="_blank" rel="noopener">https://github.com/dpschen/kirby-plyrtag</a><br>REDAXOFriendsOfRedaxo/skerbis (@skerbis)<a href="https://github.com/FriendsOfREDAXO/plyr" target="_blank" rel="noopener">https://github.com/FriendsOfREDAXO/plyr</a><br>svelte-plyrBen Woodward / benwoodward (@benwoodward)<a href="https://github.com/benwoodward" target="_blank" rel="noopener">https://github.com/benwoodward</a></p><h2><span id="安装">安装</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm</span><br><span class="line">npm install plyr</span><br><span class="line">​</span><br><span class="line">Bower</span><br><span class="line">bower install plyr</span><br><span class="line">​</span><br><span class="line">Ember</span><br><span class="line">ember addon:install ember-cli-plyr</span><br></pre></td></tr></table></figure><h2><span id="快速开始">快速开始</span></h2><p>这是一个快速开始的示例。还有一个在 <a href="https://codepen.io/sampotts/pen/jARJYp" target="_blank" rel="noopener">Codepen https://codepen.io/sampotts/pen/jARJYp</a> 上的演示。</p><h3><span id="html">HTML</span></h3><p>Plyr 扩展了标准的 HTML5 标记，这就是你需要的那些类型。</p><h4><span id="html5-视频">HTML5 视频</span></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">poster</span>=<span class="string">"/path/to/poster.jpg"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"/path/to/video.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"/path/to/video.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Captions are optional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">track</span> <span class="attr">kind</span>=<span class="string">"captions"</span> <span class="attr">label</span>=<span class="string">"English captions"</span> <span class="attr">src</span>=<span class="string">"/path/to/captions.vtt"</span> <span class="attr">srclang</span>=<span class="string">"en"</span> <span class="attr">default</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="html5-音频">HTML5 音频</span></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"/path/to/audio.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"/path/to/audio.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于 YouTube 和 Vimeo ，Plyr 使用标准的 YouTube API 标记：</p><h4><span id="嵌入-youtube">嵌入 YouTube</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-type=<span class="string">"youtube"</span> data-video-id=<span class="string">"bTqVqk7FSmY"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="嵌入-vimeo">嵌入 Vimeo</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-type=<span class="string">"vimeo"</span> data-video-id=<span class="string">"143418951"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>注意：data-video-id 的值可以是视频的 ID 或 URL 。</p><h4><span id="javascript">JavaScript</span></h4><p>在  标记之前添加 plyr.js 脚本，然后调用 plyr.setup() 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"path/to/plyr.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;plyr.setup();&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4><span id="css">CSS</span></h4><p>在 <head><meta name="generator" content="Hexo 3.9.0"> 标签中引入 plyr.css 样式。<link rel="alternate" href="/feed.xml" title="Weichanglu" type="application/atom+xml"></head></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" href="path/to/plyr.css"&gt;</span><br></pre></td></tr></table></figure><h4><span id="svg-雪碧图">SVG 雪碧图</span></h4><p>SVG 雪碧图从我们的 CDN 自动加载。你也可以下载后放在自己的服务器中（<a href="https://cdn.plyr.io/2.0.13/plyr.svg%EF%BC%89" target="_blank" rel="noopener">https://cdn.plyr.io/2.0.13/plyr.svg）</a></p><h2><span id="高级">高级</span></h2><h4><span id="less-amp-sassscss">LESS &amp; SASS/SCSS</span></h4><p>你可以使用 /src 中包含的 plyr.less 或 plyr.scss 文件作为构建的一部分，并根据你的设计更改变量。</p><h4><span id="svg">SVG</span></h4><p>Plyr 控件中使用的图标被放到 SVG 雪碧图中。默认情况下，雪碧图自动从我们的 CDN 加载。如果你已经有了自己的图标，你可以载入进来（ /src/sprite ）。</p><p>####使用 iconUrl 选项<br>然而，你可以指定自己的 iconUrl 选项，并且 Plyr 将确定 url 是否是绝对的，由于当前的浏览器限制或需要由 AJAX/CORS 加载，只需直接使用路径即可。</p><h4><span id="跨域资源-cors">跨域资源 (CORS)</span></h4><p>示例中的 <code>&lt;video&gt;</code> 元素使用跨域属性。这是因为 TextTrack 标题是从另一个域加载的。如果你的 TextTrack 字幕也托管在另一个域上，则需要添加此属性，并确保您的主机具有正确的 <code>&lt;meta&gt;</code>设置。有关 CORS 可查看 MDN 文档：<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS</a></p><h4><span id="标题">标题</span></h4><p>支持 WebVTT 字幕。要添加字幕轨道，请检查 HTML 中是否有 <track> 元素。确保验证你的字幕文件。</p><h4><span id="javascript">JavaScript</span></h4><h5><span id="初始化">初始化</span></h5><p>默认情况下，setup() 将查找所有 <code>&lt;video&gt; ，&lt;audio&gt;</code> 和 <code>[data-type]</code> 元素。查找到的每个目标媒体元素都将被包裹在 <code>&lt;div&gt;</code> 中以添加样式和设置。你可以指定使用 <code>setup()</code>的各种参数，包括不同的节点列表 ，HTML 元素 ，HTML 元素数组或字符串选择器，如下所示：</p><p>传递一个节点列表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plyr.setup(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.js-player'</span>), options);</span><br></pre></td></tr></table></figure><p>传递一个 HTML 元素:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plyr.setup(<span class="built_in">document</span>.querySelector(<span class="string">'.js-player'</span>), options);</span><br></pre></td></tr></table></figure><p>传递一组 HTML 元素数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plyr.setup([</span><br><span class="line">true<span class="built_in">document</span>.querySelector(<span class="string">'.js-player-1'</span>),</span><br><span class="line">true<span class="built_in">document</span>.querySelector(<span class="string">'.js-player-2'</span>)</span><br><span class="line">], options);</span><br></pre></td></tr></table></figure><p>传递一个字符串选择器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plyr.setup(<span class="string">'.js-player'</span>, options);</span><br></pre></td></tr></table></figure><p>节点列表，HTML 元素或字符串选择器可以是目标 <code>&lt;video&gt; ，&lt;audio&gt; 或 [data-type]</code> （嵌入）元素本身或容器元素。</p><p>只传递选项对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plyr.setup(options);</span><br></pre></td></tr></table></figure><p>setup() 将返回一个可以与 API 方法一起使用的实例数组。</p><h4><span id="触摸范围">触摸范围</span></h4><p>一些移动浏览器（特别是 iOS 上的移动 Safari）似乎有与 <code>&lt;input type =&quot;range&quot;&gt;</code>元素有关的问题，触摸轨迹设置的值不起作用，滑动拇指可能会很棘手。为了解决这个问题，我创建了 RangeTouch ，我建议你将它用在你的解决方案中。这是一个很小的脚本，对于触摸设备上的用户来说，这是非常有益的。</p><h2><span id="api">API</span></h2><p>访问 plyr 实例的最简单方法是将调用的返回值存储到 setup() 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players = plyr.setup(<span class="string">'.js-player'</span>);</span><br></pre></td></tr></table></figure><p>这将返回所有被初始化的实例数组。另一种方法是使用 plyr.get() 获取给定容器中的所有实例，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players = plyr.get(<span class="string">'.js-player'</span>);</span><br></pre></td></tr></table></figure><p>如果没有参数被传递，它将在当前文档中查找所有实例。这将返回给定选择器中找到的所有实例的数组。</p><p>最后一个选项是通过事件处理程序访问实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">instance.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = event.detail.plyr;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Plyr 是一个简单的可定制的 HTML5 媒体播放器，使用原生 JavaScript 没有其他依赖。支持 YouTube 和 Vimeo 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;span id=&quot;特性&quot;&gt;特性&lt;/spa
      
    
    </summary>
    
    
    
      <category term="播放器" scheme="https://cl9000.github.io/tags/%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    
      <category term="HTML5播放器" scheme="https://cl9000.github.io/tags/HTML5%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    
      <category term="Plyr" scheme="https://cl9000.github.io/tags/Plyr/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的Async/Await</title>
    <link href="https://cl9000.github.io/2020/04/05/JavaScript%E4%B8%AD%E7%9A%84Async-Await/"/>
    <id>https://cl9000.github.io/2020/04/05/JavaScript%E4%B8%AD%E7%9A%84Async-Await/</id>
    <published>2020-04-05T10:10:44.000Z</published>
    <updated>2021-04-21T08:55:03.961Z</updated>
    
    <content type="html"><![CDATA[<p>达到完美境界并不是无以复加，而是无可去除。——&lt;安托万·德·圣·埃克苏佩里&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/async-await-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/async-await-in-javascript/</a></p></blockquote><p><code>Async</code> 函数和 <code>Await</code> 关键字是 <code>ECMAScript 2017</code> 发布的最新 <code>JavaScript</code> 插件，它引入了一种编写异步函数的新方法。在这篇文章中，我们将讨论为什么我们应该使用 <code>async/wait</code>，它的语法和实例的实际用法。</p><h2><span id="为什么-asyncawait">为什么 Async/Await?</span></h2><p>在早期，您可以使用回调来处理异步操作。然而，回调函数的功能有限，并且经常会导致难以管理的代码。如果你要处理多个异步调用，它会导致大量嵌套的回调代码，这也被称为回调地狱。</p><p>后来 <code>ES6</code> 中引入了<code>Promise</code>，以克服回调函数的问题并提高代码的可读性。最后，在 <code>ES2017</code> 中引入了 <code>Async/Await</code>，它只不过是<code>Promise</code> 的语法改进版本。它的底层是 <code>Promise</code>改进了语法，</p><ul><li>链式 <code>Promise</code> 和在链式 <code>Promise</code>之间传递值的更好方法</li><li>与<code>Promise</code>相比，代码更加简洁易读</li><li>调试是很容易的</li><li>更好的错误处理</li></ul><h2><span id="语法">语法</span></h2><h3><span id="async">async</span></h3><p>当 <code>async</code>关键字应用于函数之前时，它会转换为异步函数并始终返回 <code>Promise</code> 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//return Promise.resolve("Hello");</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hello());</span><br><span class="line">hello().then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>Promise {<resolved>: “Hello”}<br>Hello</resolved></p></blockquote><p>在上面的代码片段中，我们看到当我们执行 <code>async</code> 函数 <code>hello()</code> 时，它将字符串值包装在 <code>Promise</code>对象中，并返回一个解析后的 <code>Promise</code>。我们也可以显式返回已解析的 <code>Promise</code>对象，第2行和第3行是相同的。</p><p>然后我们进一步在已解析的 <code>promise</code> 对象上使用它来获取 <code>Hello</code>s字符串(第7行)</p><h3><span id="await">await</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// works only inside async functions</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="keyword">await</span> promise;</span><br></pre></td></tr></table></figure><p><code>await</code> 关键字只在 <code>async</code> 函数内部有效，它使函数的执行等待，直到返回的 <code>promise</code>稳定下来( <code>resolve</code> 或 <code>reject</code> )。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">"Hello"</span>), <span class="number">5000</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> value = <span class="keyword">await</span> promise; <span class="comment">// wait until the promise resolves</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello().then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><p>请注意，在上面的代码片段中，当我们执行异步函数 <code>hello()</code> 时，函数的执行在第6行等待5秒，然后返回已解析的 <code>promise</code>对象。<code>CPU</code>资源在此等待期间没有被利用，可以用于其他工作。</p><p>还要注意的是，如果你在非异步函数中使用 <code>await</code>关键字，它会像下面这样返回 <code>SyntaxError:</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve(<span class="string">"Hello"</span>);</span><br><span class="line">  <span class="keyword">let</span> value = <span class="keyword">await</span> promise; ⓧ Uncaught <span class="built_in">SyntaxError</span>: <span class="keyword">await</span> is only valid <span class="keyword">in</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">  <span class="title">return</span> <span class="title">value</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="用法">用法</span></h2><p>我们来看一个使用 <code>fetch API</code>从多个 <code>HTTP</code> 端点获取数据的实际例子。</p><h3><span id="1-创建三个promise对象">1. 创建三个promise对象</span></h3><p>我们已经创建了一个公共函数 <code>getData</code>，并使用它来创建三个参数化的 <code>Promise</code> 对象 <code>getUser</code>、<code>getPosts</code> 和 <code>getComments</code>，以从它们各自的 <code>HTTP</code> 端点获取数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//create a common getData function</span></span><br><span class="line"><span class="keyword">let</span> getData = <span class="function">(<span class="params">url</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject </span>)</span>&#123;</span><br><span class="line">  fetch(url)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.json();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create multiple promises from common getData function</span></span><br><span class="line"><span class="keyword">let</span> getUsers = getData(<span class="string">'https://jsonplaceholder.typicode.com/users'</span>);</span><br><span class="line"><span class="keyword">let</span> getPosts = <span class="function">(<span class="params">userId</span>) =&gt;</span> getData(<span class="string">`https://jsonplaceholder.typicode.com/posts?userId=<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">let</span> getComments = <span class="function">(<span class="params">postId</span>) =&gt;</span> getData(<span class="string">`https://jsonplaceholder.typicode.com/comments?postId=<span class="subst">$&#123;postId&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h3><span id="2-链式-promise">2. 链式 Promise</span></h3><p>我们的目标是获取第一个用户在第一篇文章上的所有评论。</p><p>我们首先从 <code>getUsers promise</code>中获取所有用户，并通过传递 <code>firstUser</code> 将其与<code>getPost promise</code> 链接起来。通过传递 <code>firstPost</code>，进一步将它与 <code>getComments</code> <code>promise</code> 链接起来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//promise chaining of multiple asynchronous calls</span></span><br><span class="line">getUsers.then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> firstUser = users[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> getPosts(firstUser.id);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> firstPost = posts[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> getComments(firstPost.id);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">comments</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(comments);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error));</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ (5) [{…}, {…}, {…}, {…}, {…}]<br>➤ 0: {postId: 1, id: 1, name: “id labore ex et quam laborum”, email: <a href="mailto:%22Eliseo@gardner.biz" target="_blank" rel="noopener">&quot;Eliseo@gardner.biz</a>&quot;, body: “laudantium enim quasi est quidem magnam voluptate …utem quasi↵reiciendis et nam sapiente accusantium”}<br>➤ 1: {postId: 1, id: 2, name: “quo vero reiciendis velit similique earum”, email: <a href="mailto:%22Jayne_Kuhic@sydney.com" target="_blank" rel="noopener">&quot;Jayne_Kuhic@sydney.com</a>&quot;, body: “est natus enim nihil est dolore omnis voluptatem n…iatur↵nihil sint nostrum voluptatem reiciendis et”}<br>➤ 2: {postId: 1, id: 3, name: “odio adipisci rerum aut animi”, email: <a href="mailto:%22Nikita@garfield.biz" target="_blank" rel="noopener">&quot;Nikita@garfield.biz</a>&quot;, body: “quia molestiae reprehenderit quasi aspernatur↵aut …mus et vero voluptates excepturi deleniti ratione”}<br>➤ 3: {postId: 1, id: 4, name: “alias odio sit”, email: <a href="mailto:%22Lew@alysha.tv" target="_blank" rel="noopener">&quot;Lew@alysha.tv</a>&quot;, body: “non et atque↵occaecati deserunt quas accusantium u…r itaque dolor↵et qui rerum deleniti ut occaecati”}<br>➤ 4: {postId: 1, id: 5, name: “vero eaque aliquid doloribus et culpa”, email: <a href="mailto:%22Hayden@althea.biz" target="_blank" rel="noopener">&quot;Hayden@althea.biz</a>&quot;, body: “harum non quasi et ratione↵tempore iure ex volupta…ugit inventore cupiditate↵voluptates magni quo et”}<br>length: 5<br>➤ <strong>proto</strong>: Array(0)</p></blockquote><h3><span id="3-asyncawait">3. async/await</span></h3><p>我们使用 <code>async/await</code> 实现获取评论同样的目标</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//async and await makes code cleaner and readable</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getCommentsOfFirstPostByFirstUser</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> users = <span class="keyword">await</span> getUsers;</span><br><span class="line">  <span class="keyword">let</span> firstUser = users[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> posts = <span class="keyword">await</span> getPosts(firstUser.id);</span><br><span class="line">  <span class="keyword">let</span> firstPost = posts[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> comments = <span class="keyword">await</span> getComments(firstPost.id);</span><br><span class="line">  <span class="keyword">return</span> comments;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getCommentsOfFirstPostByFirstUser().then(<span class="function"><span class="params">comments</span> =&gt;</span> <span class="built_in">console</span>.log(comments));</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ (5) [{…}, {…}, {…}, {…}, {…}]<br>➤ 0: {postId: 1, id: 1, name: “id labore ex et quam laborum”, email: <a href="mailto:%22Eliseo@gardner.biz" target="_blank" rel="noopener">&quot;Eliseo@gardner.biz</a>&quot;, body: “laudantium enim quasi est quidem magnam voluptate …utem quasi↵reiciendis et nam sapiente accusantium”}<br>➤ 1: {postId: 1, id: 2, name: “quo vero reiciendis velit similique earum”, email: <a href="mailto:%22Jayne_Kuhic@sydney.com" target="_blank" rel="noopener">&quot;Jayne_Kuhic@sydney.com</a>&quot;, body: “est natus enim nihil est dolore omnis voluptatem n…iatur↵nihil sint nostrum voluptatem reiciendis et”}<br>➤ 2: {postId: 1, id: 3, name: “odio adipisci rerum aut animi”, email: <a href="mailto:%22Nikita@garfield.biz" target="_blank" rel="noopener">&quot;Nikita@garfield.biz</a>&quot;, body: “quia molestiae reprehenderit quasi aspernatur↵aut …mus et vero voluptates excepturi deleniti ratione”}<br>➤ 3: {postId: 1, id: 4, name: “alias odio sit”, email: <a href="mailto:%22Lew@alysha.tv" target="_blank" rel="noopener">&quot;Lew@alysha.tv</a>&quot;, body: “non et atque↵occaecati deserunt quas accusantium u…r itaque dolor↵et qui rerum deleniti ut occaecati”}<br>➤ 4: {postId: 1, id: 5, name: “vero eaque aliquid doloribus et culpa”, email: <a href="mailto:%22Hayden@althea.biz" target="_blank" rel="noopener">&quot;Hayden@althea.biz</a>&quot;, body: “harum non quasi et ratione↵tempore iure ex volupta…ugit inventore cupiditate↵voluptates magni quo et”}<br>length: 5<br>➤ <strong>proto</strong>: Array(0)</p></blockquote><h2><span id="总结">总结</span></h2><p>我们看到 <code>async/await</code> 比 <code>promise</code> 更容易使用。</p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/async-await-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/async-await-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;达到完美境界并不是无以复加，而是无可去除。——&amp;lt;安托万·德·圣·埃克苏佩里&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.c
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的Promises</title>
    <link href="https://cl9000.github.io/2020/04/04/JavaScript%E4%B8%ADPromises/"/>
    <id>https://cl9000.github.io/2020/04/04/JavaScript%E4%B8%ADPromises/</id>
    <published>2020-04-04T06:46:23.000Z</published>
    <updated>2021-04-21T09:01:10.563Z</updated>
    
    <content type="html"><![CDATA[<p>那些疯狂到认为自己能够改变世界的人，才能真正改变世界。——&lt;史蒂夫·乔布斯&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/promises-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/promises-in-javascript/</a></p></blockquote><p><code>Promises</code> 是在 <code>ES6</code> 中原生引入的。它们与我们的 <code>Promises</code> 非常相似。当我们遵守或违背 <code>Promises</code> 时，<code>JavaScript</code>的 <code>Promises</code> 也会是 <code>resolve</code> 或 <code>reject</code>。在这篇文章中，我们将讨论为什么我们应该使用<code>promise</code>, <code>promise</code>语法，<code>promise</code>状态和它的实际用法，以及使用 <code>fetch API</code>的例子。</p><h2><span id="为什么是-promises">为什么是 Promises?</span></h2><p>在早期，可以使用回调来处理异步操作。然而，回调函数的功能有限，并且经常会导致难以管理的代码。如果你要处理多个异步调用，它会导致大量嵌套的回调代码，这也被称为回调地狱。</p><p>引入 <code>Promises</code> 是为了提高代码的可读性和更好地处理异步调用和错误。</p><h2><span id="promises-的语法">Promises 的语法</span></h2><p>我们看看简单promise对象的语法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// asynchronous call</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Promise</code> 接受一个回调函数作为参数，该回调函数接受两个参数——第一个是 <code>resolve</code> 函数，第二个是 <code>reject</code> 函数。 <code>Promise</code> 可以用一个值来 <code>fulfilled</code> (实现)，也可以用一个理由(错误)来 <code>rejected</code>（拒绝）。</p><h2><span id="promise-状态">Promise 状态</span></h2><p><code>Promise</code> 对象有以下三种状态:</p><ul><li><strong>pending:</strong> 初始状态。</li><li><strong>completed:</strong> 表示成功状态。调用 <code>resolve()</code> 方法。</li><li><strong>reject:</strong> 表示失败状态，调用 <code>reject()</code> 。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/promise-states.svg" alt></p><h2><span id="使用">使用</span></h2><p>我们通常使用 异步调用，使用 <code>fetch API</code> 从 <code>HTTP</code> 端点获取数据。我们看看这个例子，在这种情况下 <code>Promise</code> 是如何使用的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//create a promise object</span></span><br><span class="line"><span class="keyword">let</span> getUsers = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject </span>)</span>&#123;</span><br><span class="line">    fetch(<span class="string">'https://jsonplaceholder.typicode.com/users'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.json();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//call promise object</span></span><br><span class="line">getUsers</span><br><span class="line">.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="promise-链式调用">Promise 链式调用</span></h2><p>当必须使用一个异步调用的输出作为另一个异步调用的输入时，<code>Promise</code> 链式调用就会发挥作用。在这种情况下，您可以链接多个 <code>Promise</code>。</p><p>让我们看看下面的例子，我们首先使用 <code>getUser</code> 异步调用获取用户列表，然后通过传递 <code>userId</code>将它与 <code>getPosts</code> 链接起来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//create a common getData function</span></span><br><span class="line"><span class="keyword">let</span> getData = <span class="function">(<span class="params">url</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject </span>)</span>&#123;</span><br><span class="line">  fetch(url)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.json();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getUsers = getData(<span class="string">'https://jsonplaceholder.typicode.com/users'</span>);</span><br><span class="line"><span class="keyword">let</span> getPosts = <span class="function">(<span class="params">userId</span>) =&gt;</span> getData(<span class="string">`https://jsonplaceholder.typicode.com/posts?userId=<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//chained promises to fetch all posts by first user (userId = 1)</span></span><br><span class="line">getUsers.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = data[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> getPosts(user.id);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ (10) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]<br>➤ 0: {userId: 1, id: 1, title: “sunt aut facere repellat provident occaecati excepturi optio reprehenderit”, body: “quia et suscipit↵suscipit recusandae consequuntur …strum rerum est autem sunt rem eveniet architecto”}<br>➤ 1: {userId: 1, id: 2, title: “qui est esse”, body: “est rerum tempore vitae↵sequi sint nihil reprehend…aperiam non debitis possimus qui neque nisi nulla”}<br>➤ 2: {userId: 1, id: 3, title: “ea molestias quasi exercitationem repellat qui ipsa sit aut”, body: “et iusto sed quo iure↵voluptatem occaecati omnis e…↵molestiae porro eius odio et labore et velit aut”}<br>➤ 3: {userId: 1, id: 4, title: “eum et est occaecati”, body: “ullam et saepe reiciendis voluptatem adipisci↵sit … ipsam iure↵quis sunt voluptatem rerum illo velit”}<br>➤ 4: {userId: 1, id: 5, title: “nesciunt quas odio”, body: “repudiandae veniam quaerat sunt sed↵alias aut fugi…sse voluptatibus quis↵est aut tenetur dolor neque”}<br>➤ 5: {userId: 1, id: 6, title: “dolorem eum magni eos aperiam quia”, body: “ut aspernatur corporis harum nihil quis provident …s↵voluptate dolores velit et doloremque molestiae”}<br>➤ 6: {userId: 1, id: 7, title: “magnam facilis autem”, body: “dolore placeat quibusdam ea quo vitae↵magni quis e…t excepturi ut quia↵sunt ut sequi eos ea sed quas”}<br>➤ 7: {userId: 1, id: 8, title: “dolorem dolore est ipsam”, body: “dignissimos aperiam dolorem qui eum↵facilis quibus…↵ipsam ut commodi dolor voluptatum modi aut vitae”}<br>➤ 8: {userId: 1, id: 9, title: “nesciunt iure omnis dolorem tempora et accusantium”, body: “consectetur animi nesciunt iure dolore↵enim quia a…st aut quod aut provident voluptas autem voluptas”}<br>➤ 9: {userId: 1, id: 10, title: “optio molestias id quia eum”, body: “quo et expedita modi cum officia vel magni↵dolorib…it↵quos veniam quod sed accusamus veritatis error”}<br>length: 10<br>➤ <strong>proto</strong>: Array(0)</p></blockquote><h2><span id="promiseall">Promise.all()</span></h2><p><code>Promise.all()</code> 在你想要执行多个异步调用并等待所有调用完成并获得集合输出时非常有用。</p><p><code>Promise.all()</code> 接受一个 <code>Promise</code> 数组，并以相同的 <code>Promise</code> 序列返回一个结果数组。如果任何一个异步调用失败，它将抛出异常。</p><p>我们看下面的例子，在这个例子中，我们同时获取了三个异步调用 <code>getUsers</code> 、 <code>getPosts</code> 和 <code>getComments</code> 的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//create a common getData function</span></span><br><span class="line"><span class="keyword">let</span> getData = <span class="function">(<span class="params">url</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject </span>)</span>&#123;</span><br><span class="line">  fetch(url)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.json();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create multiple promises from common getData function</span></span><br><span class="line"><span class="keyword">let</span> getUsers = getData(<span class="string">'https://jsonplaceholder.typicode.com/users'</span>);</span><br><span class="line"><span class="keyword">let</span> getPosts = getData(<span class="string">'https://jsonplaceholder.typicode.com/posts'</span>);</span><br><span class="line"><span class="keyword">let</span> getComments = getData(<span class="string">'https://jsonplaceholder.typicode.com/comments'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fetch data to get users, posts and comments collectively</span></span><br><span class="line"><span class="built_in">Promise</span>.all([getUsers, getPosts, getComments]).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ (3) [Array(10), Array(100), Array(500)]<br>➤ 0: (10) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]<br>➤ 1: (100) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]<br>➤ 2: (500) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]<br>length: 3<br>➤ <strong>proto</strong>: Array(0)</p></blockquote><h2><span id="promiseallsettled">Promise.allSettled()</span></h2><p><code>Promise.allsettle()</code> 类似于 <code>Promise.all()</code> 来执行多个异步调用。这两者唯一的区别，</p><ul><li><code>Promise.all()</code> 要么是<code>all resolve</code>，要么是 <code>any reject</code> ，这意味着如果任何异步调用失败，它将返回一个错误。</li><li><code>Promise.allsettle()</code> 都是已解决的，意味着如果任何异步调用失败，它不会返回错误。它给出所有成功和失败的异步调用的集合输出。<br>我们看看下面的例子，其中 <code>getPostsFails</code> 异步调用返回 <code>404</code> 错误，因为 <code>url</code> 端点不存在，但您仍然能够获取数据的 <code>getUsers</code> 和 <code>getComments</code> 异步调用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//create a common getData function</span></span><br><span class="line"><span class="keyword">let</span> getData = <span class="function">(<span class="params">url</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject </span>)</span>&#123;</span><br><span class="line">  fetch(url)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(response.ok)&#123;</span><br><span class="line">          <span class="keyword">return</span> response.json();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="string">`Error <span class="subst">$&#123;response.status&#125;</span>`</span>;</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create multiple promises from common getData function</span></span><br><span class="line"><span class="keyword">let</span> getUsers = getData(<span class="string">'https://jsonplaceholder.typicode.com/users'</span>);</span><br><span class="line"><span class="keyword">let</span> getPostsFails = getData(<span class="string">'https://jsonplaceholder.typicode.com/postsfailes'</span>);</span><br><span class="line"><span class="keyword">let</span> getComments = getData(<span class="string">'https://jsonplaceholder.typicode.com/comments'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fetch data to get users, posts and comments collectively regardless of any error</span></span><br><span class="line"><span class="built_in">Promise</span>.allSettled([getUsers, getPostsFails, getComments]).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ (3) [{…}, {…}, {…}]<br>➤ 0: {status: “fulfilled”, value: Array(10)}<br><span style="background-color: #fd5;color:black;">➤ 1: {status: “rejected”, reason: “Error 404”}</span><br>➤ 2: {status: “fulfilled”, value: Array(500)}<br>length: 3<br>➤ <strong>proto</strong>: Array(0)</p></blockquote><h2><span id="promiserace">Promise.race()</span></h2><p><code>Promise.race()</code> 在你想从多个异步调用中获取任何一个异步调用的数据时非常有用。</p><p>看下面的例子，我们感兴趣的是来自 <code>getTodos</code>、 <code>getUsers</code> 和 <code>getComments</code> 的任何数据，哪个先解析。在我们的例子中，首先解析 <code>getUsers</code> 并返回用户列表。</p><p>请注意，如果您反复执行相同的代码片段，结果可能会根据网络连接和首先解析的是哪一个而不同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//create a common getData function</span></span><br><span class="line"><span class="keyword">let</span> getData = <span class="function">(<span class="params">url</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject </span>)</span>&#123;</span><br><span class="line">  fetch(url)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.json();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create multiple promises from common getData function</span></span><br><span class="line"><span class="keyword">let</span> getTodos = getData(<span class="string">'https://jsonplaceholder.typicode.com/todos'</span>);</span><br><span class="line"><span class="keyword">let</span> getUsers = getData(<span class="string">'https://jsonplaceholder.typicode.com/users'</span>);</span><br><span class="line"><span class="keyword">let</span> getComments = getData(<span class="string">'https://jsonplaceholder.typicode.com/comments'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//fetch either todos or users or comments whichever resolves first</span></span><br><span class="line"><span class="built_in">Promise</span>.race([getTodos, getUsers, getComments]).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ (10) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]<br>➤ 0: {id: 1, name: “Leanne Graham”, username: “Bret”, email: <a href="mailto:%22Sincere@april.biz" target="_blank" rel="noopener">&quot;Sincere@april.biz</a>&quot;, address: {…}, …}<br>➤ 1: {id: 2, name: “Ervin Howell”, username: “Antonette”, email: <a href="mailto:%22Shanna@melissa.tv" target="_blank" rel="noopener">&quot;Shanna@melissa.tv</a>&quot;, address: {…}, …}<br>➤ 2: {id: 3, name: “Clementine Bauch”, username: “Samantha”, email: <a href="mailto:%22Nathan@yesenia.net" target="_blank" rel="noopener">&quot;Nathan@yesenia.net</a>&quot;, address: {…}, …}<br>➤ 3: {id: 4, name: “Patricia Lebsack”, username: “Karianne”, email: <a href="mailto:%22Julianne.OConner@kory.org" target="_blank" rel="noopener">&quot;Julianne.OConner@kory.org</a>&quot;, address: {…}, …}<br>➤ 4: {id: 5, name: “Chelsey Dietrich”, username: “Kamren”, email: <a href="mailto:%22Lucio_Hettinger@annie.ca" target="_blank" rel="noopener">&quot;Lucio_Hettinger@annie.ca</a>&quot;, address: {…}, …}<br>➤ 5: {id: 6, name: “Mrs. Dennis Schulist”, username: “Leopoldo_Corkery”, email: <a href="mailto:%22Karley_Dach@jasper.info" target="_blank" rel="noopener">&quot;Karley_Dach@jasper.info</a>&quot;, address: {…}, …}<br>➤ 6: {id: 7, name: “Kurtis Weissnat”, username: “Elwyn.Skiles”, email: <a href="mailto:%22Telly.Hoeger@billy.biz" target="_blank" rel="noopener">&quot;Telly.Hoeger@billy.biz</a>&quot;, address: {…}, …}<br>➤ 7: {id: 8, name: “Nicholas Runolfsdottir V”, username: “Maxime_Nienow”, email: <a href="mailto:%22Sherwood@rosamond.me" target="_blank" rel="noopener">&quot;Sherwood@rosamond.me</a>&quot;, address: {…}, …}<br>➤ 8: {id: 9, name: “Glenna Reichert”, username: “Delphine”, email: <a href="mailto:%22Chaim_McDermott@dana.io" target="_blank" rel="noopener">&quot;Chaim_McDermott@dana.io</a>&quot;, address: {…}, …}<br>➤ 9: {id: 10, name: “Clementina DuBuque”, username: “Moriah.Stanton”, email: <a href="mailto:%22Rey.Padberg@karina.biz" target="_blank" rel="noopener">&quot;Rey.Padberg@karina.biz</a>&quot;, address: {…}, …}<br>length: 10<br>➤ <strong>proto</strong>: Array(0)</p></blockquote><h2><span id="总结-summary">总结 Summary</span></h2><p>最好使用Promises而不是回调函数，因为Promises在以下方面可以提供很多帮助：</p><ul><li>解决成功的Anyc调用响应 使用 <code>Promise.resolve(response)</code></li><li>拒绝基于状态或数据的异步调用响应 使用 <code>Promise.reject(response)</code></li><li>更好的错误处理 使用 <code>Promise.catch(onRejection)</code></li><li>多个异步调用的链 使用<code>Promise.then(onFulfillment, onRejection)</code></li><li>获取多个异步调用的集合结果 使用<code>Promise.all([promise1, promise2, ...])</code></li><li>获取多个异步调用的集合结果，而不考虑任何错误 使用 <code>Promise.allSettled([promise1, promise2, ...])</code></li><li>从多个异步调用中，得到最先解析的结果 使用<code>Promise.race([promise1, promise2, ...])</code></li></ul><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/promises-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/promises-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;那些疯狂到认为自己能够改变世界的人，才能真正改变世界。——&amp;lt;史蒂夫·乔布斯&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.c
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Bespoke.js–基于浏览器的演示文稿微框架</title>
    <link href="https://cl9000.github.io/2020/04/02/JavaScript-Bespoke-js%E2%80%93%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF%E5%BE%AE%E6%A1%86%E6%9E%B6/"/>
    <id>https://cl9000.github.io/2020/04/02/JavaScript-Bespoke-js%E2%80%93%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF%E5%BE%AE%E6%A1%86%E6%9E%B6/</id>
    <published>2020-04-02T09:30:33.000Z</published>
    <updated>2021-04-22T02:20:20.470Z</updated>
    
    <content type="html"><![CDATA[<p><strong>好好工作，搞好身体，互相帮助</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Bespoke001.png" alt></p><p><a href="http://markdalgleish.com/projects/bespoke.js/" target="_blank" rel="noopener">Bespoke.js - http://markdalgleish.com/projects/bespoke.js/</a></p><p>Bespoke.js 非常小（压缩后只有1KB），它的核心库提供简单的 API 和 事件管理，其他功能都使用插件（它有自己的插件生态链）来实现。</p><p>官方提供的套件：</p><ul><li><a href="https://github.com/bespokejs/generator-bespoke" target="_blank" rel="noopener">Bespoke.js 生成器 - https://github.com/bespokejs/generator-bespoke</a></li><li><a href="https://github.com/bespokejs/generator-bespokeplugin" target="_blank" rel="noopener">Bespoke.js 插件生成器 - https://github.com/bespokejs/generator-bespokeplugin</a></li><li><a href="https://github.com/bespokejs/generator-bespoketheme" target="_blank" rel="noopener">Bespoke.js 主题生成器 - https://github.com/bespokejs/generator-bespoketheme</a></li></ul><h2><span id="创建演示文稿">创建演示文稿</span></h2><p>由于 Bespoke.js 的高度模块化特性，最快捷的方法是使用 Bespoke.js 生成器，它支持 Gulp 构建系统的样板演示。</p><p>假设您已经安装了 Node.js，新建空白目录：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g generator-bespoke</span><br><span class="line">$ yo bespoke</span><br></pre></td></tr></table></figure><p>在你的新项目中，你可以使用以下 Gulp 任务</p><p>$ gulp serve 运行带有 LiveReload 的预览服务器<br>$ gulp deploy 部署到 GitHub 页面<br>$ gulp 将静态资源编译到 “public” 目录</p><h2><span id="基本用法">基本用法</span></h2><h3><span id="定制加载">定制加载</span></h3><p>Bespoke.js 以 UMD 格式发送，这意味着 bespoke 及其插件可用作 CommonJS / AMD 模块。</p><h3><span id="html">HTML</span></h3><p>你可以使用任意你喜欢的标签，但下面的会更好~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;article id=<span class="string">"presentation"</span>&gt;</span><br><span class="line">  &lt;section&gt;Slide <span class="number">1</span>&lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">  &lt;section&gt;Slide 2&lt;/</span>section&gt;</span><br><span class="line">  &lt;section&gt;Slide <span class="number">3</span>&lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>article&gt;</span><br></pre></td></tr></table></figure><h3><span id="javascript">JavaScript</span></h3><p>要创建新的演示文稿，Bespoke.js 提供了 from(selector[, plugins]) 方法，该方法采用了一个选择器或元素引用和一个插件并返回实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deck = bespoke.from(<span class="string">'#presentation'</span>, [plugins]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next slide</span></span><br><span class="line">deck.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Previous slide</span></span><br><span class="line">deck.prev();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go to a specific slide</span></span><br><span class="line">deck.slide(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the active slide index</span></span><br><span class="line">deck.slide(); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>默认情况下，解析的父元素的所有非脚本子元素都将成为幻灯片。</p><h2><span id="插件">插件</span></h2><p>所有官方插件可以从 <code>npm 或 Bower</code> 安装，例如 <code>$ npm install bespoke-keys</code> 或 <code>$ bower install bespoke-touch</code><br>目前官方提供的插件有：键盘和遥控器交互，触摸交互，动画项目符号列表，响应式幻灯片缩放尺寸，背景为动画背景元素，进度条进度，循环演示，录制和播放 vcr 等。更多内容请查阅官方资料。</p><h2><span id="主题演示">主题演示</span></h2><p>使用键盘 “左” “右” 键切换幻灯片。</p><ul><li><a href="https://bespokejs.github.io/bespoke-theme-cube/" target="_blank" rel="noopener">Cube - https://bespokejs.github.io/bespoke-theme-cube/</a></li><li><a href="https://bespokejs.github.io/bespoke-theme-voltaire/" target="_blank" rel="noopener">Voltaire - https://bespokejs.github.io/bespoke-theme-voltaire/</a></li><li><a href="https://bespokejs.github.io/bespoke-theme-nebula/" target="_blank" rel="noopener">Nebula - https://bespokejs.github.io/bespoke-theme-nebula/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;好好工作，搞好身体，互相帮助&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Bespoke001.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href
      
    
    </summary>
    
    
    
      <category term="Bespoke.js" scheme="https://cl9000.github.io/tags/Bespoke-js/"/>
    
      <category term="Bespokejs" scheme="https://cl9000.github.io/tags/Bespokejs/"/>
    
      <category term="演示文稿微框架" scheme="https://cl9000.github.io/tags/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF%E5%BE%AE%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Driver.js–页面分步引导</title>
    <link href="https://cl9000.github.io/2020/04/01/JavaScript-Driver-js%E2%80%93%E9%A1%B5%E9%9D%A2%E5%88%86%E6%AD%A5%E5%BC%95%E5%AF%BC/"/>
    <id>https://cl9000.github.io/2020/04/01/JavaScript-Driver-js%E2%80%93%E9%A1%B5%E9%9D%A2%E5%88%86%E6%AD%A5%E5%BC%95%E5%AF%BC/</id>
    <published>2020-04-01T07:49:13.000Z</published>
    <updated>2021-04-22T02:19:36.584Z</updated>
    
    <content type="html"><![CDATA[<p><strong>好好工作，搞好身体，互相帮助 —</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/driverjs001.png" alt></p><p>一个轻量级(约4kb gzip)但强大的JavaScript引擎，帮助您驱动用户的注意力在页面上。</p><p>一些示例用例可以创建强大的特性介绍、动作调用组件、焦点转移器等。</p><p>通过 Driver.js ，你可以突出显示页面上的项目，以吸引用户的注意力。你也可以在网站改版后，使用它来引导用户展示新功能。</p><h4><span id="特色功能"><strong>特色功能：</strong></span></h4><ul><li>突出显示页面上的任何任何项目</li><li>锁定用户交互</li><li>创建功能介绍</li><li>为用户添加聚焦器</li><li>高度可定制 – 可在任何地方使用，可覆盖</li><li>界面友好 – 可通过按键控制</li><li>轻量级 – gzip 压缩后只有约4kb</li><li>在所有主流浏览器中保持一致的行为</li><li>免费用于个人和商业用途</li></ul><h3><span id="安装"><strong>安装</strong></span></h3><p>无论你喜欢哪种方式，你都可以使用 yarn 或 npm 进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add driver.js</span><br><span class="line">npm install driver.js</span><br></pre></td></tr></table></figure><p>或者直接在文件中引入它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/dist/driver.min.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"/dist/driver.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="用法"><strong>用法</strong></span></h3><h4><span id="highlighting-a-single-element-without-popover-突出显示单个元素"><strong>Highlighting a Single Element – Without Popover 突出显示单个元素</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a></p><p>你只需传递选择器即可突出显示单个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver();</span><br><span class="line">driver.highlight(<span class="string">'#create-post'</span>);</span><br></pre></td></tr></table></figure><p>一个实际的例子是：使用它来调暗背景并突出显示所需的元素，例如 Facebook 创建帖子的方式。</p><p>这方面的实际用例可能是当用户与元素交互时突出显示元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> focusDriver = <span class="keyword">new</span> Driver();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Highlight the section on focus</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'creation-input'</span>)</span><br><span class="line">  .addEventListener(<span class="string">'focus'</span>, (e) =&gt; &#123;</span><br><span class="line">    focusDriver.focus(<span class="string">'#creation-input'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>聚焦任何输入，看看它是如何将高亮显示从一个元素移动到另一个元素的<br>你也可以关闭动画或者在角落设置padding。稍后会详细介绍。</p><h4><span id="highlighting-a-single-element-with-popover-突出显示单个元素-弹出窗口"><strong>Highlighting a Single Element – With Popover 突出显示单个元素-弹出窗口</strong></span></h4><p>如果想在突出显示的元素旁边显示一些细节，可以通过指定标题和描述轻松实现<br>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver();</span><br><span class="line">driver.highlight(&#123;</span><br><span class="line">  element: <span class="string">'#some-element'</span>,</span><br><span class="line">  popover: &#123;</span><br><span class="line">    title: <span class="string">'Title for the Popover'</span>,</span><br><span class="line">    description: <span class="string">'Description for it'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你也可以通过一组特定的选项来修改这个弹出窗口的行为。下面有更多的介绍。<br>此外，title 和 description 也可以使用 HTML。</p><h4><span id="popover-positioning-弹出窗口定位"><strong>Popover Positioning 弹出窗口定位</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a></p><p>你也可以改变弹出窗口的位置为<code>left, left-center, left-bottom, top, top-center, top-right, right, right-center, right-bottom或者bottom, bottom-center, bottom-right, mid-center</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver();</span><br><span class="line">driver.highlight(&#123;</span><br><span class="line">  element: <span class="string">'#some-element'</span>,</span><br><span class="line">  popover: &#123;</span><br><span class="line">    title: <span class="string">'Title for the Popover'</span>,</span><br><span class="line">    description: <span class="string">'Description for it'</span>,</span><br><span class="line">    <span class="comment">// position can be left, left-center, left-bottom, top,</span></span><br><span class="line">    <span class="comment">// top-center, top-right, right, right-center, right-bottom,</span></span><br><span class="line">    <span class="comment">// bottom, bottom-center, bottom-right, mid-center</span></span><br><span class="line">    position: <span class="string">'left'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你不指定位置或指定它为自动，它会自动为弹出窗口找到合适的位置并显示它</p><h4><span id="html弹窗-html-in-popovers"><strong>HTML弹窗 HTML in Popovers</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a><br>你也可以在主体中指定HTML或者弹出窗口的标题。下面是一个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver();</span><br><span class="line">driver.highlight(&#123;</span><br><span class="line">  element: <span class="string">'#some-element'</span>,</span><br><span class="line">  popover: &#123;</span><br><span class="line">    title: <span class="string">'&lt;em&gt;An italicized title&lt;/em&gt;'</span>,</span><br><span class="line">    description: <span class="string">'Description may also contain &lt;strong&gt;HTML&lt;/strong&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，它可以是任何有效的HTML。</p><h4><span id="禁用关闭外部单击-disable-close-on-outside-click"><strong>禁用关闭外部单击 Disable Close on Outside Click</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a></p><p>默认情况下，driver.js会被重置，如果用户点击突出显示的元素，你可以禁用这个:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver(&#123;</span><br><span class="line">    allowClose: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">driver.highlight(&#123;</span><br><span class="line">  element: <span class="string">'#some-element'</span>,</span><br><span class="line">  popover: &#123;</span><br><span class="line">    title: <span class="string">'&lt;em&gt;An italicized title&lt;/em&gt;'</span>,</span><br><span class="line">    description: <span class="string">'Description may also contain &lt;strong&gt;HTML&lt;/strong&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你使用这个选项，对于多步骤驱动程序，它会在你完成弹出窗口后关闭，或者你可以通过编程关闭它。对于单个元素弹窗，你需要正确地关闭它，否则它不会被关闭</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.reset()</span><br></pre></td></tr></table></figure><h4><span id="creating-feature-introductions-创建功能介绍"><strong>Creating Feature Introductions 创建功能介绍</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a><br>您还可以进行功能强大的特性介绍，以指导用户了解这些特性。只需提供一个步骤数组，其中每个步骤指定要突出显示的元素。</p><p>下面是一个简单的例子，告诉你如何结合介绍中的步骤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver();</span><br><span class="line"><span class="comment">// Define the steps for introduction</span></span><br><span class="line">driver.defineSteps([</span><br><span class="line">  &#123;</span><br><span class="line">    element: <span class="string">'#first-element-introduction'</span>,</span><br><span class="line">    popover: &#123;</span><br><span class="line">      className: <span class="string">'first-step-popover-class'</span>,</span><br><span class="line">      title: <span class="string">'Title on Popover'</span>,</span><br><span class="line">      description: <span class="string">'Body of the popover'</span>,</span><br><span class="line">      position: <span class="string">'left'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    element: <span class="string">'#second-element-introduction'</span>,</span><br><span class="line">    popover: &#123;</span><br><span class="line">      title: <span class="string">'Title on Popover'</span>,</span><br><span class="line">      description: <span class="string">'Body of the popover'</span>,</span><br><span class="line">      position: <span class="string">'top'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    element: <span class="string">'#third-element-introduction'</span>,</span><br><span class="line">    popover: &#123;</span><br><span class="line">      title: <span class="string">'Title on Popover'</span>,</span><br><span class="line">      description: <span class="string">'Body of the popover'</span>,</span><br><span class="line">      position: <span class="string">'right'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Start the introduction</span></span><br><span class="line">driver.start();</span><br></pre></td></tr></table></figure><p>这只是特性介绍的一个快速示例。想要更丰富的体验，请浏览<a href>&quot;Quick Tour&quot;</a></p><p>你也可以关闭弹出窗口中的页脚按钮，在这种情况下，用户可以使用键盘上的箭头键来控制弹出窗口。或者您可以使用驱动程序提供的方法来控制它。</p><h4><span id="without-overlay-没有覆盖叠加"><strong>Without Overlay 没有覆盖叠加</strong></span></h4><p>__ <a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">Show Demo</a><br>你也可以创建特性介绍和做上面列出的所有事情而不需要叠加。你所要做的就是将不透明度设置为0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver(&#123;</span><br><span class="line">    opacity: <span class="number">0</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">driver.highlight(&#123;</span><br><span class="line">  element: <span class="string">'#run-element-without-popover'</span>,</span><br><span class="line">  popover: &#123;</span><br><span class="line">    title: <span class="string">'Title for the Popover'</span>,</span><br><span class="line">    description: <span class="string">'Description for it'</span>,</span><br><span class="line">    position: <span class="string">'top'</span>, <span class="comment">// can be `top`, `left`, `right`, `bottom`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你也可以对功能介绍做同样的事情</p><h4><span id="更多"><strong>更多</strong></span></h4><p>Driver Definition</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> Driver(&#123;</span><br><span class="line">  className: <span class="string">'scoped-class'</span>, <span class="comment">// className to wrap driver.js popover</span></span><br><span class="line">  animate: <span class="literal">true</span>,  <span class="comment">// Animate while changing highlighted element</span></span><br><span class="line">  opacity: <span class="number">0.75</span>,  <span class="comment">// Background opacity (0 means only popovers and without overlay)</span></span><br><span class="line">  padding: <span class="number">10</span>,    <span class="comment">// Distance of element from around the edges</span></span><br><span class="line">  allowClose: <span class="literal">true</span>, <span class="comment">// Whether clicking on overlay should close or not</span></span><br><span class="line">  overlayClickNext: <span class="literal">false</span>, <span class="comment">// Should it move to next step on overlay click</span></span><br><span class="line">  doneBtnText: <span class="string">'Done'</span>, <span class="comment">// Text on the final button</span></span><br><span class="line">  closeBtnText: <span class="string">'Close'</span>, <span class="comment">// Text on the close button for this step</span></span><br><span class="line">  nextBtnText: <span class="string">'Next'</span>, <span class="comment">// Next button text for this step</span></span><br><span class="line">  prevBtnText: <span class="string">'Previous'</span>, <span class="comment">// Previous button text for this step</span></span><br><span class="line">  showButtons: <span class="literal">false</span>, <span class="comment">// Do not show control buttons in footer</span></span><br><span class="line">  keyboardControl: <span class="literal">true</span>, <span class="comment">// Allow controlling through keyboard (escape to close, arrow keys to move)</span></span><br><span class="line">  scrollIntoViewOptions: &#123;&#125;, <span class="comment">// We use `scrollIntoView()` when possible, pass here the options for it if you want any</span></span><br><span class="line">  onHighlightStarted: (Element) &#123;&#125;, <span class="comment">// Called when element is about to be highlighted</span></span><br><span class="line">  onHighlighted: (Element) &#123;&#125;, <span class="comment">// Called when element is fully highlighted</span></span><br><span class="line">  onDeselected: (Element) &#123;&#125;, <span class="comment">// Called when element has been deselected</span></span><br><span class="line">  onReset: (Element) &#123;&#125;,        <span class="comment">// Called when overlay is about to be cleared</span></span><br><span class="line">  onNext: <span class="function">(<span class="params">Element</span>) =&gt;</span> &#123;&#125;,      <span class="comment">// Called when moving to next step on any step</span></span><br><span class="line">  onPrevious: <span class="function">(<span class="params">Element</span>) =&gt;</span> &#123;&#125;,  <span class="comment">// Called when moving to next step on any step</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请注意，您在驱动程序定义中提供的所有按钮选项都可以通过在步骤定义中提供它们来为特定的步骤覆盖</p><p>步骤定义<br>这里有一组选项，你可以在每个步骤中传递，即步骤数组中的一个项目或你传递给highlight方法的对象</p><pre><code class="language-js">const stepDefinition = {  element: '#some-item',        // Query selector string or Node to be highlighted  popover: {                    // There will be no popover if empty or not given    className: 'popover-class', // className to wrap this specific step popover in addition to the general className in Driver options    title: 'Title',             // Title on the popover    description: 'Description', // Body of the popover    showButtons: false,         // Do not show control buttons in footer    closeBtnText: 'Close',      // Text on the close button for this step    nextBtnText: 'Next',        // Next button text for this step    prevBtnText: 'Previous',    // Previous button text for this step  }</code></pre><p>您可以使用多种选项来实现您想要的任何目标。我有一些进一步改进它的计划，确保关注<a href="https://github.com/kamranahmedse/driver.js" target="_blank" rel="noopener">GitHub page - https://github.com/kamranahmedse/driver.js</a>页面</p><h3><span id="参考地址">参考地址</span></h3><p>github：<a href="https://github.com/kamranahmedse/driver.js" target="_blank" rel="noopener">https://github.com/kamranahmedse/driver.js</a><br>用法和用例介绍：<a href="https://kamranahmed.info/driver.js/" target="_blank" rel="noopener">https://kamranahmed.info/driver.js/</a><br>简单的安装使用介绍（中文，非官方）：<a href="http://f2ex.cn/driver-js/" target="_blank" rel="noopener">http://f2ex.cn/driver-js/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;好好工作，搞好身体，互相帮助 —&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/driverjs001.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;一个轻量
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="Driver.js" scheme="https://cl9000.github.io/tags/Driver-js/"/>
    
      <category term="Driverjs" scheme="https://cl9000.github.io/tags/Driverjs/"/>
    
      <category term="前端引导页" scheme="https://cl9000.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%95%E5%AF%BC%E9%A1%B5/"/>
    
      <category term="分布式引导" scheme="https://cl9000.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%95%E5%AF%BC/"/>
    
  </entry>
  
  <entry>
    <title>【译文】你可能不知道你可以用Chrome的开发者控制台做的事情</title>
    <link href="https://cl9000.github.io/2020/04/01/%E3%80%90%E8%AF%91%E6%96%87%E3%80%91%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BD%A0%E5%8F%AF%E4%BB%A5%E7%94%A8Chrome%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <id>https://cl9000.github.io/2020/04/01/%E3%80%90%E8%AF%91%E6%96%87%E3%80%91%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BD%A0%E5%8F%AF%E4%BB%A5%E7%94%A8Chrome%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/</id>
    <published>2020-04-01T03:03:25.000Z</published>
    <updated>2021-04-15T09:15:41.470Z</updated>
    
    <content type="html"><![CDATA[<p>做任何事情，先模仿，再创新，会更快成功 –<cl9000></cl9000></p><blockquote><p>译者：cl9000<br>原文：<a href="https://medium.freecodecamp.org/10-tips-to-maximize-your-javascript-debugging-experience-b69a75859329" target="_blank" rel="noopener">https://medium.freecodecamp.org/10-tips-to-maximize-your-javascript-debugging-experience-b69a75859329</a></p></blockquote><p>Chrome自带内置的开发工具。它具有各种各样的特性，比如元素、网络和安全性。今天，我们将100%关注它的JavaScript控制台。</p><p>当我开始编码时，我只使用JavaScript控制台来记录值，比如来自服务器的响应或变量的值。但随着时间的推移，在教程的帮助下，我发现主机的功能远比我想象的要多。</p><p>你可以用它来做一些有用的事情。如果你正在用桌面的Chrome(或其他任何浏览器)阅读这篇文章，你甚至可以打开它的开发人员工具，立即试用。</p><ol><li>选择DOM元素<br>如果你熟悉jQuery，你就会知道 $(’ .class ‘) 和 $(’ #id ') 选择器有多重要。它们根据与之关联的类或ID选择DOM元素。</li></ol><p>但是，如果不能在DOM中访问jQuery，仍然可以在开发人员控制台中进行同样的操作。</p><p>$(’ tagName ‘) $(’ .class ‘) $(’ #id ‘) 和 $(’ .class #id ‘)等价于文档。querySelector(’ ')。这将返回DOM中与选择器匹配的第一个元素。</p><p>可以使用$$(’ tagName ‘)或$$(’ .class ')——注意有两个美元符号——根据特定的选择器来选择DOM中的所有元素。这也将它们放入一个数组中。通过指定元素在数组中的位置，您可以继续选择其中的特定元素。</p><p>例如，$$(’ .className ‘)会给你className类的所有元素，$$(’ .className ‘)[0]和$$(’ .className ')[1]会分别给你第一个和第二个元素。</p><ol start="2"><li>将浏览器转换为编辑器<br>您有多少次想过是否可以在浏览器本身编辑一些文本?答案是肯定的，您可以将浏览器转换为文本编辑器。您可以在DOM的任何地方添加文本或删除文本。</li></ol><p>您不必再检查元素和编辑HTML了。相反，进入开发人员控制台并输入以下内容:</p><p><code>document.body.contentEditable=true</code></p><p>这将使内容可编辑。现在几乎可以编辑DOM中的任何内容。</p><p>3.查找与DOM中的元素相关联的事件<br>在调试时，您必须对找到绑定到DOM中某个元素的事件侦听器感兴趣。开发人员控制台使查找这些文件变得更容易。</p><p>getEventListeners($(’ selector '))返回一个对象数组，其中包含绑定到该元素的所有事件。您可以展开对象来查看事件:</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/640.png" alt></p><p>要找到特定事件的监听器，你可以这样做:<br>getEventListeners($(‘selector’)).eventName[0].listener<br>这将显示与特定事件关联的侦听器。这里的eventName[0]是一个数组，它列出了一个特定事件的所有事件。例如:<br>getEventListeners($(‘firstName’)).click[0].listener<br>…将显示与ID为’ firstName '的元素的单击事件相关联的监听器。</p><ol start="4"><li>监控事件<br>如果您想要监视在执行时绑定到DOM中特定元素的事件，也可以在控制台中执行。你可以使用不同的命令来监视这些事件的一部分或全部:</li></ol><p>monitorEvents($(’ selector ‘))将监视与选择器元素相关的所有事件，一旦它们被触发，就会在控制台中记录下来。例如，monitorEvents($(’ #firstName ‘))将记录所有绑定到ID为’ firstName ‘的元素的事件。<br>monitorEvents($(’ selector ')， ’ eventName ‘)将记录与元素绑定的特定事件。您可以将事件名称作为参数传递给函数。这将只记录绑定到特定元素的特定事件。例如，monitorEvents($(’ #firstName ‘)， ’ click ‘)将记录绑定到ID为’ firstName ‘的元素的所有点击事件。<br>monitorEvents($(’ selector ‘)，[’ eventName1 ‘， ’ eventName3’，…])将根据您自己的需求记录多个事件。与其将单个事件名称作为参数传递，不如传递包含所有事件的字符串数组。例如，monitorEvents($(’ #firstName ‘)，[’ click '， ’ focus ‘])将记录绑定到ID为’ firstName ‘的元素的点击事件和焦点事件。<br>unmonitorEvents($(’ selector ')):这将停止监控和记录控制台中的事件。</p><ol start="5"><li>找出代码块的执行时间<br>JavaScript控制台有一个名为console.time(’ labelName ‘)的基本函数，它接受一个标签名称作为参数，然后启动计时器。还有另一个名为console.timeEnd(’ labelName ')的基本函数，它也接受一个标签名，并结束与该特定标签关联的计时器。<br>例如:</li></ol><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">time</span>(<span class="symbol">'myTime</span>'); //Starts the timer <span class="keyword">with</span> <span class="keyword">label</span> - myTimeconsole.timeEnd(<span class="symbol">'myTime</span>'); //Ends the timer <span class="keyword">with</span> <span class="keyword">Label</span> - myTime//Output: myTime:<span class="number">123.00</span> ms</span><br></pre></td></tr></table></figure><p>上面的两行代码给出了从开始计时器到结束计时器所花费的时间。</p><p>我们可以对其进行改进，以计算执行一个代码块所需的时间。</p><p>例如，假设我想找出执行一个循环所花费的时间。我可以这样做:</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console<span class="meta">.time(</span><span class="string">'myTime'</span>); //Starts the timer with <span class="meta">label</span> - myTimefor(var i=0; i &lt; 100000; i++)&#123;  2+4+5;&#125;console.timeEnd(<span class="string">'mytime'</span>); //Ends the timer with <span class="meta">Label</span> - myTime//<span class="meta">Output</span> - myTime:12345.00 ms</span><br></pre></td></tr></table></figure><ol start="6"><li>将变量的值排列到一个表中<br>假设我们有一个对象数组，如下所示:</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myArray=[&#123;a:<span class="number">1</span>,b:<span class="number">2</span>,c:<span class="number">3</span>&#125;,&#123;a:<span class="number">1</span>,b:<span class="number">2</span>,c:<span class="number">3</span>,d:<span class="number">4</span>&#125;,&#123;k:<span class="number">11</span>,f:<span class="number">22</span>&#125;,&#123;a:<span class="number">1</span>,b:<span class="number">2</span>,c:<span class="number">3</span>&#125;]</span><br></pre></td></tr></table></figure><p>当我们在控制台中输入变量名时，它会以对象数组的形式为我们提供值。这很有帮助。您可以展开对象并查看值。</p><p>但当性质增加时，这就很难理解了。因此，为了得到变量的清晰表示，我们可以将它们显示在一个表中。</p><p>table(variableName)在一个表格结构中表示变量及其所有属性。这看起来是这样的:</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/640-2.png" alt></p><ol start="7"><li><p>检查DOM中的元素<br>你可以直接从控制台检查一个元素:<br>inspect($(‘选择器’))将检查匹配选择器的元素，并带你到Chrome开发者工具的元素标签。例如inspect($(’ #firstName ‘))将检查ID为’ firstName ‘的元素，inspect($(’ a ')[3])将检查DOM中的第4个锚元素。<br>$0、$1、$2等可以帮助您获取最近检查的元素。例如，$0给出最后检查的DOM元素，而$1给出第二个最后检查的DOM元素。</p></li><li><p>列出元素的属性<br>如果您想列出一个元素的所有属性，您可以直接从控制台中完成。</p></li></ol><p>dir($(’ selector '))返回一个对象，其中包含与其DOM元素相关的所有属性。您可以展开它们以查看更详细的信息。</p><ol start="9"><li>检索上一个结果的值<br>你可以把控制台当作计算器使用。当你这样做的时候，你可能需要在第一次计算之后进行第二次计算。下面是如何从内存中检索先前计算的结果:<br><code>$_</code><br>这看起来是这样的:</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>+<span class="number">3</span>+<span class="number">49</span> <span class="regexp">//</span>- The Answer of the SUM is <span class="number">9</span><span class="variable">$_9</span> <span class="regexp">//</span> Gives the last Result<span class="variable">$_</span> * <span class="variable">$_81</span>  <span class="regexp">//</span> As the last Result was <span class="number">9</span>Math.sqrt(<span class="variable">$_</span>)<span class="number">9</span> <span class="regexp">//</span> As the last Result was <span class="number">81</span><span class="variable">$_9</span> <span class="regexp">//</span> As the Last Result is <span class="number">9</span></span><br></pre></td></tr></table></figure><ol start="10"><li>清除控制台和内存<br>如果你想清除控制台和它的内存，只需输入:<br><code>clear()</code><br>然后按回车键。就是这样。</li></ol><p>这些只是你可以用Chrome的JavaScript控制台做的几个例子。我希望这些建议能让你的生活更轻松。</p><p>感谢你的阅读。如果你喜欢这篇文章，请点击下面的按钮把它推荐给其他人。你可以找到更多关于我的信息，或者在Twitter上关注我，这里是Medium(<a href="https://medium.com/" target="_blank" rel="noopener">https://medium.com/</a>)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做任何事情，先模仿，再创新，会更快成功 –&lt;cl9000&gt;&lt;/cl9000&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者：cl9000&lt;br&gt;
原文：&lt;a href=&quot;https://medium.freecodecamp.org/10-tips-to-maximize-
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="chrome" scheme="https://cl9000.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的call，bind和apply方法</title>
    <link href="https://cl9000.github.io/2020/03/30/JavaScript%E4%B8%AD%E7%9A%84call-bind-apply%E6%96%B9%E6%B3%95/"/>
    <id>https://cl9000.github.io/2020/03/30/JavaScript%E4%B8%AD%E7%9A%84call-bind-apply%E6%96%B9%E6%B3%95/</id>
    <published>2020-03-30T10:26:30.000Z</published>
    <updated>2021-04-16T07:05:31.718Z</updated>
    
    <content type="html"><![CDATA[<p>人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/call-vs-bind-vs-apply/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/call-vs-bind-vs-apply/</a></p></blockquote><p>这是<code>JavaScript</code>面试中经常被问到的问题。这篇文章描述了函数原型方法<code>call()</code>、<code>apply()</code>和<code>bind()</code>及其语法、用法和实际示例。</p><h2><span id="functionprototype是什么">Function.prototype是什么?</span></h2><p>首先，我们需要了解这三个函数的调用、应用和绑定都是函数的原型。这是什么意思?</p><p>让我们打印函数的结构来理解它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Function</span>);</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">▼ ƒ Function()</span><br><span class="line">      arguments: (...)</span><br><span class="line">      caller: (...)</span><br><span class="line">      length: <span class="number">1</span></span><br><span class="line">      name: <span class="string">"Function"</span></span><br><span class="line">    ▼ prototype: ƒ ()</span><br><span class="line">          arguments: (...)</span><br><span class="line">          caller: (...)</span><br><span class="line">          length: <span class="number">0</span></span><br><span class="line">          name: <span class="string">""</span></span><br><span class="line">        ➤ constructor: ƒ Function()</span><br><span class="line">        ➤ apply: ƒ apply()</span><br><span class="line">        ➤ bind: ƒ bind()</span><br><span class="line">        ➤ call: ƒ call()</span><br><span class="line">        ➤ toString: ƒ toString()</span><br><span class="line">        ➤ Symbol(Symbol.hasInstance): ƒ [Symbol.hasInstance]()</span><br><span class="line">        ➤ get arguments: ƒ ()</span><br><span class="line">        ➤ set arguments: ƒ ()</span><br><span class="line">        ➤ get caller: ƒ ()</span><br><span class="line">        ➤ set caller: ƒ ()</span><br></pre></td></tr></table></figure><p>您可以看到，<code>apply</code>、<code>bind</code>和<code>call</code>是<code>Function</code>的原型函数，这意味着您可以在定义的任何新函数上使用这三个函数。</p><h2><span id="何时使用call-bind和apply">何时使用call()、bind()和apply()</span></h2><p>当您定义一个新函数并从代码中的某个地方调用它时，它将在上下文中执行。这个上下文称为 <code>this</code>，它指向一个对象。这个对象根据调用函数的方式而变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> increment = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.a + <span class="number">1</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">2</span>, <span class="attr">increment</span>: increment &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">increment</span>: increment &#125;;</span><br><span class="line"></span><br><span class="line">increment();       <span class="comment">//this = window</span></span><br><span class="line">obj1.increment();  <span class="comment">//this = obj1</span></span><br><span class="line">obj2.increment();  <span class="comment">//this = obj2</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>2<br>3<br>4</p></blockquote><p>在上面的代码片段中，我们在三个不同的上下文中调用了同一个<code>increment()</code>函数，这改变了<code>this</code>引用，并产生了三个不同的输出。</p><ul><li>第一个<code>increment()</code>函数在全局上下文中被调用，并绑定到全局对象。如果您在浏览器中工作，<code>window</code>是全局对象。</li><li>接下来的两个<code>increment()</code>函数在隐式上下文中被调用，这个函数绑定到调用函数的对象。这被称为隐式上下文，因为函数与对象紧密耦合(在<code>object</code>内部定义)，当从<code>obj.ƒn()</code>这样的对象调用函数时，这个引用在编译时绑定到<code>object</code>。</li></ul><p>有时，我们可能希望在显式上下文中调用函数，这样我们就可以在运行时调用函数时控制该引用。这就是<code>call()</code>、<code>apply()</code>和<code>bind()</code>发挥作用的地方。让我们使用<code>call()</code>、<code>apply()</code>和<code>bind()</code>方法来调用相同的<code>increment()</code>函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> increment = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.a + <span class="number">1</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">increment.call(obj1);               <span class="comment">//this = obj1</span></span><br><span class="line">increment.call(obj2);               <span class="comment">//this = obj2</span></span><br><span class="line"></span><br><span class="line">increment.apply(obj1);              <span class="comment">//this = obj1</span></span><br><span class="line">increment.apply(obj2);              <span class="comment">//this = obj2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindFn1 = increment.bind(obj1);</span><br><span class="line"><span class="keyword">var</span> bindFn2 = increment.bind(obj2);</span><br><span class="line">bindFn1();                           <span class="comment">//this = obj1</span></span><br><span class="line">bindFn2();                           <span class="comment">//this = obj2</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>5<br>6<br>5<br>6<br>5<br>6</p></blockquote><p>从上面的代码片段注意几点:-</p><ul><li>所有这三个<code>call()</code>、<code>apply()</code>和<code>bind()</code>都是<code>Function</code>的原型，所以你可以在任何函数<code>increment.call()</code>、<code>increment.apply()</code>和<code>increment.bind()</code>上使用它们。</li><li>这三个<code>call()</code>、<code>apply()</code>和<code>bind()</code>在运行时提供不同的对象上下文<code>(obj1、obj2)</code>，并产生不同的输出。</li><li><code>call()</code>和<code>apply()</code>立即执行一个函数，<code>bind()</code>则返回一个可以稍后执行的绑定函数。</li></ul><p>现在我们已经理解了这些原型函数的基本用法，让我们通过示例来看看它们的语法和实际用法。</p><h2><span id="call">call()</span></h2><h3><span id="语法">语法</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">functionName.call(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><p>当使用<code>call()</code>调用函数时，</p><ul><li><code>this</code>指的是<code>thisArg</code></li><li>逗号分隔的参数<code>arg1, arg2…</code>是函数的参数</li></ul><blockquote><p>记住:“call()参数用逗号分隔”。</p></blockquote><h3><span id="实际使用情况">实际使用情况</span></h3><h4><span id="1-借用其他对象的功能">1. 借用其他对象的功能</span></h4><p>在<code>Javascript</code>中，每个对象都可以有原型函数，这些函数实际上只在该对象上执行。使用<code>call()</code>方法，您可以借用这些对象的功能，并在不同的对象上执行它。</p><p>让我们来看看数组原型函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Array</span>);</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Output</span><br><span class="line"></span><br><span class="line">▼ ƒ Array()</span><br><span class="line">      arguments: (...)</span><br><span class="line">      caller: (...)</span><br><span class="line">      length: <span class="number">1</span></span><br><span class="line">      name: <span class="string">"Array"</span></span><br><span class="line">    ▼ prototype: ƒ ()</span><br><span class="line">          length: <span class="number">0</span></span><br><span class="line">        ➤ constructor: ƒ Array()</span><br><span class="line">        ➤ <span class="built_in">concat</span>: ƒ <span class="built_in">concat</span>()</span><br><span class="line">        ➤ copyWithin: ƒ copyWithin()</span><br><span class="line">        ➤ fill: ƒ fill()</span><br><span class="line">        ➤ <span class="built_in">find</span>: ƒ <span class="built_in">find</span>()</span><br><span class="line">        ➤ findIndex: ƒ findIndex()</span><br><span class="line">        ➤ lastIndexOf: ƒ lastIndexOf()</span><br><span class="line">        ➤ pop: ƒ pop()</span><br><span class="line">        ➤ push: ƒ push()</span><br><span class="line">        ➤ <span class="built_in">reverse</span>: ƒ <span class="built_in">reverse</span>()</span><br><span class="line">        ➤ shift: ƒ shift()</span><br><span class="line">        ➤ unshift: ƒ unshift()</span><br><span class="line">        ➤ slice: ƒ slice()</span><br><span class="line">        ➤ <span class="built_in">sort</span>: ƒ <span class="built_in">sort</span>()</span><br><span class="line">        ➤ splice: ƒ splice()</span><br><span class="line">        ➤ includes: ƒ includes()</span><br><span class="line">        ➤ indexOf: ƒ indexOf()</span><br><span class="line">        ➤ join: ƒ join()</span><br><span class="line">        ➤ keys: ƒ keys()</span><br><span class="line">        ➤ entries: ƒ entries()</span><br><span class="line">        ➤ values: ƒ values()</span><br><span class="line">        ➤ forEach: ƒ forEach()</span><br><span class="line">        ➤ filter: ƒ filter()</span><br><span class="line">        ➤ flat: ƒ flat()</span><br><span class="line">        ➤ flatMap: ƒ flatMap()</span><br><span class="line">        ➤ map: ƒ map()</span><br><span class="line">        ➤ every: ƒ every()</span><br><span class="line">        ➤ some: ƒ some()</span><br><span class="line">        ➤ reduce: ƒ reduce()</span><br><span class="line">        ➤ reduceRight: ƒ reduceRight()</span><br><span class="line">        ➤ toLocaleString: ƒ toLocaleString()</span><br><span class="line">        ➤ toString: ƒ toString()</span><br></pre></td></tr></table></figure><p>让我们借用数组原型方法的功能<code>call()</code>函数:-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.concat.call([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">Array</span>.prototype.join.call([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="string">":"</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>[1, 2, 3, 4, 5]<br>1:2:3:4:5</p></blockquote><p>同样借用<code>car</code>对象的<code>start</code>功能，将其用于<code>aircraft</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123;</span><br><span class="line">    name: <span class="string">'car'</span>,</span><br><span class="line">    start: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Start the '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    speedup: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Speed up the '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">    &#125;,</span><br><span class="line">    stop: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Stop the '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aircraft = &#123;</span><br><span class="line">    name: <span class="string">'aircraft'</span>,</span><br><span class="line">    fly: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Fly'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">car.start.call(aircraft);</span><br></pre></td></tr></table></figure><h4><span id="2-链构造函数">2. 链构造函数</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Box</span>(<span class="params">height, width</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">this</span>.width  = width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Widget</span>(<span class="params">height, width, color</span>) </span>&#123;</span><br><span class="line">    Box.call(<span class="keyword">this</span>, height, width);</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dialog</span>(<span class="params">height, width, color, title</span>) </span>&#123;</span><br><span class="line">    Widget.call(<span class="keyword">this</span>, height, width, color);</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dialog = <span class="keyword">new</span> Dialog(<span class="string">'red'</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="string">'Title'</span>);</span><br></pre></td></tr></table></figure><p>在上面的代码片段中，我们可以看到如何在当前<code>this</code>上下文中通过调用父构造函数来链构造函数.</p><h2><span id="apply">apply()</span></h2><h3><span id="语法">语法</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">functionName.apply(thisArg, [arg1, arg2, ...])</span><br></pre></td></tr></table></figure><p>当使用<code>apply()</code>方法调用函数时，</p><ul><li><code>this</code>指的是<code>thisArg</code></li><li>第二个参数是一个值数组[arg1, arg2，…]，是函数的参数</li></ul><blockquote><p>记住: <code>apply()</code>接受数组形式的参数</p></blockquote><h3><span id="实际用法">实际用法</span></h3><p><code>apply()</code>函数的实际用法与<code>call()</code>函数相同。它们之间唯一的区别是，<code>apply()</code>接受<code>args</code>作为数组，而<code>call()</code>接受<code>args</code>作为逗号分隔的值。</p><p>可以使用<code>apply()</code>函数将参数作为数组传递，调用任何接受参数作为逗号分隔值的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.min(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);           <span class="comment">//args as comma separated</span></span><br><span class="line"><span class="built_in">Math</span>.min.apply([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);   <span class="comment">//args as an array</span></span><br></pre></td></tr></table></figure><h2><span id="bind">bind()</span></h2><h3><span id="语法">语法</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">functionName.bind(thisArg)</span><br></pre></td></tr></table></figure><p>当使用bind()方法调用函数时，</p><ul><li>this指的是thisArg</li><li>返回可以稍后调用的新的绑定函数</li></ul><blockquote><p>记住: <code>bind()</code>不会立即调用函数。它返回一个新的可以稍后调用的绑定函数。</p></blockquote><h3><span id="实际用法">实际用法</span></h3><h4><span id="1-上下文界限">1. 上下文界限</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Button = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;;</span><br><span class="line">Button.prototype.click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.content + <span class="string">' clicked'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myButton = <span class="keyword">new</span> Button(<span class="string">'OK'</span>);</span><br><span class="line">myButton.click();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> looseClick = myButton.click;</span><br><span class="line">looseClick(); <span class="comment">// not bound, 'this' is not myButton - it is the global object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boundClick = myButton.click.bind(myButton);</span><br><span class="line">boundClick(); <span class="comment">// bound, 'this' is myButton</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>OK clicked<br>undefined clicked<br>OK clicked</p></blockquote><h4><span id="2-函数与参数绑定">2. 函数与参数绑定</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> logProp = <span class="function"><span class="keyword">function</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>[prop]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Obj = &#123;</span><br><span class="line">    x : <span class="number">5</span>,</span><br><span class="line">    y : <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Obj.log = logProp.bind(Obj);</span><br><span class="line">Obj.logX = logProp.bind(Obj, <span class="string">'x'</span>); <span class="comment">//binding with prop x</span></span><br><span class="line">Obj.logY = logProp.bind(Obj, <span class="string">'y'</span>); <span class="comment">//binding with prop y</span></span><br><span class="line"></span><br><span class="line">Obj.log(<span class="string">'x'</span>);</span><br><span class="line">Obj.logX();</span><br><span class="line"></span><br><span class="line">Obj.log(<span class="string">'y'</span>);</span><br><span class="line">Obj.logY();</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>5<br>5<br>10<br>10</p></blockquote><p>另外一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add5 = sum.bind(<span class="literal">null</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//add5 is binding function with a = 5</span></span><br><span class="line"><span class="built_in">console</span>.log(add5(<span class="number">10</span>)); <span class="comment">//b =10</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>15</p></blockquote><h2><span id="call-vs-bind-vs-apply">Call vs Bind vs Apply</span></h2><p>函数对象、函数<code>objects</code>、函数<code>calls</code>、<code>call</code>、<code>apply</code>和<code>bind</code>的比较:</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">函数执行时间</th><th style="text-align:center"><code>this</code> 绑定时间</th></tr></thead><tbody><tr><td style="text-align:center">function object ƒ</td><td style="text-align:center">future</td><td style="text-align:center">future</td></tr><tr><td style="text-align:center">function call ƒ()</td><td style="text-align:center">now</td><td style="text-align:center">now</td></tr><tr><td style="text-align:center">ƒ.call()</td><td style="text-align:center">now</td><td style="text-align:center">now</td></tr><tr><td style="text-align:center">ƒ.apply()</td><td style="text-align:center">now</td><td style="text-align:center">now</td></tr><tr><td style="text-align:center">ƒ.bind()</td><td style="text-align:center">future</td><td style="text-align:center">now</td></tr></tbody></table><p>让我们看一下最后一个例子，并一起使用<code>call()</code>、<code>apply()</code>和<code>bind()</code>方法.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numObj1 = &#123;<span class="attr">num</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> numObj2 = &#123;<span class="attr">num</span>: <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sumFn = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.num + args.reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span> a+b, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sumFn.call(numObj1, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">//this = numObj1</span></span><br><span class="line">sumFn.call(numObj2, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">//this = numObj2</span></span><br><span class="line"></span><br><span class="line">sumFn.apply(numObj1, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]); <span class="comment">//this = numObj1</span></span><br><span class="line">sumFn.apply(numObj2, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]); <span class="comment">//this = numObj2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sumBindFn1 = sumFn.bind(numObj1); <span class="comment">// return Fn</span></span><br><span class="line"><span class="keyword">let</span> sumBindFn2 = sumFn.bind(numObj2); <span class="comment">// return Fn</span></span><br><span class="line">sumBindFn1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);          <span class="comment">//this = numObj1</span></span><br><span class="line">sumBindFn2(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);          <span class="comment">//this = numObj2</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>output:</strong><br>11<br>12<br>11<br>12<br>11<br>12</p></blockquote><h2><span id="参考">参考</span></h2><ul><li><a href="https://codingnconcepts.com/javascript/call-vs-bind-vs-apply/" target="_blank" rel="noopener">原文 - https://codingnconcepts.com/javascript/call-vs-bind-vs-apply/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcept
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
