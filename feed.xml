<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Weichanglu</title>
  <icon>https://www.gravatar.com/avatar/749a0cb196d7f8d7b7f41d5a5fa372e4</icon>
  <subtitle>你知道的越多，你不知道的越多</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cl9000.github.io/"/>
  <updated>2021-04-16T05:51:04.993Z</updated>
  <id>https://cl9000.github.io/</id>
  
  <author>
    <name>cl9000</name>
    <email>cl9000@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>可选链【?.】JavaScript中的运算符</title>
    <link href="https://cl9000.github.io/2021/01/28/JavaScript%E5%8F%AF%E9%80%89%E9%93%BE%E3%80%90-%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://cl9000.github.io/2021/01/28/JavaScript%E5%8F%AF%E9%80%89%E9%93%BE%E3%80%90-%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-01-28T09:12:40.000Z</published>
    <updated>2021-04-16T05:51:04.993Z</updated>
    
    <content type="html"><![CDATA[<p>人生不是一种享乐，而是一桩十分沉重的工作。 —-&lt;列夫·托尔斯泰&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/</a></p></blockquote><p>可选的链?.运算符用于通过隐式空检查访问嵌套的对象属性。</p><h2><span id="概述">概述</span></h2><p>如何使用无效<code>（null和undefined）</code>检查访问对象的嵌套属性？假设我们必须通过网络api的响应访问用户详细信息？</p><p>您可以<code>? ... :</code>像这样使用嵌套的三元运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response ? (response.data ? (response.data.user ? response.data.user.name : <span class="literal">null</span>) : <span class="literal">null</span>) : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>或者您可以在<code>if</code>这种情况下进行空值检查：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(response &amp;&amp; response.data &amp;&amp; response.data.user)&#123;</span><br><span class="line">  userName = response.data.user.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至更好的方法可以使其&amp;&amp;像这样的单衬板链条状态：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response &amp;&amp; response.data &amp;&amp; response.data.user &amp;&amp; response.data.user.name;</span><br></pre></td></tr></table></figure><p>上面的代码的共同点是，链接有时可能真的很长，并且变得更加难以格式化和读取。这是可选的链接?.运算符提供帮助的地方，该运算符提供了隐式的无效检查，并使我们的代码更小，更好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response?.data?.user?.name;</span><br></pre></td></tr></table></figure><h2><span id="句法">句法</span></h2><p>可选的链<code>?.</code>运算符在<code>Javascript ES2020</code>中引入，其语法如下：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.val?.prop       returns obj.val.prop <span class="keyword">if</span> val exists, otherwise <span class="literal">undefined</span>.</span><br><span class="line">obj.func?.(args)    returns obj.func(args) <span class="keyword">if</span> func exists, otherwise <span class="literal">undefined</span>.</span><br><span class="line">obj.arr?.[index]    returns obj.array[index] <span class="keyword">if</span> array exists, otherwise <span class="literal">undefined</span>.</span><br></pre></td></tr></table></figure><p>使用可选链<code>?.</code>运算符</p><p>让我们看看<code>?.</code>操作符与<code>user</code>对象的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  homeaddress: &#123;</span><br><span class="line">    country: <span class="string">"USA"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  hobbies: [&#123;<span class="attr">name</span>: <span class="string">"Coding"</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">"Cooking"</span>&#125;],</span><br><span class="line">  getFirstName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="具有属性">具有属性</span></h2><p>访问存在的属性返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.homeaddress.country); </span><br><span class="line"><span class="comment">// prints "USA";</span></span><br></pre></td></tr></table></figure><p>访问不存在的属性会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.officeaddress.country); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property 'country' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用<code>?.</code>不存在的可选链运算符访问属性将返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.officeaddress?.country); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="具有功能">具有功能</span></h2><p>调用存在的函数返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getFirstName()); </span><br><span class="line"><span class="comment">// prints "John";</span></span><br></pre></td></tr></table></figure><p>调用不存在的函数会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getLastName()); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: user.getLastName is not a function";</span></span><br></pre></td></tr></table></figure><p>用<code>?.</code>不存在的<code>Optional chaining operator</code>调用一个函数将返回<code>undefined：-</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getLastName?.()); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="与数组">与数组</span></h2><p>访问数组的现有索引返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">0</span>].name); </span><br><span class="line"><span class="comment">// prints "Coding";</span></span><br></pre></td></tr></table></figure><p>访问数组的不存在的索引会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">3</span>].name); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property 'name' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用可选的链运算符访问数组的不存在的索引<code>?.</code> 将返回undefined：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">3</span>]?.name); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><p>访问不存在的数组会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.dislikes[<span class="number">0</span>].name); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property '0' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用<code>?.</code>不存在的可选链运算符访问数组将返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.dislikes?.[<span class="number">0</span>]?.name); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="与nullish合并-操作符">与Nullish合并?? 操作符</span></h2><p>现在，您知道如果对象不存在，则可选链运算符<code>?.</code>将返回<code>undefined</code>。有时您想返回一个值，而不是<code>undefined</code>通过使用<code>Nullish Coalescing??</code>运算符和可选的<code>chaining?.</code>运算符来返回一个值。</p><p>如果没有空值合并<code>??</code>运算符，则返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> country = user.officeaddress?.country;</span><br><span class="line"><span class="built_in">console</span>.log(country);</span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><p>使用空值合并<code>??</code>运算符，返回默认值：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> country = user.officeaddress?.country ?? <span class="string">"USA"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(country);</span><br><span class="line"><span class="comment">// prints "USA"</span></span><br></pre></td></tr></table></figure><p>原文链接：<br><a href="https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/</a></p><p>参考其它：<br><a href="https://seifi.org/javascript/optional-chaining-in-javascript.html" target="_blank" rel="noopener">https://seifi.org/javascript/optional-chaining-in-javascript.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生不是一种享乐，而是一桩十分沉重的工作。 —-&amp;lt;列夫·托尔斯泰&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/ja
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="运算符" scheme="https://cl9000.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>python：ERROR:root:code for hash md5 was not found.</title>
    <link href="https://cl9000.github.io/2020/11/05/python-error-root-code-for-hash-md5/"/>
    <id>https://cl9000.github.io/2020/11/05/python-error-root-code-for-hash-md5/</id>
    <published>2020-11-05T10:35:48.000Z</published>
    <updated>2020-11-10T09:16:14.940Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="python-errorrootcode-for-hash-md5-was-not-found">python: ERROR:root:code for hash md5 was not found.</span></h3><h3><span id="解决方案错误日志在下面">解决方案（错误日志在下面👇）</span></h3><p><strong>解决方案</strong></p><ul><li>执行命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /usr/<span class="built_in">local</span>/Cellar/openssl</span></span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.0.2s</span><br></pre></td></tr></table></figure><ul><li>根据现有版本（<strong>根据自己终端的响应修改，例如1.0.2t</strong>），运行：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew switch openssl 1.0.2s</span></span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cleaning /usr/local/Cellar/openssl/1.0.2s</span><br><span class="line">Opt link created for /usr/local/Cellar/openssl/1.0.2s</span><br></pre></td></tr></table></figure><p>然后，在在Python 2.7 virtualenv中运行以下测试命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> hashlib;</span>m=hashlib.md5();print(m.hexdigest())</span><br></pre></td></tr></table></figure><ul><li>终端回应</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d41d8cd98f00b204e9800998ecf8427e</span><br></pre></td></tr></table></figure><p>如此便正常解决了</p><p><strong>如下错误日志：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">ERROR:root:code for hash md5 was not found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> <span class="keyword">md5</span></span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> <span class="keyword">sha1</span> was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> <span class="keyword">sha1</span></span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha224 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha224</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha256 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha256</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha384 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha384</span><br><span class="line"><span class="keyword">ERROR</span>:root:code <span class="keyword">for</span> <span class="keyword">hash</span> sha512 was <span class="keyword">not</span> found.</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">147</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    globals()[__func_name] = __get_hash(__func_name)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/hashlib.py"</span>, line <span class="number">97</span>, <span class="keyword">in</span> __get_builtin_constructor</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported hash type '</span> + <span class="keyword">name</span>)</span><br><span class="line">ValueError: unsupported <span class="keyword">hash</span> <span class="keyword">type</span> sha512</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/Cellar/python@2/2.7.15_3/bin/pip"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    load_entry_point(<span class="string">'pip==19.0.2'</span>, <span class="string">'console_scripts'</span>, <span class="string">'pip'</span>)()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">489</span>, <span class="keyword">in</span> load_entry_point</span><br><span class="line">    <span class="keyword">return</span> get_distribution(dist).load_entry_point(<span class="keyword">group</span>, <span class="keyword">name</span>)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2793</span>, <span class="keyword">in</span> load_entry_point</span><br><span class="line">    <span class="keyword">return</span> ep.load()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2411</span>, <span class="keyword">in</span> <span class="keyword">load</span></span><br><span class="line">    <span class="keyword">return</span> self.resolve()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py"</span>, line <span class="number">2417</span>, <span class="keyword">in</span> resolve</span><br><span class="line">    <span class="keyword">module</span> = __import__(self.module_name, fromlist=[<span class="string">'__name__'</span>], <span class="keyword">level</span>=<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_internal/__init__.py"</span>, line <span class="number">19</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> pip._vendor.urllib3.exceptions <span class="keyword">import</span> DependencyWarning</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/__init__.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .connectionpool <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/connectionpool.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .connection <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/connection.py"</span>, line <span class="number">38</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .util.ssl_ <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/util/__init__.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> .ssl_ <span class="keyword">import</span> (</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/site-packages/pip/_vendor/urllib3/util/ssl_.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">from</span> hashlib <span class="keyword">import</span> <span class="keyword">md5</span>, <span class="keyword">sha1</span>, sha256</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> <span class="keyword">name</span> <span class="keyword">md5</span></span><br></pre></td></tr></table></figure><h3><span id="ref">ref</span></h3><ul><li><a href="https://stackoverflow.com/questions/59269208/errorrootcode-for-hash-md5-was-not-found-when-using-any-hg-mercurial-command#" target="_blank" rel="noopener">“ERROR:root:code for hash md5 was not found” when using any hg mercurial commands<br></a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;python-errorrootcode-for-hash-md5-was-not-found&quot;&gt;python: ERROR:root:code for hash md5 was not found.&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span id=
      
    
    </summary>
    
    
    
      <category term="python error" scheme="https://cl9000.github.io/tags/python-error/"/>
    
      <category term="ERROR:root:code" scheme="https://cl9000.github.io/tags/ERROR-root-code/"/>
    
  </entry>
  
  <entry>
    <title>iOS-virtualPositon 虚拟定位</title>
    <link href="https://cl9000.github.io/2020/10/19/iOS-virtualPositon/"/>
    <id>https://cl9000.github.io/2020/10/19/iOS-virtualPositon/</id>
    <published>2020-10-19T04:18:29.000Z</published>
    <updated>2021-04-16T05:49:39.682Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="方案一">方案一</span></h2><p>使用xcode修改的定位是设备的定位，iOS开发者较为熟悉。</p><h4><span id="一-xcode中新建一个项目创建一个gpx文件">一、Xcode中新建一个项目，创建一个gpx文件</span></h4><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location001.png" alt></p><h4><span id="二-修改经纬度">二、修改经纬度</span></h4><p>修改定位文件gpx，把里面的经纬度改成你要设定的地点的经纬度。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location004.png" alt></p><h4><span id="三-修改绑定">三、修改绑定</span></h4><p>修改定位文件为你刚才创建的文件<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location002.png" alt></p><h4><span id="四-运行修改">四、运行修改</span></h4><p>选择真机设备 运行一下工程，然后打开地图，查看一下当前定位，改变了就成功了。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/location003.png" alt></p><h2><span id="方案二-简单快捷">方案二 简单快捷</span></h2><p>若没有iOS开发经验，需要简单快捷，可使用<strong>i4</strong> 修改软件虚拟位置，步骤入下</p><ol><li>Mac appStore（或PC-i4官网）下载 i4（爱思助手）<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location001.png" alt="ios-location001.png"></li><li>数据线连接手机后，工具 - 虚拟定位<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location002.png" alt="ios-location002.png"></li><li>搜索位置或经纬度录入设置<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ios-location003.png" alt="ios-location003.png"></li></ol><p><strong>注意</strong><br>iOS14系统仅支持4个小时，若恢复真实位置，需要重新启动手机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;方案一&quot;&gt;方案一&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;使用xcode修改的定位是设备的定位，iOS开发者较为熟悉。&lt;/p&gt;
&lt;h4&gt;&lt;span id=&quot;一-xcode中新建一个项目创建一个gpx文件&quot;&gt;一、Xcode中新建一个项目，创建一个gpx文件&lt;/sp
      
    
    </summary>
    
    
    
      <category term="工具" scheme="https://cl9000.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="虚拟定位" scheme="https://cl9000.github.io/tags/%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/"/>
    
      <category term="手机定位" scheme="https://cl9000.github.io/tags/%E6%89%8B%E6%9C%BA%E5%AE%9A%E4%BD%8D/"/>
    
      <category term="修改定位" scheme="https://cl9000.github.io/tags/%E4%BF%AE%E6%94%B9%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 个人页的README文件 GitHub Profile</title>
    <link href="https://cl9000.github.io/2020/10/15/GitHub-Profile-GitHub%E4%B8%AA%E4%BA%BA%E9%A6%96%E9%A1%B5/"/>
    <id>https://cl9000.github.io/2020/10/15/GitHub-Profile-GitHub%E4%B8%AA%E4%BA%BA%E9%A6%96%E9%A1%B5/</id>
    <published>2020-10-15T08:39:18.000Z</published>
    <updated>2020-11-10T09:12:56.469Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="github-个人页的readme文件">GitHub 个人页的README文件</span></h3><p>当你尝试去创建一个与你<code>Github</code>用户名相同的仓库时，会发现这是<code>Github</code>为你预留的特殊仓库，用来作为你的<code>Github Profile</code>，这个仓库就相当于一个可以显示在你<code>Github</code>个人页的README文件。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-gprpf-20201106.png" alt="img-gprpf-20201106.png"></p><p>本文会帮助你美化你的Github Profile，让它展示更多有用的信息。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-gh-profile-20201106.png" alt="img-gh-profile-20201106.png"></p><p>例如添加一个<code>首页被访问次数的计数器</code>，一个Github被Star与Commit的概览信息，以及各种技能<code>标签</code>，设备标签等。还可以利用<code>wakatime</code>显示你<code>最近编码各类语言的使用时长</code>，以及你最近<code>Steam游戏游玩排行榜</code>。</p><h4><span id="首页计数器">首页计数器</span></h4><p>这个很容易实现，只需要一个统计资源请求的后台服务即可，有很多第三方的服务可以使用，page_id后面替换为自己的Github用户名。</p><p><code>![](https://visitor-badge.glitch.me/badge?page_id=cl9000.readme)</code><br><img src="https://visitor-badge.glitch.me/badge?page_id=cl9000.readme" alt></p><p>参考另位博友自己搭建的，是使用下方。（@后面替换为自己的Github用户名）<br><code>![](http://antzuhl.cn:4000/get/@antzuhl.readme)</code></p><h4><span id="github信息概览">Github信息概览</span></h4><p><img src="https://github-readme-stats.vercel.app/api?username=cl9000&amp;show_icons=true&amp;count_private=true&amp;hide=prs&amp;theme=default_repocard" alt="info"></p><p>这个也是使用现有的<a href="https://github.com/anuraghazra/github-readme-stats" target="_blank" rel="noopener">开源github项目 github-readme-stats</a>，根据url来配置卡片信息。</p><p><code>![info](https://github-readme-stats.vercel.app/api?username=cl9000&amp;show_icons=true&amp;count_private=true&amp;hide=prs&amp;theme=default_repocard)</code></p><p>url中username为你的Github用户名，theme为主题配置，支持的主题样式丰富，如下：<br><code>dark, radical, merko, gruvbox, tokyonight, onedark, cobalt, synthwave, highcontrast, dracula</code></p><h4><span id="技能-ampamp-设备卡片">技能 &amp;&amp; 设备卡片</span></h4><p>这是Github很多开源仓库都会使用的东西，其本质也是第三方服务后台动态生成的图片，类似：<br><img src="https://visitor-badge.glitch.me/badge?page_id=@cl9000.readme" alt="访客徽章"></p><p><code>simpleicons</code>提供了很多的icon，几乎可以找到所以的程序语言，设备，IDE，开源产品的icon。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-simpleicons-20201106.png" alt="img-simpleicons-20201106.png"></p><p>可参阅 <a href="https://simpleicons.org/" target="_blank" rel="noopener">simpleicons</a> 和 <a href="https://shields.io/" target="_blank" rel="noopener">shields.io</a> 配合使用展现不同样式，如下：</p><ul><li>linux卡片</li></ul><p><code>[![](https://img.shields.io/badge/OS-Arch%20Linux-33aadd?style=flat-square&amp;logo=arch-linux&amp;logoColor=ffffff)](https://www.archlinux.org/)</code><br><a href="https://www.archlinux.org/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/OS-Arch%20Linux-33aadd?style=flat-square&amp;logo=arch-linux&amp;logoColor=ffffff" alt></a></p><ul><li>mac卡片</li></ul><p><code>[![](https://img.shields.io/badge/macOS-Hackintosh-292e33?style=flat-square&amp;logo=apple&amp;logoColor=ffffff)](https://www.tonymacx86.com/)</code><br><a href="https://www.tonymacx86.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/macOS-Hackintosh-292e33?style=flat-square&amp;logo=apple&amp;logoColor=ffffff" alt></a></p><ul><li>手机设备</li></ul><p><code>[![](https://img.shields.io/badge/Honor-V30-f5010c?style=flat-square&amp;logo=huawei&amp;logoColor=ffffff)](https://www.apple.com/)</code><br><a href="https://www.apple.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Honor-V30-f5010c?style=flat-square&amp;logo=huawei&amp;logoColor=ffffff" alt></a></p><ul><li>程序语言</li></ul><p><code>[![](https://img.shields.io/badge/-Java-007396?style=flat-square&amp;logo=java&amp;logoColor=ffffff)](https://reactjs.org/)</code><br><a href="https://reactjs.org/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/-Java-007396?style=flat-square&amp;logo=java&amp;logoColor=ffffff" alt></a></p><ul><li>游戏</li></ul><p><code>[![](https://img.shields.io/badge/Steam-171a21?style=flat-square&amp;logo=steam&amp;logoColor=ffffff)](https://steamcommunity.com/id/antzuhl)</code><br><a href="https://steamcommunity.com/id/antzuhl" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Steam-171a21?style=flat-square&amp;logo=steam&amp;logoColor=ffffff" alt></a></p><h4><span id="编程-ampamp-游戏时长统计">编程 &amp;&amp; 游戏时长统计</span></h4><p>主要利用了 <code>Github Action</code> 的机制，触发定时任务去 <code>Wakatime平台</code> 拉取数据进行统计，而 Wakatime 平台提供了 <code>JetBrains全家桶、 VsCode、 Chrome的插件</code>，用于统计用户的编程时长数据。</p><ol><li>创建一个Github Gist（下方）： <code>https://gist.github.com/</code></li><li>新建一个拥有gist空间权限的Token，保存它 <code>https://github.com/settings/tokens/new</code></li><li>创建一个WakaTime的账号 <code>https://wakatime.com/signup</code></li><li>在你的WakaTime账号设置中选择公开你的编码活动 <code>https://wakatime.com/settings/profile</code><br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/img-wakatim-20201106.png" alt="img-wakatim-20201106.png"></li><li>在你WakaTime账户设置中创建Api-Key，并且复制它 <code>https://wakatime.com/settings/api-key</code></li><li>Fork这个仓库 <code>https://github.com/matchai/waka-box</code></li><li>编辑 <code>.github/workflows/schedule.yml</code> 文件，将其中的GIST_ID设置为你创建的gist页面的url</li><li>在你仓库的安全设置中添加下面两个环境变量 <code>Settings &gt; Secrets</code><ul><li>GH_TOKEN: 第2步的 <code>gist token</code></li></ul><ul><li>WAKATIME_API_KEY: 第5步中的 <code>wakatime Api-key</code></li></ul></li></ol><p>这样就算是完成了，如果你有 Github Action知识，并且懂 cron 表达式，可以看看这个仓库的action脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name: Update gist with WakaTime stats</span><br><span class="line">on:</span><br><span class="line">  schedule:</span><br><span class="line">    - cron: &quot;0 0 * * *&quot;</span><br><span class="line">jobs:</span><br><span class="line">  update-gist:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@master</span><br><span class="line">      - name: Update gist</span><br><span class="line">        uses: matchai/waka-box@master</span><br><span class="line">        env:</span><br><span class="line">          GH_TOKEN: $&#123;&#123; secrets.GH_TOKEN &#125;&#125;</span><br><span class="line">          GIST_ID: 968220c97e8da1d047a9a480fa432e54</span><br><span class="line">          WAKATIME_API_KEY: $&#123;&#123; secrets.WAKATIME_API_KEY &#125;&#125;</span><br></pre></td></tr></table></figure><p>其中 cron 就是该脚本执行的时间，每个小时的0秒0分，也就是指每小时执行一次。</p><p>你可以将这个gist的script文件添加到你的 Github Profile 中，用来在首页显示你的编码时间。</p><p>统计 Steam 游戏时间也是类似，不过没有 Wakatime 这样的平台去让我们拉取数据，但是我们可以直接去 Steam 拉取。</p><p>可以参考这个仓库 <a href="https://github.com/journey-ad/steam-go" target="_blank" rel="noopener">https://github.com/journey-ad/steam-go</a></p><p>代码片段，可以看到 <code>STEAM_API_KEY</code> 与 <code>STEAM_ID</code> 也是需要你设置到仓库环境变量中去的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">true<span class="string">"context"</span></span><br><span class="line">true<span class="string">"fmt"</span></span><br><span class="line">true<span class="string">"os"</span></span><br><span class="line">true<span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">truesteam <span class="string">"github.com/YouEclipse/steam-go/pkg"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">truesteamClient := steam.NewClient(os.Getenv(<span class="string">"STEAM_API_KEY"</span>), <span class="literal">nil</span>)</span><br><span class="line">truesteamID, _ := strconv.ParseUint(os.Getenv(<span class="string">"STEAM_ID"</span>), <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">truectx := context.Background()</span><br><span class="line">trueparams := &amp;steam.GetOwnedGamesParams&#123;</span><br><span class="line">truetrueSteamID:                steamID,</span><br><span class="line">truetrueIncludeAppInfo:         <span class="literal">true</span>,</span><br><span class="line">truetrueIncludePlayedFreeGames: <span class="literal">true</span>,</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">trueresult, err := steamClient.IPlayerService.GetOwnedGames(ctx, params)</span><br><span class="line">true<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">truetrue<span class="built_in">panic</span>(err)</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">truefmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质都是类似于爬虫，利用 <code>Github Action</code> 来达到触发的效果。</p><p>这样就算是完成了，还有更多玩法可以自己探索。</p><h3><span id="关于访问gist入口-ampamp-无法访问gist解决方案">关于访问Gist入口 &amp;&amp; 无法访问Gist解决方案</span></h3><ol><li>登录GitHub后，菜单中 <strong>your gists</strong></li><li>修改hosts文件，新增以下：</li></ol><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.30.253.113</span>  github.com</span><br><span class="line"><span class="number">192.30.253.118</span>  gist.github.com</span><br><span class="line"><span class="number">192.30.253.119</span>  gist.github.com</span><br></pre></td></tr></table></figure><h3><span id="ref">ref</span></h3><p><a href="http://antzuhl.cn/archives/githubprofile" target="_blank" rel="noopener">http://antzuhl.cn/archives/githubprofile</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;github-个人页的readme文件&quot;&gt;GitHub 个人页的README文件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;当你尝试去创建一个与你&lt;code&gt;Github&lt;/code&gt;用户名相同的仓库时，会发现这是&lt;code&gt;Github&lt;/code&gt;为你预留的特
      
    
    </summary>
    
    
    
      <category term="Github" scheme="https://cl9000.github.io/tags/Github/"/>
    
      <category term="Github Profile" scheme="https://cl9000.github.io/tags/Github-Profile/"/>
    
      <category term="Github Gist" scheme="https://cl9000.github.io/tags/Github-Gist/"/>
    
      <category term="wakatime" scheme="https://cl9000.github.io/tags/wakatime/"/>
    
      <category term="shields.io" scheme="https://cl9000.github.io/tags/shields-io/"/>
    
      <category term="simpleicons" scheme="https://cl9000.github.io/tags/simpleicons/"/>
    
      <category term="visitor-badge" scheme="https://cl9000.github.io/tags/visitor-badge/"/>
    
      <category term="readme" scheme="https://cl9000.github.io/tags/readme/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的Classes</title>
    <link href="https://cl9000.github.io/2020/07/18/JavaScript%E4%B8%AD%E7%9A%84Classes/"/>
    <id>https://cl9000.github.io/2020/07/18/JavaScript%E4%B8%AD%E7%9A%84Classes/</id>
    <published>2020-07-18T10:34:24.000Z</published>
    <updated>2021-04-19T05:47:25.185Z</updated>
    
    <content type="html"><![CDATA[<p>预测未来最好的方法就是去创造未来。——&lt;亚伯拉罕·林肯&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/classes-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/classes-in-javascript/</a></p></blockquote><h2><span id="类声明-class-declaration">类声明 Class Declaration</span></h2><p>让我们看看在<code>JavaScript</code>中使用<code>function构造函数</code>和<code>class关键字</code>创建类的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 Function Constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">brand, color, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.brand = brand;</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">  <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 Class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(brand, color, price) &#123;</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.price = price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，<code>class</code>是一种函数类型，所以我们用它来替换<code>function</code>。从这个意义上说，两种创建类的方法几乎是相同的。</p><p>我们可以让我们的代码更短，像这样:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(brand, color, price) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123; brand, color, price&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="方法-methods">方法 Methods</span></h2><p>让我们向 <code>Car类</code> 添加一些方法</p><ul><li><strong><code>Getter Setter方法(实例方法)</code></strong> 从类的实例中调用。它们分别使用 <code>get</code> 和 <code>set</code> 关键字来定义，以获取和设置属性。</li><li><strong><code>原型方法(实例方法)</code></strong> 从类的实例中调用。它们用于访问实例属性并对它们执行一些操作。</li><li><strong><code>静态方法(类方法)</code></strong> 直接从类调用。它们是使用static关键字定义的，通常用于创建实用函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(brand, color, price) &#123;</span><br><span class="line">    <span class="keyword">this</span>._brand = brand;</span><br><span class="line">    <span class="keyword">this</span>._color = color;</span><br><span class="line">    <span class="keyword">this</span>._price = price;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter method</span></span><br><span class="line">  <span class="keyword">get</span> color()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`color is <span class="subst">$&#123;<span class="keyword">this</span>._color.toUpperCase()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setter method</span></span><br><span class="line">  <span class="keyword">set</span> color(newColor)&#123;</span><br><span class="line">    <span class="keyword">this</span>._color = newColor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// prototype method</span></span><br><span class="line">  drive()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`driving <span class="subst">$&#123;<span class="keyword">this</span>._brand&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>._color&#125;</span> color car`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// static method</span></span><br><span class="line">  <span class="keyword">static</span> compareCars(car1, car2)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;car2._brand&#125;</span> is <span class="subst">$&#123;(car1._price &gt; car2._price) ? <span class="string">"cheaper"</span> : <span class="string">"costlier"</span>&#125;</span> then <span class="subst">$&#123;car1._brand&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们使用 <code>Car</code> 类创建一些对象，并调用它们的 <code>getter、setter、prototype</code> 和静态方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redToyotaCar = <span class="keyword">new</span> Car(<span class="string">"Toyota"</span>, <span class="string">"red"</span>, <span class="number">500000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar);  </span><br><span class="line"><span class="comment">// prints Car &#123;_brand: "Toyota", _color: "red", _price: 500000&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.color);  </span><br><span class="line"><span class="comment">// (getter method)</span></span><br><span class="line"><span class="comment">// prints 'color is RED'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.drive());  </span><br><span class="line"><span class="comment">// (prototype method)</span></span><br><span class="line"><span class="comment">// prints 'driving Toyota red color car'</span></span><br><span class="line"></span><br><span class="line">redToyotaCar.color = <span class="string">"blue"</span>;  </span><br><span class="line"><span class="comment">// (setter method)</span></span><br><span class="line"><span class="comment">// set color to blue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.color); </span><br><span class="line"><span class="comment">// (getter method)</span></span><br><span class="line"><span class="comment">// prints 'color is BLUE'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(redToyotaCar.drive()); </span><br><span class="line"><span class="comment">// (prototype method)</span></span><br><span class="line"><span class="comment">// prints 'driving Toyota blue color car'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> blackAudiCar = <span class="keyword">new</span> Car(<span class="string">"Audi"</span>, <span class="string">"black"</span>, <span class="number">900000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Car.compareCars(redToyotaCar, blackAudiCar));  </span><br><span class="line"><span class="comment">// (static method)</span></span><br><span class="line"><span class="comment">// prints 'Audi is costlier then Toyota'</span></span><br></pre></td></tr></table></figure><p>在上面的类中，我们有<code>color</code>属性的 <code>getter</code> 和 <code>setter</code>。我们使用 <code>_</code> convention来创建一个后备字段来存储我们的<code>color</code>属性。如果每次不调用<code>get</code>或<code>set</code>，就会导致堆栈溢出。<code>get</code>将被调用，这将导致<code>get</code>被反复调用，从而创建一个无限循环。</p><blockquote><p>VM172:12 Uncaught RangeError: Maximum call stack size exceeded<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)<br>at Car.set color [as color] (<anonymous>:12:16)</anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></anonymous></p></blockquote><h2><span id="继承-inheritance">继承 Inheritance</span></h2><p>假设我们想从<code>Car</code>类创建一个<code>Toyota</code>子类并添加一些额外的字段，如<code>&quot; model &quot;</code>和<code>&quot; make &quot;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toyota</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(color, price, model, make)&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"Toyota"</span>, color, price);</span><br><span class="line">        <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;model, make&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    drive()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">super</span>.drive()&#125;</span> made in <span class="subst">$&#123;<span class="keyword">this</span>.make&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从Toyota子类中创建一些对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> toyotaCamery = <span class="keyword">new</span> Toyota(<span class="string">"red"</span>, <span class="number">800000</span>, <span class="string">"Camary"</span>, <span class="number">2010</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toyotaCamery);</span><br><span class="line"><span class="comment">// prints Toyota &#123;_brand: "Toyota", _color: "red", _price: 800000, model: "Camary", make: 2010&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toyotaCamery.color);</span><br><span class="line"><span class="comment">// prints 'color is RED'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toyotaCamery.drive());</span><br><span class="line"><span class="comment">// prints 'driving Toyota red color car made in 2010'</span></span><br></pre></td></tr></table></figure><p>我们看到，使用ES6 class关键字创建子类非常方便和容易。</p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/classes-in-javascript/" target="_blank" rel="noopener">原文 - https://codingnconcepts.com/javascript/classes-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;预测未来最好的方法就是去创造未来。——&amp;lt;亚伯拉罕·林肯&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javascr
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的调试技巧</title>
    <link href="https://cl9000.github.io/2020/07/16/JavaScript%E4%B8%AD%E7%9A%84%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>https://cl9000.github.io/2020/07/16/JavaScript%E4%B8%AD%E7%9A%84%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</id>
    <published>2020-07-16T09:19:43.000Z</published>
    <updated>2021-04-26T10:39:59.257Z</updated>
    
    <content type="html"><![CDATA[<p>在事情成功之前，一切总看似不可能。——&lt;纳尔逊·曼德拉&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/debugging-tips-and-tricks/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/debugging-tips-and-tricks/</a></p></blockquote><p>在本教程中，我们将学习大量使用 <code>Chrome DevTool</code> 调试 <code>JavaScript</code> 代码的技巧和窍门，使用控制台 <code>API</code> 记录到控制台的不同方法，以及更多…</p><h2><span id="1-对-alerts-说-no">1. 对 <strong>alerts</strong> 说 <strong>No</strong></span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"I will pop up in browser"</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/debug-alert.png" alt="浏览器调试警报"></p><p>当我们使用 <code>alert()</code> 调试值时，它会在浏览器中弹出，这很令人讨厌。尽量避免使用它们，因为还有其他方法可用于调试，我们将在后面介绍它们。</p><h2><span id="2-浏览器调试器">2. 浏览器调试器</span></h2><p>大多数现代浏览器，如 <code>Chrome</code>、<code>Firefox</code>、<code>Edge</code>、<code>Opera</code> 和 <code>Safari</code> 都内置了对 <code>JavaScript</code> 调试的支持。<code>Chrome</code> 作为调试器通常是开发者的首选。</p><h4><span id="chrome开发工具-chrome-developer-tool">Chrome开发工具 Chrome Developer Tool</span></h4><blockquote><p>从 <code>Chrome</code> 的主菜单中打开 <code>DevTool</code> ，选择 <code>更多工具</code> <strong>➞</strong> <code>开发人员工具</code>。</p></blockquote><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">Mac</th><th style="text-align:center">Windows, Linux, Chrome OS</th></tr></thead><tbody><tr><td style="text-align:center">Elements Tab</td><td style="text-align:center">Command+Option+C</td><td style="text-align:center">Control+Shift+C</td></tr><tr><td style="text-align:center">Console Tab</td><td style="text-align:center">Command+Option+J</td><td style="text-align:center">Control+Shift+J</td></tr><tr><td style="text-align:center">Sources Tab</td><td style="text-align:center">Command+Option+I</td><td style="text-align:center">Control+Shift+I</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/chrome-developer-tool.png" alt="Chrome Developer Tool"></p><p><code>Chrome DevTools</code> 一些最常用的图标:-</p><ul><li>使用 <strong>Inspect icon ⬉</strong>在页面中选择一个元素，然后在 <code>Elements</code> 选项卡中检查其 <code>DOM</code> 位置。您可以更新或删除一个 <code>DOM</code> 元素，检查在 <code>DOM</code> 元素上应用的 <code>CSS</code>，及在 <code>Elements</code> 选项卡中进行更多操作。</li><li>使用设备 <strong>Device icon ⍇</strong>检查网站的响应性。它在你的浏览器页面上增加了一个额外的工具栏，你可以模拟不同设备的视图，例如手机(如iPhone，三星Galaxy, Nexus, LG，诺基亚，黑莓等)，平板电脑(如iPad等)和笔记本电脑(有或没有触摸)。</li><li>在 <code>Sources</code> 选项卡下，您可以看到呈现该页面的所有 <code>JavaScript</code> 源代码。通常，源文件是压缩的，很难理解它们和应用断点。使用格式图标 <code>{}</code> 将这些压缩的文件格式化为人可读的格式。</li></ul><h2><span id="3-代码行断点">3. 代码行断点</span></h2><p>您可以使用断点暂停浏览器中的 <code>JavaScript</code> 代码。最著名的断点类型是代码行断点。</p><p>在 <code>DevTools</code> 中设置代码行断点:</p><ul><li>单击 <code>Sources</code> 选项卡。</li><li>打开文件并转到要调试的代码行。</li><li>您将看到代码左侧的行号列。点击它。行号旁边出现一个图标，表示设置了断点。</li><li>如果要删除断点，请在相同的行号上再次单击。图标消失。</li></ul><p>请注意，根据 <code>Chrome</code> 版本和操作系统（Windows或MacOS），<code>DevTool</code> 中的断点图标外观可能有所不同</p><p>有时，代码行断点的设置效率很低，尤其是在您不知道确切的位置或正在使用大型代码库的情况下。您可以通过知道如何以及何时使用其他类型的断点来节省调试时间。</p><table><thead><tr><th style="text-align:center"><strong>断点类型</strong></th><th style="text-align:center"><strong>当您想暂停时使用此功能…</strong></th></tr></thead><tbody><tr><td style="text-align:center">代码行</td><td style="text-align:center">在确切的一行代码上。</td></tr><tr><td style="text-align:center">条件代码行</td><td style="text-align:center">在精确的代码行上，但仅当其条件为 <code>true</code> 时。</td></tr><tr><td style="text-align:center">DOM</td><td style="text-align:center">修改或删除特定 <code>DOM</code>节点及其子节点的代码。</td></tr><tr><td style="text-align:center">XHR</td><td style="text-align:center">关于XHR <code>send()</code>或 <code>fetch()</code> 方法当请求URL包含字符串模式时。</td></tr><tr><td style="text-align:center">Event listener</td><td style="text-align:center">在事件(如 <code>click</code>)触发后运行的代码上。</td></tr><tr><td style="text-align:center">Exception</td><td style="text-align:center">在引发捕获或未捕获异常的代码行上。</td></tr><tr><td style="text-align:center">Function</td><td style="text-align:center">每当调用特定 <code>Function</code> 时。</td></tr></tbody></table><h2><span id="4-使用-debugger-语句从代码中设置断点">4. 使用’ debugger '语句从代码中设置断点</span></h2><p>当浏览器中的调试器模式处于打开状态并且代码执行到达 <code>debugger;</code> 语句时，它会像该行代码断点一样在该行上暂停。</p><p>当您想在浏览器中调试代码的某个部分时，调试器语句非常有用。通常您会在浏览器开发人员工具中找到有问题的代码，并设置一个断点进行调试。有时不容易在浏览器中找到代码，在这种情况下，可以插入 <code>debugger;</code> 语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> phrase = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">debugger</span>;  <span class="comment">// &lt;-- the debugger pause on this line</span></span><br><span class="line"></span><br><span class="line">  say(phrase);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="5-条件断点">5. 条件断点</span></h2><p>当您知道需要调查的确切代码行时，可以使用条件代码行断点，但您只希望在某些其他条件为真时暂停。</p><ul><li>设置一个条件代码行断点:</li><li>单击 <code>Sources</code> 选项卡。</li><li>打开文件并转到要调试的代码行。</li><li>您将看到代码左侧的行号列。右键单击它。</li><li>选择 <code>Edit breakpoint..</code>，代码行下面会显示一个对话框。</li><li>在对话框中输入条件。</li><li>按 <code>Enter</code> 激活断点。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/chrome-devtool-conditional-breakpoint.png" alt="Chrome DevTool Conditional Breakpoint"></p><h2><span id="6-dom更改断点">6. DOM更改断点</span></h2><p>当您想暂停更改 <code>DOM</code> 节点或其子级的代码时，请使用 <code>DOM</code> 更改断点。</p><p>要设置 <code>DOM</code> 更改断点：</p><ul><li>单击 <code>Elements</code> 选项卡。</li><li>转到要在其上设置断点的元素。</li><li>右键单击该元素。</li><li>将鼠标悬停在 <code>Break on</code> 上，然后选择 <code>Subtree modifications, Attribute modifications</code> 或 <code>Node removal</code>。</li></ul><h4><span id="dom更改断点的类型-types-of-dom-change-breakpoints">DOM更改断点的类型 Types of DOM change breakpoints</span></h4><ul><li><strong>Subtree modifications</strong>`: 当删除或添加当前选定节点的子节点，或更改子节点的内容时触发。不会在子节点属性更改时触发，也不会在当前选择的节点发生任何更改时触发。</li><li><strong>Attributes modifications</strong>: 当在当前选择的节点上添加或删除属性时触发，或者当属性值更改时触发。</li><li><strong>Node Removal</strong>: 当当前选择的节点被移除时触发。</li></ul><h2><span id="7-xhrfetch-断点">7. XHR/Fetch 断点</span></h2><p>如果您在 <code>AJAX</code> 请求中遇到错误，并且无法识别提交此请求的代码，那么 <code>XHR</code> 断点对于快速找到 <code>AJAX</code> 源代码非常有用。</p><p>当 <code>AJAX</code> 请求的 <code>URL</code> 包含指定的字符串时，<code>XHR</code> 断点将暂停代码的执行。<code>AJAX send()</code> 和 <code>fetch()</code>方法支持 <code>XHR</code> 断点。</p><p>设置XHR断点:</p><ul><li>单击 <code>Sources</code> 选项卡。</li><li>展开 <code>XHR Breakpoints</code> 窗口。</li><li>点击 <strong>Add breakpoint</strong>。</li><li>输入要中断的字符串。当这个字符串出现在 <code>XHR</code>的请求 <code>URL</code> 中的任何地方时，<code>DevTools</code>会暂停。</li><li>按 <code>Enter</code> 确认。</li></ul><h2><span id="8-事件监听器断点">8. 事件监听器断点</span></h2><p>当您想在事件触发后运行的事件侦听器代码上暂停时，请使用事件侦听器断点。您可以选择特定的事件，如单击鼠标下的事件，或所有事件，如剪切、复制、粘贴下的剪贴板类别。</p><p>打开事件监听器断点:</p><ul><li>单击 <strong>Sources</strong> 选项卡。</li><li>展开<strong>Event Listener Breakpoints</strong>窗格。<code>DevTools</code>显示了一个事件类别列表，如<code>Animation, Canvas, Clipboard, Mouse</code>等。</li><li>要么检查 <strong>☑</strong> 类别以包含该类别下的所有事件，要么展开该类别并检查☑某个特定事件。</li></ul><h2><span id="9-异常断点">9. 异常断点</span></h2><p><code>Chrome</code> 开发者工具允许你在抛出捕获或未捕获异常时暂停 <code>JavaScript</code> 代码的执行。当代码没有抛出错误和失败时，这一点特别有用。这使得您可以在创建 <code>Error</code>对象时检查应用程序的状态。</p><p>打开异常断点:</p><ul><li>单击 <strong>Sources</strong>选项卡。</li><li>单击异常图标上的 <strong>Pause</strong>。启用时变为蓝色。</li><li>如果您也想暂停已捕获异常的执行，请检查 <strong>☑Pause on uncaught exceptions</strong>。</li><li>完成后记得关掉它们。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/chrome-devtool-advance-breakpoints.png" alt="Chrome DevTool XHR, Event Listener and Exception Breakpoints"></p><h2><span id="10-function-breakpoint">10. Function Breakpoint</span></h2><p>调用 <code>debug(functionName)</code>，其中 <code>functionName</code> 是您想要调试的函数，当您想在调用特定函数时暂停时。你可以在你的代码中插入<code>debug()</code>(就像<code>Console.log()</code>语句)或者从<code>DevTools</code>控制台调用它。<code>Debug()</code>等价于在函数的第一行设置代码行断点。</p><p>确保目标函数在范围内。如果要调试的函数不在范围内，<code>DevTools</code> 将抛出一个<code>ReferenceError</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = a + b; <span class="comment">// DevTools pauses on this line.</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">debug(sum); <span class="comment">// Pass the function object, not a string.</span></span><br><span class="line">sum();</span><br></pre></td></tr></table></figure><h2><span id="11-黑盒脚本文件">11. 黑盒脚本文件</span></h2><p>您在 <code>Chrome DevTool</code> 中调试应用程序代码并逐行浏览代码时，调试器有时会跳转到您不关注的源文件中（例如第三方JS库）。我确定您在回到自己的应用程序代码之前已经经历了逐步浏览库代码的烦恼。</p><p><code>Chrome DevTool</code>提供了将 <code>JavaScript</code> 文件添加为黑匣子的功能，以便调试器在逐步调试代码时不会跳入这些文件并忽略它们。</p><p>对脚本进行黑名单处理会怎样？</p><ul><li>从库代码引发的异常不会暂停（如果启用了“暂停暂停”），</li><li>进入/退出/跳过库代码，</li><li>事件侦听器断点不会在库代码中中断，</li><li>调试器不会在库代码中设置的任何断点处暂停。</li></ul><p>最终结果是您正在调试应用程序代码，而不是第三方资源。要将JavaScript文件黑匣子：</p><ul><li>单击 <strong>Main Menu &gt; Settings</strong> 图标，或使用 <strong>F1</strong>快捷键打开设置</li><li>单击 <strong>Blackboxing</strong> 菜单项。</li><li>点击 <strong>Add Pattern…</strong> 按钮。</li><li>在文本框中输入文件名或格式，然后单击 <strong>Add</strong> 按钮。</li><li>选中 <strong>☑ Blackbox content script</strong> 以启用黑盒。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/chrome-devtool-blackbox-script.png" alt="Chrome DevTool Blackbox Script"></p><h2><span id="12-片段">12. 片段</span></h2><p>通常，我们使用浏览器控制台执行和测试一些代码片段。有时，我们需要一次又一次地测试相同的代码。<code>Chrome DevTools</code>提供了保存代码段以供将来使用的功能。</p><p>要保存您的代码段，请执行以下操作：</p><ul><li>单击 <strong>Sources</strong> 选项卡。</li><li>在 <strong>Sources</strong> 选项卡的左侧面板中，单击 <strong>Snippets</strong> 子选项卡。</li><li>单击 <strong>+ New Snippet</strong> 创建一个新文件以保存您的代码段。</li><li>当您打开代码段代码时。有用于格式化和执行代码的图标。</li></ul><p>您可以使用摘要来存储由您或其他开发人员制作的常用调试代码脚本。保罗爱尔兰写了一些有用的片段- <code>stopBefore.js，Grep.js</code>您可以在您的<code>DevTool</code>段分别复制。可从控制台访问代码片段。让我们来看看它们：</p><ul><li>该<code>storeBefore.js</code>片段允许设置时触发某个函数被调用之前断点。例如，这将在document.getElementById调用该函数之前触发一个断点：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stopBefore(<span class="built_in">document</span>, <span class="string">'getElementById'</span>)</span><br></pre></td></tr></table></figure><ul><li>所述<code>grep.js</code>代码段允许搜索的对象及其匹配给定的搜索条件的属性的原型链。例如，此指令将搜索与文档对象中的get匹配的所有属性：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep(<span class="built_in">document</span>, <span class="string">'get'</span>);</span><br></pre></td></tr></table></figure><ul><li>当访问给定的属性时，<code>debugAccess.js</code>片段允许触发断点。例如，每次调用document.cookie时，这都会触发一个断点：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debugAccess(<span class="built_in">document</span>, <span class="string">'cookie'</span>);</span><br></pre></td></tr></table></figure><h2><span id="13-打印多个值">13. 打印多个值</span></h2><p>大多数开发人员使用 <code>console.log()</code> 在浏览器控制台中调试值。它是调试之王，可以解决您的大多数调试问题。</p><p>您可能不知道的是，<code>console.log()</code> 可以通过提供逗号分隔的值来打印多个值，因此您无需自己连接多个值。</p><p>每个逗号 <code>,</code> 在值之间添加一个空格。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'x ='</span>, x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'x ='</span>, x, <span class="string">'y ='</span>, y, <span class="string">'fruits ='</span>, fruits, <span class="string">'obj ='</span>, obj);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>x = 1<br>x = 1 y = hello fruits = (3) [“apple”, “banana”, “mango”] obj = {a: 1, b: 2}</p></blockquote><p>您也可以使用Template Literal在单个字符串中组合多个值，如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`x = <span class="subst">$&#123;x&#125;</span>, y = <span class="subst">$&#123;y&#125;</span>, fruits = <span class="subst">$&#123;fruits&#125;</span>, obj = <span class="subst">$&#123;obj&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h2><span id="14-避免记录对象引用">14. 避免记录对象引用</span></h2><blockquote><p>不要使用<code>console.log(obj)</code>，使用<code>console.log(JSON.parse(JSON.stringify(obj)))</code>替代。</p></blockquote><p>当您使用 <code>console.log()</code> 记录阵列（或对象）并随后进行更新时。许多浏览器会向您显示数组（或对象）的最新状态，这可能会引起误解。</p><p>使用 <code>console.log(JSON.parse(JSON.stringify(obj)))</code> 确保记录，您正在打印数组（或对象）的副本，该副本将在打印时记录确切的状态。</p><p>让我们从下面的数组示例中了解这一点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits =  [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(fruits))); <span class="comment">//makes a copy of it</span></span><br><span class="line"></span><br><span class="line">fruits.push(<span class="string">'grapes'</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ (3) [“apple”, “banana”, “mango”]<br>0: &quot;apple&quot;<br>1: &quot;banana&quot;<br>2: &quot;mango&quot;<br>3: &quot;grapes&quot;<br>length: 4<br>➤ <strong>proto</strong>: Array(0)<br>▼ (3) [“apple”, “banana”, “mango”]<br>0: &quot;apple&quot;<br>1: &quot;banana&quot;<br>2: &quot;mango&quot;<br>length: 3<br>➤ <strong>proto</strong>: Array(0)</p></blockquote><p>我们看到 <code>console.log()</code> 显示长度为4的数组的最新状态，而在记录时其长度为3。</p><p>让我们看一下对象示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =  &#123; <span class="attr">name</span>: <span class="string">'adam'</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">gender</span>: <span class="string">'male'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(person))); <span class="comment">//makes a copy of it</span></span><br><span class="line"></span><br><span class="line">person.married = <span class="string">'NO'</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ {name: “adam”, age: 21, gender: “male”}<br>age: 21<br>gender: &quot;male&quot;<br>married: &quot;NO&quot;<br>name: &quot;adam&quot;<br>➤ <strong>proto</strong>: Object<br>▼ {name: “adam”, age: 21, gender: “male”}<br>age: 21<br>gender: &quot;male&quot;<br>name: &quot;adam&quot;<br>➤ <strong>proto</strong>: Object</p></blockquote><p>我们看到 <code>console.log()</code> 显示了对象的最新状态，包括在记录时丢失的 <code>married</code> 字段。</p><h2><span id="15-以json格式打印dom元素">15. 以JSON格式打印DOM元素</span></h2><p>使用 <code>console.log()</code> 将 <code>DOM</code> 元素打印为 <code>HTML</code> 元素树结构。相反，我们可以使用 <code>console.dir()</code> 来查看 <code>JSON</code> 中的 <code>DOM</code> 元素（如树结构）。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.body);</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/console-log-vs-dir.png" alt></p><h2><span id="16-打印构造函数的原型方法">16. 打印构造函数的原型方法</span></h2><p>该 <code>console.dir()</code> 是打印构造函数的内部属性非常有用，如原型方法。</p><p>在下面的示例中，我们看到 <code>console.log()</code> 仅显示构造函数的名称，而使用 <code>console.dir()</code> ，我们可以看到 <code>Array</code> 函数的所有原型方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Array</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>ƒ Array() { [native code] }<br>▼ ƒ Array()<br>arguments: (…)<br>caller: (…)<br>length: 1<br>name: &quot;Array&quot;<br>▼ prototype: ƒ ()<br>length: 0<br>➤ constructor: ƒ Array()<br>➤ concat: ƒ concat()<br>➤ find: ƒ find()<br>➤ findIndex: ƒ findIndex()<br>➤ lastIndexOf: ƒ lastIndexOf()<br>➤ pop: ƒ pop()<br>➤ push: ƒ push()<br>➤ reverse: ƒ reverse()<br>➤ slice: ƒ slice()<br>➤ sort: ƒ sort()<br>➤ splice: ƒ splice()<br>➤ includes: ƒ includes()<br>➤ indexOf: ƒ indexOf()<br>➤ join: ƒ join()<br>➤ toString: ƒ toString()<br>…</p></blockquote><h2><span id="17-打印功能的关闭">17. 打印功能的关闭</span></h2><p>所述 <code>console.dir()</code> 是打印功能的内部属性，如示波器和封闭件相当有用的。</p><p>在下面的示例中，我们看到 <code>console.log()</code> 仅使用 <code>console.dir()</code> 打印函数的签名，我们可以看到函数的原型方法，作用域以及最重要的是闭包。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outerFunc  = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> innerFunc = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">var</span> innerMostFunc = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c + d + e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> innerMostFunc;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> innerFunc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print innerMostFunc</span></span><br><span class="line"><span class="built_in">console</span>.log(outerFunc(<span class="number">3</span>)(<span class="number">4</span>)); </span><br><span class="line"><span class="built_in">console</span>.dir(outerFunc(<span class="number">3</span>)(<span class="number">4</span>));</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>ƒ (e) {<br>return a + b + c + d + e;<br>}<br>▼ ƒ innerMostFunc©<br>length: 1<br>name: &quot;innerMostFunc&quot;<br>arguments: null<br>caller: null<br>➤ prototype: {constructor: ƒ}<br>➤ <strong>proto</strong>: ƒ ()<br>[[FunctionLocation]]:<br>▼ [[Scopes]]: Scopes[3]<br>➤ 0: Closure (innerFunc) {d: 4, b: 2}<br>➤ 1: Closure (outerFunc) {c: 3, a: 1}<br>➤ 2: Global {parent: Window, opener: null, top: Window, length: 1, frames: Window, …}</p></blockquote><h2><span id="18-打印对象的内部属性">18. 打印对象的内部属性</span></h2><p>一些浏览器在使用 <code>console.log()</code> 时打印对象的字符串化版本，而在使用 <code>console.dir()</code> 时打印对象的<code>JSON</code> 树。预先打印在浏览器（例如<code>chrome</code>）中并没有太大区别，这两种方法都可以打印对象<code>JSON树</code>。<br>我们发现在 <code>Chrome</code>浏览器中同时使用两种方法打印对象时，没有什么不同</p><blockquote><p><strong>Output</strong><br>▼ {a: 1, b: 2}<br>a: 1<br>b: 2<br>➤ <strong>proto</strong>: Object<br>▼ Object<br>a: 1<br>b: 2<br>➤ <strong>proto</strong>: Object</p></blockquote><h2><span id="19-将对象打印为表格">19. 将对象打印为表格</span></h2><p>所述 <code>console.table()</code> 方法是打印一个大的数据集以表格形式容易地可视化它非常有用。此方法还提供了从那些大型数据集中打印一些字段的功能。当在浏览器中呈现为表格时，浏览器提供了对表格的列进行排序的功能。</p><p>让我们看一下以表格格式记录大型<code>JSON</code>的示例，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personDetails = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"_id"</span>: <span class="string">"5edbbb78633118f455e877fb"</span>,</span><br><span class="line">    <span class="string">"index"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"guid"</span>: <span class="string">"30dd1d2c-5083-4165-8580-5ae734cd0d12"</span>,</span><br><span class="line">    <span class="string">"isActive"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"balance"</span>: <span class="string">"$1,778.03"</span>,</span><br><span class="line">    <span class="string">"picture"</span>: <span class="string">"http://placehold.it/32x32"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="string">"eyeColor"</span>: <span class="string">"blue"</span>,</span><br><span class="line">    <span class="string">"name"</span>: &#123;</span><br><span class="line">      <span class="string">"first"</span>: <span class="string">"Anderson"</span>,</span><br><span class="line">      <span class="string">"last"</span>: <span class="string">"Sargent"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"company"</span>: <span class="string">"MAZUDA"</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"anderson.sargent@mazuda.com"</span>,</span><br><span class="line">    <span class="string">"phone"</span>: <span class="string">"+1 (839) 437-3851"</span>,</span><br><span class="line">    <span class="string">"address"</span>: <span class="string">"235 Ashland Place, Chautauqua, Minnesota, 3487"</span>,</span><br><span class="line">    <span class="string">"about"</span>: <span class="string">"Pariatur nisi cillum culpa aliquip mollit veniam. Laboris in minim non dolor ut deserunt ex sit occaecat irure consequat pariatur esse. Cillum velit dolore enim non enim ipsum aliqua veniam fugiat adipisicing magna mollit occaecat."</span>,</span><br><span class="line">    <span class="string">"registered"</span>: <span class="string">"Saturday, April 8, 2017 3:02 AM"</span>,</span><br><span class="line">    <span class="string">"latitude"</span>: <span class="string">"26.03084"</span>,</span><br><span class="line">    <span class="string">"longitude"</span>: <span class="string">"-74.869342"</span>,</span><br><span class="line">    <span class="string">"tags"</span>: [</span><br><span class="line">      <span class="string">"labore"</span>,</span><br><span class="line">      <span class="string">"nulla"</span>,</span><br><span class="line">      <span class="string">"ea"</span>,</span><br><span class="line">      <span class="string">"qui"</span>,</span><br><span class="line">      <span class="string">"sunt"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"range"</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">    <span class="string">"friends"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Coleman Nunez"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Foley Curry"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Kara Glass"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"greeting"</span>: <span class="string">"Hello, Anderson! You have 5 unread messages."</span>,</span><br><span class="line">    <span class="string">"favoriteFruit"</span>: <span class="string">"apple"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(personDetails);</span><br><span class="line"><span class="built_in">console</span>.table(personDetails, [<span class="string">"age"</span>, <span class="string">"eyeColor"</span>]);  <span class="comment">// print few fields</span></span><br></pre></td></tr></table></figure><p>以下表格格式的输出来自<code>chrome</code>浏览器<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/console-table-output.png" alt></p><h2><span id="20-执行代码所需的打印时间">20. 执行代码所需的打印时间</span></h2><p>可以打印由执行代码，通过使用所用的时间）<code>console.time</code>（前和<code>console.timeEnd()</code> 该特定的代码之后。很少的指针：</p><ul><li><code>console.time()</code> 和 <code>console.timeEnd()</code> 方法应具有相同的标签。</li><li>您还可以通过为方法分配不同的标签来设置多个计时器。</li><li><code>console.time()</code> 和 <code>console.timeEnd()</code> 是 <code>Console API</code> 的一部分（就像<code>console.log()</code>一样）</li></ul><p>让我们看看它是如何工作的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'Timer1'</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'Timer2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> items = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">   items.push(&#123;<span class="attr">index</span>: i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'Timer1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++)&#123;</span><br><span class="line">   items.push(&#123;<span class="attr">index</span>: j&#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'Timer2'</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>Timer1: 13.088134765625ms<br>Timer2: 26.070517578125ms</p></blockquote><h2><span id="21-打印方法执行的堆栈跟踪">21. 打印方法执行的堆栈跟踪</span></h2><p>可以使用 <code>console.trace()</code> 将方法执行流的堆栈跟踪打印到控制台。数指针:</p><ul><li><code>console.trace()</code> 兼容 <code>Chrome DevTools</code> 的 <code>snippet</code> 特性。</li><li><code>Console .trace()</code> 是 <code>Console API</code> 的一部分(就像<code>Console.log()</code>一样)</li></ul><p>让我们看看它是如何工作的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> first = <span class="function"><span class="params">()</span> =&gt;</span> &#123; second(); &#125;;</span><br><span class="line"><span class="keyword">const</span> second = <span class="function"><span class="params">()</span> =&gt;</span> &#123; third(); &#125;;</span><br><span class="line"><span class="keyword">const</span> third = <span class="function"><span class="params">()</span> =&gt;</span> &#123; fourth(); &#125;;</span><br><span class="line"><span class="keyword">const</span> fourth = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.trace(<span class="string">"The trace"</span>); &#125;;</span><br><span class="line">first();</span><br></pre></td></tr></table></figure><p>您可以在控制台输出中获得 <code>@ file_name:line_number</code>，单击它可以导航到源文件。</p><blockquote><p><strong>Output</strong><br>▼ The trace<br>fourth        @ test:4<br>third        @ test:3<br>second        @ test:2<br>first        @ test:1<br>(anonymous)   @ test:5</p></blockquote><h2><span id="22-使用单元测试框架">22. 使用单元测试框架</span></h2><p>有许多针对JavaScript的第三方单元测试框架，它们具有自己的理念和语法。以下是最广泛使用的JavaScript测试框架：</p><ul><li><code>Mocha</code>是功能丰富的框架，可在 <code>Node.js</code> 和浏览器中运行，从而使异步测试变得简单而有趣。<code>Mocha</code>测试按顺序运行，从而可以灵活，准确地报告，同时将未捕获的异常映射到正确的测试用例。</li><li><code>JEST</code>是 <code>Facebook</code> 维护的流行框架。它是基于React的应用程序的首选框架，因为它需要零配置。它非常适合使用<code>Babel，TypeScript，Node，React，Angular和Vue</code>的项目。</li><li><code>Jasmine</code>是一个行为驱动的测试框架。它没有外部依赖性。它不需要DOM。而且它的语法清晰明了，因此您可以轻松编写测试。</li><li><code>QUnit</code>是一个功能强大，易于使用的 <code>JavaScript</code> 单元测试框架。它由<code>jQuery，jQuery UI</code>和<code>jQuery Mobile</code>项目使用，并且能够测试任何通用 <code>JavaScript</code>代码</li></ul><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/debugging-tips-and-tricks/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/debugging-tips-and-tricks/</a></li><li><a href="https://developers.google.com/web/tools/chrome-devtools/" target="_blank" rel="noopener">MDN - https://developers.google.com/web/tools/chrome-devtools/</a></li><li><a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha - https://mochajs.org/</a></li><li><a href="https://jestjs.io/" target="_blank" rel="noopener">JEST - https://jestjs.io/</a></li><li><a href="https://jasmine.github.io/" target="_blank" rel="noopener">Jasmine - https://jasmine.github.io/</a></li><li><a href="https://qunitjs.com/" target="_blank" rel="noopener">QUnit - https://qunitjs.com/</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在事情成功之前，一切总看似不可能。——&amp;lt;纳尔逊·曼德拉&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javascr
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中字符串第一个字母大写</title>
    <link href="https://cl9000.github.io/2020/06/20/JavaScript%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%86%99/"/>
    <id>https://cl9000.github.io/2020/06/20/JavaScript%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%86%99/</id>
    <published>2020-06-20T10:36:53.000Z</published>
    <updated>2021-04-28T08:49:11.995Z</updated>
    
    <content type="html"><![CDATA[<p>To the one with a hammer, everything looks like a nail. （手中有锤，看什么都像钉）——&lt;芒格&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/how-to-capitalize-first-letter-of-string-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-capitalize-first-letter-of-string-in-javascript/</a></p></blockquote><p>在本文中，我们将学习如何在 <code>JavaScript</code> 中大写字符串的第一个字母。</p><h2><span id="1-capitalize-函数">1. ‘capitalize’ 函数</span></h2><p>你可以使用这个自定义的 <code>make capitalize()</code> 函数来将字符串的首字母大写:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5 way</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> string.charAt(<span class="number">0</span>).toUpperCase() + string.slice(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6 way using destructuring </span></span><br><span class="line"><span class="keyword">const</span> capitalize = <span class="function">(<span class="params">[first,...rest]</span>) =&gt;</span> first.toUpperCase() + rest.join(<span class="string">''</span>);</span><br></pre></td></tr></table></figure><h2><span id="2-capitalize-函数详细">2. ‘capitalize’ 函数详细</span></h2><p>让我们来看看使用 <code>capitalize()</code> 函数所涉及的步骤:</p><ul><li>使用 <code>charAt()</code> 方法获取字符串的第一个字母</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">"string"</span>;</span><br><span class="line"></span><br><span class="line">string.charAt(<span class="number">0</span>);  <span class="comment">// Returns "s"</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>toUpperCase()</code> 方法将第一个字母转换为大写</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">"string"</span>;</span><br><span class="line"></span><br><span class="line">string.charAt(<span class="number">0</span>).toUpperCase();  <span class="comment">// Returns "S"</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>slice()</code> 方法获取除第一个字母以外的字符串的其余部分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">"string"</span>;</span><br><span class="line"></span><br><span class="line">string.slice(<span class="number">1</span>);  <span class="comment">// Returns "tring"</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，<code>slice(1)</code> 的意思是从索引 <strong>1</strong> 到字符串末尾的子字符串。或者，你也可以使用 <code>substring(1)</code>。</p></blockquote><ul><li>最后，将第一个大写字母添加到字符串的其余部分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> string.charAt(<span class="number">0</span>).toUpperCase() + string.slice(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">capitalize(string);  <span class="comment">// Returns "String"</span></span><br></pre></td></tr></table></figure><h2><span id="在字符串中添加-capitalize方法">在字符串中添加 <code>capitalize</code>方法</span></h2><p>我们还可以将自定义 <code>capitalize()</code> 函数添加到 <strong>String.prototype</strong> 方法，这样我们可以直接在字符串上使用它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* this is how methods are defined in prototype of any built-in Object */</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">String</span>.prototype, <span class="string">'capitalize'</span>, &#123;</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.charAt(<span class="number">0</span>).toUpperCase() + <span class="keyword">this</span>.slice(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    writable: <span class="literal">true</span>, <span class="comment">// so that one can overwrite it later</span></span><br><span class="line">    configurable: <span class="literal">true</span> <span class="comment">// so that it can be deleted later</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">string.capitalize(); <span class="comment">// Returns "String"</span></span><br></pre></td></tr></table></figure><h2><span id="大写给定字符串中每个单词的首字母">大写给定字符串中每个单词的首字母</span></h2><p>我们可以使用 <code>capitalizeSentence</code> 函数来大写句子中每个单词的首字母:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalizeSentence</span>(<span class="params">sentence</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sentence</span><br><span class="line">      .split(<span class="string">" "</span>)</span><br><span class="line">      .map(<span class="function"><span class="params">string</span> =&gt;</span> string.charAt(<span class="number">0</span>).toUpperCase() + string.slice(<span class="number">1</span>))</span><br><span class="line">      .join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">capitalizeSentence(<span class="string">"a quick brown fox jumps over the lazy dog"</span>);</span><br><span class="line"><span class="comment">// "A Quick Brown Fox Jumps Over The Lazy Dog"</span></span><br></pre></td></tr></table></figure><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/how-to-capitalize-first-letter-of-string-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-capitalize-first-letter-of-string-in-javascript/</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;To the one with a hammer, everything looks like a nail. （手中有锤，看什么都像钉）——&amp;lt;芒格&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;

      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中数组删除重复项</title>
    <link href="https://cl9000.github.io/2020/06/20/JavaScript%E4%B8%AD%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>https://cl9000.github.io/2020/06/20/JavaScript%E4%B8%AD%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9/</id>
    <published>2020-06-20T09:17:42.000Z</published>
    <updated>2021-04-27T09:33:00.015Z</updated>
    
    <content type="html"><![CDATA[<p>不畏惧失败是创造力的一个基本要素。——&lt;艾尔文·兰德博士&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/how-to-remove-array-duplicates-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-remove-array-duplicates-in-javascript/</a></p></blockquote><p>在本教程中，我们将学习如何从 <code>JavaScript</code> 中的数组中删除重复项并仅返回唯一值。</p><p>这是从数组中删除重复项的不同方法的快速视图：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array:</span></span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'apple'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. ES6 Set</span></span><br><span class="line">[...new <span class="built_in">Set</span>(fruits)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. filter</span></span><br><span class="line">fruits.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> fruits.indexOf(item) == index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. forEach</span></span><br><span class="line">fruits.forEach(<span class="function"><span class="params">item</span> =&gt;</span> !uniqueFruits.includes(item) &amp;&amp; uniqueFruits.push(item));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. reduce</span></span><br><span class="line">fruits.reduce(<span class="function">(<span class="params">newarray, item</span>) =&gt;</span> newarray.includes(item) ? newarray : [...newarray, item], []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line"><span class="comment">// ▶ Set(3) &#123;"apple", "orange", "banana"&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="1-使用-es6-的-set">1. 使用 ES6 的 Set()</span></h2><p>如果你已经开始使用ES6，那么建议使用Set对象。</p><blockquote><p><code>Set</code>对象允许您存储任何类型的唯一值，无论是原始值还是对象引用。<br>当你将一个数组传递给新的 <code>Set()</code> 对象时，它会删除任何重复的值。让我们看看代码中发生了两件事:</p></blockquote><ul><li>首先，我们通过传递一个数组来创建一个新的 <code>Set</code>对象，该数组删除了重复项。</li><li>其次，我们使用 <code>spread operator…</code> 将该对象转换回一个数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'apple'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uniqueSet = <span class="keyword">new</span> <span class="built_in">Set</span>(fruits);</span><br><span class="line"><span class="comment">// ▶ Set(3) &#123;"apple", "orange", "banana"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> backToArray = [...uniqueSet];</span><br><span class="line"><span class="comment">// ▶ (3) ["apple", "orange", "banana"]</span></span><br></pre></td></tr></table></figure><p>另外，您也可以使用 <code>Array.from</code> 将转换 <code>Set</code> 为数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'apple'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uniqueFruits = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(fruits));</span><br><span class="line"><span class="comment">// ▶ Set(3) &#123;"apple", "orange", "banana"&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="2-使用-arrayfilter">2. 使用 Array.filter()</span></h2><p><code>filter()</code> 方法根据我们提供的条件从数组中滤除元素。换句话说，</p><ul><li>如果条件返回<strong>true</strong>，它将包含在过滤后的数组中</li><li>如果条件返回<strong>false</strong>，则不会将其包含在过滤后的数组中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'apple'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uniqueFruits = fruits.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> fruits.indexOf(item) == index);</span><br><span class="line"><span class="comment">// ▶ Set(3) &#123;"apple", "orange", "banana"&#125;</span></span><br></pre></td></tr></table></figure><p>在这里，<code>Array.indexOf()</code> 方法的使用非常重要，如果有重复的话，它可以使您第一次出现元素。让我们看一下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'apple'</span>];</span><br><span class="line">fruits.indexOf(<span class="string">'apple'</span>);    <span class="comment">//0</span></span><br><span class="line">fruits.indexOf(<span class="string">'orange'</span>);   <span class="comment">//1</span></span><br><span class="line">fruits.indexOf(<span class="string">'banana'</span>);   <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h2><span id="3-使用-arrayforeach">3. 使用 Array.forEach()</span></h2><p><code>forEach()</code> 方法还可以用于循环遍历数组中的元素，并将元素<code>push()</code>到新数组中，但新数组中并不存在。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'apple'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uniqueFruits = [];</span><br><span class="line">fruits.forEach(<span class="function"><span class="params">item</span> =&gt;</span> !uniqueFruits.includes(item) &amp;&amp; uniqueFruits.push(item));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(uniqueFruits);</span><br><span class="line"><span class="comment">// ▶ Set(3) &#123;"apple", "orange", "banana"&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="4-使用-arrayreduce">4. 使用 Array.reduce()</span></h2><p><code>reduce()</code>方法用于减少数组的元素，并根据传递的某些<code>reducer</code>函数将它们组合成一个新数组。</p><p>在本例中，<code>reducer</code>函数检查新数组是否包含该项。如果没有，则将该项推入新数组。否则，跳过该元素并按原样返回新数组。</p><p>Reduce总是有点难以理解。让我们看一下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'apple'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uniqueFruits = </span><br><span class="line">  fruits.reduce(<span class="function">(<span class="params">newarray, item</span>) =&gt;</span> newarray.includes(item) ? newarray : [...newarray, item], []);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(uniqueFruits);</span><br><span class="line"><span class="comment">// ▶ Set(3) &#123;"apple", "orange", "banana"&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="5-性能">5. 性能</span></h2><p>我们已经创建了一个包含100万个随机数(从1到1000)的数组。让我们检查一下每种方法的性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array:</span></span><br><span class="line"><span class="keyword">var</span> numbers = [];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ ) &#123;</span><br><span class="line">    numbers.push(<span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">1000</span>) + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. ES6 Set</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"set"</span>);</span><br><span class="line">[...new <span class="built_in">Set</span>(numbers)];</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"set"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. filter</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"filter"</span>);</span><br><span class="line">numbers.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> numbers.indexOf(item) == index);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"filter"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. forEach</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"forEach"</span>);</span><br><span class="line"><span class="keyword">var</span> uniqueNumbers = [];</span><br><span class="line">numbers.forEach(<span class="function"><span class="params">item</span> =&gt;</span> !uniqueNumbers.includes(item) &amp;&amp; uniqueNumbers.push(item));</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"forEach"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. reduce</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"reduce"</span>);</span><br><span class="line">numbers.reduce(<span class="function">(<span class="params">newarray, item</span>) =&gt;</span> newarray.includes(item) ? newarray : [...newarray, item], []);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"reduce"</span>);</span><br></pre></td></tr></table></figure><p>这里是我在MacBook Pro的Chrome v83.0.4103.106(64位)上运行上述代码的结果:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">set:</span>      <span class="number">23.</span><span class="string">051025390625ms</span></span><br><span class="line"><span class="attr">filter:</span> <span class="number">1004.</span><span class="string">9609375ms</span></span><br><span class="line"><span class="attr">forEach:</span> <span class="number">471.</span><span class="string">6630859375ms</span></span><br><span class="line"><span class="attr">reduce:</span>  <span class="number">472.</span><span class="string">902099609375ms</span></span><br></pre></td></tr></table></figure><p>我们看到 <code>ES6 Set</code>对象是一个明显的赢家，后面跟着<code>forEach</code>循环。强烈建议使用<code>ES6 Set</code>从数组中删除重复项，因为它的语法简洁，性能也很好。</p><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/how-to-remove-array-duplicates-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-remove-array-duplicates-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不畏惧失败是创造力的一个基本要素。——&amp;lt;艾尔文·兰德博士&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javasc
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中对数组进行排序</title>
    <link href="https://cl9000.github.io/2020/06/19/JavaScript%E4%B8%AD%E5%AF%B9%E6%95%B0%E7%BB%84%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/"/>
    <id>https://cl9000.github.io/2020/06/19/JavaScript%E4%B8%AD%E5%AF%B9%E6%95%B0%E7%BB%84%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</id>
    <published>2020-06-19T10:39:53.000Z</published>
    <updated>2021-04-26T10:47:35.533Z</updated>
    
    <content type="html"><![CDATA[<p>每天做一件自己害怕的事。——&lt;埃莉诺·罗斯福&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/how-to-sort-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-sort-array-in-javascript/</a></p></blockquote><p>在本教程中，我们将学习如何使用Array.sort()方法对JavaScript中的数组进行排序。</p><h2><span id="1-字符串数组排序">1. 字符串数组排序</span></h2><p>让我们创建一个字符串数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'mango'</span>, <span class="string">'cherry'</span>, <span class="string">'berries'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'kiwi'</span>];</span><br></pre></td></tr></table></figure><p>我们可以使用以下方法以字母（AZ，AZ）的升序对数组元素进行排序sort()：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits.sort();</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▶ (6) [“apple”, “banana”, “berries”, “cherry”, “kiwi”, “mango”]</p></blockquote><p>我们还可以使用以下方法按字母降序（za，ZA）对数组元素进行排序reverse()：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▶ (6) [“mango”, “kiwi”, “cherry”, “berries”, “banana”, “apple”]</p></blockquote><h2><span id="2-排序编号数组">2. 排序编号数组</span></h2><p>内置 <code>sort()</code>和 <code>reverse()</code>方法按字母顺序对数组元素进行排序，因此在涉及数字数组时，它没有用。幸运的是，<code>sort()</code> 方法将<code>compare</code> 函数作为参数，可以用来覆盖其默认排序行为。</p><p>首先创建比较函数：</p><h4><span id="比较功能">比较功能</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a - b&#125;</span><br></pre></td></tr></table></figure><p>当该sort()方法比较两个值时，它将这些值发送到我们的compare函数，并根据返回的值对这些值进行排序。</p><ul><li>如果结果是否定的，则a排在b之前。</li><li>如果结果是肯定的，则b在a之前排序。</li><li>如果结果为0，则没有任何变化。</li></ul><p>让我们使用带有 <code>compare</code> 函数的数字数组升序排序 <code>sort()</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;<span class="keyword">return</span> a - b&#125;);     <span class="comment">//ascending</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▶ (9) [1, 2, 3, 4, 5, 6, 7, 8, 9]</p></blockquote><p>我们需要扭转从减法（A - B）以（B - A）的比较功能，如果我们想在分类编号递减顺序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;<span class="keyword">return</span> b - a&#125;);    <span class="comment">//descending</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▶ (9) [9, 8, 7, 6, 5, 4, 3, 2, 1]</p></blockquote><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/how-to-sort-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-sort-array-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每天做一件自己害怕的事。——&amp;lt;埃莉诺·罗斯福&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javascript/h
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中数组克隆</title>
    <link href="https://cl9000.github.io/2020/06/19/JavaScript%E4%B8%AD%E6%95%B0%E7%BB%84%E5%85%8B%E9%9A%86/"/>
    <id>https://cl9000.github.io/2020/06/19/JavaScript%E4%B8%AD%E6%95%B0%E7%BB%84%E5%85%8B%E9%9A%86/</id>
    <published>2020-06-19T09:02:55.000Z</published>
    <updated>2021-04-27T09:18:38.904Z</updated>
    
    <content type="html"><![CDATA[<p>万物皆有其美，但并非人人都能发现。——&lt;安迪.沃霍尔&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/how-to-clone-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-clone-array-in-javascript/</a></p></blockquote><p>在本教程中，我们将学习如何在 <code>JavaScript</code> 中克隆一个数组，并学习数组的 <strong>浅拷贝</strong> 和 <strong>深拷贝</strong> 之间的区别。</p><p>以下是克隆数组的不同方法的快速视图:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Shallow Copy */</span></span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. ES6 Spread Operator</span></span><br><span class="line">[...fruits];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Array.slice</span></span><br><span class="line">fruits.slice();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Array.from</span></span><br><span class="line"><span class="built_in">Array</span>.from(fruits);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Deep Copy */</span></span><br><span class="line"><span class="keyword">const</span> grocery = [[<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>], </span><br><span class="line">        [<span class="string">'onion'</span>, <span class="string">'potato'</span>, <span class="string">'tomato'</span>], </span><br><span class="line">        [<span class="string">'milk'</span>, <span class="string">'juice'</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. JSON.stringify &amp; JSON.parse</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(grocery));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. map</span></span><br><span class="line">grocery.map(<span class="function"><span class="params">element</span> =&gt;</span> [...element]);</span><br></pre></td></tr></table></figure><h2><span id="1-浅拷贝">1. 浅拷贝</span></h2><p>我们将研究在 <code>JavaScript</code> 中创建数组的 <strong>浅拷贝</strong> 的各种方法。<strong>浅拷贝</strong> 意味着第一层被复制，而深层被 <strong>引用</strong>。</p><p>当你处理一维数组时，<strong>浅拷贝</strong> 就足够好了。让我们看看使用浅拷贝复制数组的不同方法:</p><h3><span id="11-es6-扩展运算符">1.1 ES6 扩展运算符</span></h3><p>如果您已开始使用 <code>ES6</code>，则建议使用 **扩展运算符(…)**在 <code>JavaScript</code> 中克隆一个数组。简短的语法非常方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"><span class="keyword">const</span> cloneFruits = [...fruits];</span><br><span class="line"><span class="comment">// ['apple', 'banana', 'mango']</span></span><br></pre></td></tr></table></figure><h3><span id="12-arrayslice">1.2 Array.slice（）</span></h3><p>如果您仍在使用旧方法，则 <code>Array.slice</code> 可以用来克隆数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"><span class="keyword">const</span> cloneFruits = fruits.slice();</span><br><span class="line"><span class="comment">// ['apple', 'banana', 'mango']</span></span><br></pre></td></tr></table></figure><h3><span id="13-arrayfrom">1.3 Array.from（）</span></h3><p>我们还可以使用 <code>Array.from</code> 方法克隆一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"><span class="keyword">const</span> cloneFruits = <span class="built_in">Array</span>.from(fruits);</span><br><span class="line"><span class="comment">// ['apple', 'banana', 'mango']</span></span><br></pre></td></tr></table></figure><h2><span id="浅拷贝问题">浅拷贝问题</span></h2><p>让我们看一下浅拷贝在多维（嵌套）数组中的行为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits  = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"><span class="keyword">const</span> veggies = [<span class="string">'onion'</span>, <span class="string">'potato'</span>, <span class="string">'tomato'</span>];</span><br><span class="line"><span class="keyword">const</span> liquids = [<span class="string">'milk'</span>, <span class="string">'juice'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> grocery = [fruits, veggies, liquids];</span><br><span class="line"><span class="keyword">const</span> groceryCopy = [...grocery];</span><br><span class="line"></span><br><span class="line">grocery[<span class="number">2</span>].push(<span class="string">'beer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(grocery);</span><br><span class="line"><span class="built_in">console</span>.log(groceryCopy);</span><br><span class="line"><span class="comment">// (3) [['apple', 'banana', 'mango'], ['onion', 'potato', 'tomato'], ['milk', 'juice', 'beer']]</span></span><br><span class="line"><span class="comment">// (3) [['apple', 'banana', 'mango'], ['onion', 'potato', 'tomato'], ['milk', 'juice', 'beer']]</span></span><br><span class="line"><span class="comment">// They've both been changed because they share references</span></span><br></pre></td></tr></table></figure><p>我们看到 <code>Array</code>及其浅表副本都已更改，因为它们共享了引用。请记住，更浅层次的副本引用了更深层次的内容。</p><h2><span id="3-深拷贝">3. 深拷贝</span></h2><p>我们可以使用 <strong>深拷贝</strong> 来解决多维（嵌套）数组的浅层复制产生的问题。让我们看一下使用深拷贝克隆数组的不同方法：</p><h3><span id="31-jsonstringify和jsonparse">3.1 JSON.stringify（）和JSON.parse（）</span></h3><p>我们可以利用 <code>JSON.stringify</code> 和 <code>JSON.parse</code> 的结合，实现数组的 <strong>深拷贝</strong></p><ul><li><code>JSON.stringify</code> 将一个对象变成一个字符串。<br>— <code>JSON.parse</code> 将字符串转换为对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits  = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"><span class="keyword">const</span> veggies = [<span class="string">'onion'</span>, <span class="string">'potato'</span>, <span class="string">'tomato'</span>];</span><br><span class="line"><span class="keyword">const</span> liquids = [<span class="string">'milk'</span>, <span class="string">'juice'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> grocery = [fruits, veggies, liquids];</span><br><span class="line"><span class="keyword">const</span> groceryCopy = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(grocery));</span><br><span class="line"></span><br><span class="line">grocery[<span class="number">2</span>].push(<span class="string">'beer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(grocery);</span><br><span class="line"><span class="built_in">console</span>.log(groceryCopy);</span><br><span class="line"><span class="comment">// (3) [['apple', 'banana', 'mango'], ['onion', 'potato', 'tomato'], ['milk', 'juice', 'beer']]</span></span><br><span class="line"><span class="comment">// (3) [['apple', 'banana', 'mango'], ['onion', 'potato', 'tomato'], ['milk', 'juice']]</span></span><br><span class="line"><span class="comment">// These two arrays are completely separate!</span></span><br></pre></td></tr></table></figure><h3><span id="32-arraymap">3.2 Array.map ()</span></h3><p>您还可以通过迭代和使用 <code>Array.map</code> 在更深层次上创建多维(嵌套)数组的深层副本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits  = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"><span class="keyword">const</span> veggies = [<span class="string">'onion'</span>, <span class="string">'potato'</span>, <span class="string">'tomato'</span>];</span><br><span class="line"><span class="keyword">const</span> liquids = [<span class="string">'milk'</span>, <span class="string">'juice'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> grocery = [fruits, veggies, liquids];</span><br><span class="line"><span class="keyword">const</span> groceryCopy = grocery.map(<span class="function"><span class="params">element</span> =&gt;</span> [...element]);</span><br><span class="line"></span><br><span class="line">grocery[<span class="number">2</span>].push(<span class="string">'beer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(grocery);</span><br><span class="line"><span class="built_in">console</span>.log(groceryCopy);</span><br><span class="line"><span class="comment">// (3) [['apple', 'banana', 'mango'], ['onion', 'potato', 'tomato'], ['milk', 'juice', 'beer']]</span></span><br><span class="line"><span class="comment">// (3) [['apple', 'banana', 'mango'], ['onion', 'potato', 'tomato'], ['milk', 'juice']]</span></span><br><span class="line"><span class="comment">// These two arrays are completely separate!</span></span><br></pre></td></tr></table></figure><p>请注意，上面的示例对二维数组进行了深拷贝。如果 <code>Array</code> 具有更多的嵌套级别，则需要进行更深的迭代。</p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/how-to-clone-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-clone-array-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;万物皆有其美，但并非人人都能发现。——&amp;lt;安迪.沃霍尔&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javascri
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的 Console-API</title>
    <link href="https://cl9000.github.io/2020/06/17/JavaScript%E4%B8%AD%E7%9A%84console-API/"/>
    <id>https://cl9000.github.io/2020/06/17/JavaScript%E4%B8%AD%E7%9A%84console-API/</id>
    <published>2020-06-17T09:47:21.000Z</published>
    <updated>2021-04-25T10:20:33.601Z</updated>
    
    <content type="html"><![CDATA[<p>达到完美境界并不是无以复加，而是无可去除。——&lt;安托万·德·圣·埃克苏佩里&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/console-api-walkthrough/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/console-api-walkthrough/</a></p></blockquote><p>在本文中，我们将通过一些简单的例子演示 <code>JavaScript</code> 的 <code>Console API</code> 方法</p><h2><span id="1-consolelog">1. console.log</span></h2><p><code>console.log</code> 是将值记录到控制台的最常用方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Console!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello,'</span>, name);    <span class="comment">//hello, Console!</span></span><br></pre></td></tr></table></figure><p>我们还可以使用 <code>String Template Literal</code>（使用 <code>${}</code> 包裹 变量值）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello, <span class="subst">$&#123;name&#125;</span>`</span>);  <span class="comment">//hello, Console!</span></span><br></pre></td></tr></table></figure><p>我们还可以在单​​个语句中将多个值记录到控制台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">'value'</span>;</span><br><span class="line"><span class="keyword">const</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>];</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'key:'</span>, name, <span class="string">'number:'</span>, number, <span class="string">'fruits:'</span>, fruits, <span class="string">'obj:'</span>, obj);</span><br></pre></td></tr></table></figure><blockquote><p>key: Console! number: 1 fruits: (3) [“apple”, “banana”, “mango”] obj: {a: 1, b: 2}</p></blockquote><p>就像一样console.log，我们还有其他方法可以将值记录到控制台：</p><ul><li><code>console.debug</code> 就像带有“调试”日志级别的 <code>console.log</code> 一样。通常，浏览器的默认日志级别为 <code>info</code>，直到您将日志级别更改为 <code>debug</code>才会显示。</li><li><code>console.info</code> 就像 <code>console.log</code> 具有<code>“ info”</code>日志级别</li><li><code>console.warn</code> 将警告打印到控制台</li><li><code>console.error</code> 将对象作为错误打印到控制台，并包括堆栈跟踪</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.debug(<span class="string">'Let me find you'</span>);  <span class="comment">//won't be displayed</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'Just FYI'</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'I told you !'</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'I cannot do it.'</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Just FYI</strong><br><span style="background:yellow">➤ ⚠️ I told you !</span><br><span style="color:red">➤ ⓧ I cannot do it.</span></p></blockquote><h2><span id="2-consoleassert">2. console.assert</span></h2><p>您可以使用进行一些断言测试 <code>console.assert</code>。</p><p>第一个参数是一个表达式，如果计算结果为false，则断言失败，第二个参数作为错误输出到控制台。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this will pass, nothing will be logged</span></span><br><span class="line"><span class="built_in">console</span>.assert(<span class="number">2</span> == <span class="string">'2'</span>, <span class="string">'2 not == to "2"'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this fails, '3 not === to "3"' will be logged</span></span><br><span class="line"><span class="built_in">console</span>.assert(<span class="number">3</span> === <span class="string">'3'</span>, <span class="string">'3 not === to "3"'</span>);</span><br></pre></td></tr></table></figure><blockquote><p><span style="color:red">➤ ⓧ Assertion failed: 3 not === to “3”</span></p></blockquote><p>您还可以在断言失败时输出的第二个参数中传递一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> reason = <span class="string">'x is expected to be less than y'</span>;</span><br><span class="line"><span class="built_in">console</span>.assert(x &lt; y, &#123;x, y, reason&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br><span style="color:red">➤ ⓧ Assertion failed:</span>  ➤ {x: 5, y: 3, reason: “x is expected to be less than y”}</p></blockquote><h2><span id="3-consoleclear">3. console.clear</span></h2><p>您可以使用 <code>console.clear</code> 以下命令清除控制台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.clear();</span><br></pre></td></tr></table></figure><h2><span id="4-consolecount">4. console.count</span></h2><p><code>console.count</code>方法用于计算使用相同提供的标签调用它的次数。例如，这里有两个计数器，一个用于偶数，一个用于奇数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].forEach(<span class="function"><span class="params">nb</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (nb % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.count(<span class="string">'even'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.count(<span class="string">'odd'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>odd: 1<br>even: 1<br>odd: 2<br>even: 2<br>odd: 3</p></blockquote><p>console.countReset如果我们在上面的示例之后执行以下操作，则该方法用于将计数器重置为1，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.countReset(<span class="string">'even'</span>);</span><br><span class="line"><span class="built_in">console</span>.countReset(<span class="string">'odd'</span>);</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'even'</span>);</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'odd'</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>even: 1<br>odd: 1</p></blockquote><h2><span id="5-consoledir">5. console.dir</span></h2><p>您可以使用以下命令以格式化的方式打印对象的所有内部属性 console.dir</p><p>我们可以打印的原型方法数组或对象使用console.dir，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir([<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"qux"</span>]);  <span class="comment">//Array</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(&#123;<span class="attr">a</span>: <span class="string">"foo"</span>, <span class="attr">b</span>: <span class="string">"bar"</span>&#125;);   <span class="comment">//Object</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ Array(3)<br>0: &quot;foo&quot;<br>1: &quot;bar&quot;<br>2: &quot;qux&quot;<br>length: 3<br>▼ <strong>proto</strong>: Array(0)<br>➤ concat: ƒ concat()<br>➤ constructor: ƒ Array()<br>➤ …<br>▼ Object<br>a: &quot;foo&quot;<br>b: &quot;bar&quot;<br>➤ <strong>proto</strong>: Object</p></blockquote><p>我们也可以将功能的范围和封闭使用打印console.dir，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outerFunc  = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> innerFunc = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> innerFunc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.dir(outerFunc(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ ƒ innerFunc(d)<br>arguments: null<br>caller: null<br>length: 1<br>name: &quot;innerFunc&quot;<br>➤ prototype: {constructor: ƒ}<br>➤ <strong>proto</strong>: ƒ ()<br>▼ [[[Scopes]]: Scopes[2]<br>➤ 0: Closure (outerFunc) {c: 3, a: 1}<br>➤ 1: Global {parent: Window, opener: null, top: Window, length: 1, frames: Window, …}</p></blockquote><h2><span id="6-consoledirxml">6. console.dirxml</span></h2><p>您可以使用树状结构以HTML格式打印DOM元素 console.dirxml</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dirxml(<span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br><code>▼ &lt;body&gt;</code><br><code>&lt;h1&gt;hello&lt;/h1&gt;</code><br><code>&lt;script&gt;</code><br><code>console.dirxml(document.body);</code><br><code>&lt;/script&gt;</code><br><code>&lt;/body&gt;</code></p></blockquote><h2><span id="7-consolegroup">7. console.group</span></h2><p>您可以使用console.group和将日志消息分组在一起console.groupEnd。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">"API Details"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Scheme : HTTPS"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Host   : example.com"</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ API Details<br>Scheme : HTTPS<br>Host   : <a href="http://example.com" target="_blank" rel="noopener">example.com</a></p></blockquote><p>请注意，使用记录的组消息console.group最初已扩展。如果您希望默认情况下将它们折叠起来，则可以console.groupCollapsed改用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.groupCollapsed(<span class="string">"API Details"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Scheme : HTTPS"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Host   : example.com"</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▶ API Details</p></blockquote><p>您可以进一步将消息分组到嵌套级别。这样，您就可以以干净的格式将层次结构数据打印到控制台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">"API Details"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Scheme : HTTPS"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Host   : example.com"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// nesting</span></span><br><span class="line">  <span class="built_in">console</span>.group(<span class="string">"User API"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Method   : GET"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Endpoint : /user"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// further nesting</span></span><br><span class="line">    <span class="built_in">console</span>.group(<span class="string">"Query Parameters"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"id : 1"</span>);</span><br><span class="line">    <span class="built_in">console</span>.groupEnd();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.groupEnd();</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▼ API Details<br>Scheme : HTTPS<br>Host   : <code>example.com</code><br>▼ User API<br>Method   : GET<br>Endpoint : /user<br>▼ Query Parameters<br>id : 1</p></blockquote><h2><span id="8-consoletable">8. console.table</span></h2><p>您可以使用以表格格式打印数据 <code>console.table</code> 。该方法对于可视化大型对象和数组非常有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> john  = &#123; <span class="attr">firstName</span>: <span class="string">"John"</span>,  <span class="attr">lastName</span>: <span class="string">"Smith"</span>, <span class="attr">age</span>: <span class="number">41</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> jane  = &#123; <span class="attr">firstName</span>: <span class="string">"Jane"</span>,  <span class="attr">lastName</span>: <span class="string">"Doe"</span>,   <span class="attr">age</span>: <span class="number">38</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> emily = &#123; <span class="attr">firstName</span>: <span class="string">"Emily"</span>, <span class="attr">lastName</span>: <span class="string">"Jones"</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table([john, jane, emily]);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌─────────┬───────────┬──────────┬─────┐</span><br><span class="line">│ (index) │ firstName │ lastName │ age │</span><br><span class="line">├─────────┼───────────┼──────────┼─────┤</span><br><span class="line">│    <span class="number">0</span>    │  <span class="string">'John'</span>   │ <span class="string">'Smith'</span>  │ <span class="number">41</span>  │</span><br><span class="line">│    <span class="number">1</span>    │  <span class="string">'Jane'</span>   │  <span class="string">'Doe'</span>   │ <span class="number">38</span>  │</span><br><span class="line">│    <span class="number">2</span>    │  <span class="string">'Emily'</span>  │ <span class="string">'Jones'</span>  │ <span class="number">12</span>  │</span><br><span class="line">└─────────┴───────────┴──────────┴─────┘</span><br><span class="line">▶ <span class="built_in">Array</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>您还可以选择以这种方式处理大型对象时仅打印少量属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.table([john, jane, emily], [<span class="string">"firstName"</span>]);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌─────────┬───────────┐</span><br><span class="line">│ (index) │ firstName │</span><br><span class="line">├─────────┼───────────┤</span><br><span class="line">│    <span class="number">0</span>    │  <span class="string">'John'</span>   │</span><br><span class="line">│    <span class="number">1</span>    │  <span class="string">'Jane'</span>   │</span><br><span class="line">│    <span class="number">2</span>    │  <span class="string">'Emily'</span>  │</span><br><span class="line">└─────────┴───────────┘</span><br><span class="line">▶ <span class="built_in">Array</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2><span id="9-consoletime">9. console.time</span></h2><p>您可以通过以 <code>console.time</code> 开头 和 以 <code>console.timeEnd</code> 结束来打印代码执行所花费的时间。</p><p>计时器可以有一个可选标签，如果您使用带标签的计时器，则两者 <code>console.time</code> 和 <code>console.timeEnd</code> 标签应具有相同的标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'fetching data'</span>);</span><br><span class="line">fetch(<span class="string">'https://jsonplaceholder.typicode.com/users'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">d</span> =&gt;</span> d.json())</span><br><span class="line">  .then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'fetching data'</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>fetching data: 0.435791015625ms<br>▶ (10) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]</p></blockquote><h2><span id="10-consoletrace">10. console.trace</span></h2><p>您可以用来 <code>console.trace()</code> 将方法执行流的堆栈跟踪打印到控制台。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> first = <span class="function"><span class="params">()</span> =&gt;</span> &#123; second(); &#125;;</span><br><span class="line"><span class="keyword">const</span> second = <span class="function"><span class="params">()</span> =&gt;</span> &#123; third(); &#125;;</span><br><span class="line"><span class="keyword">const</span> third = <span class="function"><span class="params">()</span> =&gt;</span> &#123; fourth(); &#125;;</span><br><span class="line"><span class="keyword">const</span> fourth = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.trace(<span class="string">"The trace"</span>); &#125;;</span><br><span class="line">first();</span><br></pre></td></tr></table></figure><p>您将获得控制台输出，可以单击以导航到源。<code>@ file_name:line_number</code></p><blockquote><p><strong>Output</strong><br>▼ The trace<br>fourth        @ test:4<br>third        @ test:3<br>second        @ test:2<br>first        @ test:1<br>(anonymous)   @ test:5</p></blockquote><h2><span id="11-consolelog格式">11. console.log格式</span></h2><p><code>console.log</code> 还提供了格式设置，以使我们的日志消息在其他消息中脱颖而出。这使我们能够在控制台中找到重要消息。</p><ul><li><code>%s</code>  将值格式化为字符串</li><li><code>%d</code> 或 <code>%i</code> 将值格式化为整数</li><li><code>%f</code>  将值格式化为浮点数</li><li><code>%o</code>  用于打印为可扩展的 <code>DOM</code> 元素</li><li><code>%O</code>  用于打印为 <code>JavaScript</code> 对象</li><li><code>%c</code>  用于将 <code>CSS</code> 样式规则应用于第二个参数指定的输出字符串</li></ul><p>我们将值格式化为字符串，整数和浮点数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'The %s is turning %d in next %f months'</span>, <span class="string">'kid'</span>, <span class="number">18</span>, <span class="number">2.5</span>);</span><br><span class="line"><span class="comment">//The kid is turning 18 in next 2.5 months</span></span><br></pre></td></tr></table></figure><p>让我们看看将DOM打印为可扩展HTML元素树或JSON对象树有什么大惊小怪的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'%o'</span>, <span class="built_in">document</span>.body);   <span class="comment">//Print HTML element tree</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%O'</span>, <span class="built_in">document</span>.body);   <span class="comment">//Print JSON object tree</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>▶ <code>&lt;body class=&quot;body&quot; data-gr-c-s-loaded=&quot;true&quot;&gt; ... &lt;body&gt;</code><br>▶ <code>body.body</code></p></blockquote><p>您可以像这样打印彩色格式化的日志消息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> red = <span class="string">'color:red'</span>;</span><br><span class="line"><span class="keyword">const</span> orange = <span class="string">'color:orange'</span>;</span><br><span class="line"><span class="keyword">const</span> green = <span class="string">'color:green'</span>;</span><br><span class="line"><span class="keyword">const</span> blue = <span class="string">'color:blue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%cHello %cWorld %cfoo %cbar'</span>, red, orange, green, blue);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br><span style="color:red">Hello</span> <span style="color:orange">World</span> <span style="color:green">foo</span> <span style="color:blue">bar</span></p></blockquote><p>还可以使用多个样式属性将时尚的横幅打印到控制台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line"><span class="string">'%cThanks for reading %cCodingNConcepts :)'</span>,</span><br><span class="line"><span class="string">'color: #000; font-weight: bold; font-size: 1.5rem; border: 1px solid black; padding: 5px; margin-right: 5px;'</span>,</span><br><span class="line"><span class="string">'color: #e22d30; font-weight: bold; font-size: 2rem; text-shadow: 0 0 5px rgba(0,0,0,0.2);'</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/console-api-walkthrough/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/console-api-walkthrough/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console_API" target="_blank" rel="noopener">MDN Web Docs - Console_API https://developer.mozilla.org/zh-CN/docs/Web/API/Console_API</a></li></ul><p>…</p><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;达到完美境界并不是无以复加，而是无可去除。——&amp;lt;安托万·德·圣·埃克苏佩里&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.c
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的 console.table（）</title>
    <link href="https://cl9000.github.io/2020/06/07/JavaScript%E4%B8%AD%E7%9A%84console-table()/"/>
    <id>https://cl9000.github.io/2020/06/07/JavaScript%E4%B8%AD%E7%9A%84console-table()/</id>
    <published>2020-06-07T09:26:34.000Z</published>
    <updated>2021-04-26T10:46:21.078Z</updated>
    
    <content type="html"><![CDATA[<p>不畏惧失败是创造力的一个基本要素。——&lt;艾尔文·兰德博士&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/console-table-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/console-table-javascript/</a></p></blockquote><p>在本教程中，我们将学习如何使用 <code>console.table（）</code> 高级日志记录方法在控制台中以表格格式显示数据。这对于在 <code>JavaScript</code> 中可视化复杂的数组和对象非常方便。</p><h2><span id="consoletable">console.table([])</span></h2><p>我们同时使用 <code>console.log()</code> 和 <code>console.table()</code> 记录数字数组，以查看 <code>console.table()</code> 如何很好地打印了一个表来显示数字数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br><span class="line"><span class="built_in">console</span>.table(numbers);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span> ]</span><br><span class="line">┌─────────┬─────────┐</span><br><span class="line">│ (index) │ Values  │</span><br><span class="line">├─────────┼─────────┤</span><br><span class="line">│    <span class="number">0</span>    │  <span class="string">'one'</span>  │</span><br><span class="line">│    <span class="number">1</span>    │  <span class="string">'two'</span>  │</span><br><span class="line">│    <span class="number">2</span>    │ <span class="string">'three'</span> │</span><br><span class="line">└─────────┴─────────┘</span><br></pre></td></tr></table></figure><h2><span id="consoletable">console.table([ [], [], [] ])</span></h2><p>与 <code>console.log()</code> 方法相比，使用 <code>console.table()</code> 打印 <strong>数组的数组</strong> 时，表格格式的可视化更加方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [[<span class="string">"one"</span>, <span class="string">"1"</span>, <span class="string">"I"</span>], [<span class="string">"two"</span>, <span class="string">"2"</span>, <span class="string">"II"</span>], [<span class="string">"three"</span>, <span class="string">"2"</span>, <span class="string">"III"</span>]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br><span class="line"><span class="built_in">console</span>.table(numbers);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[ [ <span class="string">'one'</span>, <span class="string">'1'</span>, <span class="string">'I'</span> ],</span><br><span class="line">  [ <span class="string">'two'</span>, <span class="string">'2'</span>, <span class="string">'II'</span> ],</span><br><span class="line">  [ <span class="string">'three'</span>, <span class="string">'3'</span>, <span class="string">'III'</span> ] ]</span><br><span class="line">┌─────────┬─────────┬─────┬───────┐</span><br><span class="line">│ (index) │    <span class="number">0</span>    │  <span class="number">1</span>  │   <span class="number">2</span>   │</span><br><span class="line">├─────────┼─────────┼─────┼───────┤</span><br><span class="line">│    <span class="number">0</span>    │  <span class="string">'one'</span>  │ <span class="string">'1'</span> │  <span class="string">'I'</span>  │</span><br><span class="line">│    <span class="number">1</span>    │  <span class="string">'two'</span>  │ <span class="string">'2'</span> │ <span class="string">'II'</span>  │</span><br><span class="line">│    <span class="number">2</span>    │ <span class="string">'three'</span> │ <span class="string">'3'</span> │ <span class="string">'III'</span> │</span><br><span class="line">└─────────┴─────────┴─────┴───────┘</span><br></pre></td></tr></table></figure><h2><span id="consoletableobject">console.table(Object)</span></h2><p>与数组类似，<strong>对象(Objects)</strong> 可以使用 <code>console.table()</code> 打印，以表格格式显示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Smith"</span>, <span class="number">41</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(john);</span><br><span class="line"><span class="built_in">console</span>.table(john);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person &#123; <span class="attr">firstName</span>: <span class="string">'John'</span>, <span class="attr">lastName</span>: <span class="string">'Smith'</span>, <span class="attr">age</span>: <span class="number">41</span> &#125;</span><br><span class="line">┌───────────┬─────────┐</span><br><span class="line">│  (index)  │ Values  │</span><br><span class="line">├───────────┼─────────┤</span><br><span class="line">│ firstName │ <span class="string">'John'</span>  │</span><br><span class="line">│ lastName  │ <span class="string">'Smith'</span> │</span><br><span class="line">│    age    │   <span class="number">41</span>    │</span><br><span class="line">└───────────┴─────────┘</span><br></pre></td></tr></table></figure><h2><span id="consoletableobjects">console.table(Objects[])</span></h2><p>与 <code>console.log()</code> 方法相比，使用 <code>console.table()</code> 打印对象数组时，表格格式的可视化更加方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Smith"</span>, <span class="number">41</span>);</span><br><span class="line"><span class="keyword">var</span> jane = <span class="keyword">new</span> Person(<span class="string">"Jane"</span>, <span class="string">"Doe"</span>, <span class="number">38</span>);</span><br><span class="line"><span class="keyword">var</span> emily = <span class="keyword">new</span> Person(<span class="string">"Emily"</span>, <span class="string">"Jones"</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([john, jane, emily]);</span><br><span class="line"><span class="built_in">console</span>.table([john, jane, emily]);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[ Person &#123; <span class="attr">firstName</span>: <span class="string">'John'</span>, <span class="attr">lastName</span>: <span class="string">'Smith'</span>, <span class="attr">age</span>: <span class="number">41</span> &#125;,</span><br><span class="line">  Person &#123; <span class="attr">firstName</span>: <span class="string">'Jane'</span>, <span class="attr">lastName</span>: <span class="string">'Doe'</span>, <span class="attr">age</span>: <span class="number">38</span> &#125;,</span><br><span class="line">  Person &#123; <span class="attr">firstName</span>: <span class="string">'Emily'</span>, <span class="attr">lastName</span>: <span class="string">'Jones'</span>, <span class="attr">age</span>: <span class="number">12</span> &#125; ]</span><br><span class="line">┌─────────┬───────────┬──────────┬─────┐</span><br><span class="line">│ (index) │ firstName │ lastName │ age │</span><br><span class="line">├─────────┼───────────┼──────────┼─────┤</span><br><span class="line">│    <span class="number">0</span>    │  <span class="string">'John'</span>   │ <span class="string">'Smith'</span>  │ <span class="number">41</span>  │</span><br><span class="line">│    <span class="number">1</span>    │  <span class="string">'Jane'</span>   │  <span class="string">'Doe'</span>   │ <span class="number">38</span>  │</span><br><span class="line">│    <span class="number">2</span>    │  <span class="string">'Emily'</span>  │ <span class="string">'Jones'</span>  │ <span class="number">12</span>  │</span><br><span class="line">└─────────┴───────────┴──────────┴─────┘</span><br></pre></td></tr></table></figure><h3><span id="限制列显示">限制列显示</span></h3><p>您可以将第二个参数作为要显示的字段数组传递。只有那些列将以表格格式显示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.table([john, jane, emily], [<span class="string">"firstName"</span>]);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌─────────┬───────────┐</span><br><span class="line">│ (index) │ firstName │</span><br><span class="line">├─────────┼───────────┤</span><br><span class="line">│    <span class="number">0</span>    │  <span class="string">'John'</span>   │</span><br><span class="line">│    <span class="number">1</span>    │  <span class="string">'Jane'</span>   │</span><br><span class="line">│    <span class="number">2</span>    │  <span class="string">'Emily'</span>  │</span><br><span class="line">└─────────┴───────────┘</span><br></pre></td></tr></table></figure><h2><span id="consoletableobject-of-objects">console.table(Object of Objects)</span></h2><p>使用 <code>console.table()</code> 很容易 <strong>可视化</strong> 复杂的嵌套对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">family.mother = <span class="keyword">new</span> Person(<span class="string">"Jane"</span>, <span class="string">"Smith"</span>, <span class="number">38</span>);</span><br><span class="line">family.father = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Smith"</span>, <span class="number">41</span>);</span><br><span class="line">family.daughter = <span class="keyword">new</span> Person(<span class="string">"Emily"</span>, <span class="string">"Smith"</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(family);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──────────┬───────────┬──────────┬─────┐</span><br><span class="line">│ (index)  │ firstName │ lastName │ age │</span><br><span class="line">├──────────┼───────────┼──────────┼─────┤</span><br><span class="line">│  mother  │  <span class="string">'Jane'</span>   │ <span class="string">'Smith'</span>  │ <span class="number">38</span>  │</span><br><span class="line">│  father  │  <span class="string">'John'</span>   │ <span class="string">'Smith'</span>  │ <span class="number">41</span>  │</span><br><span class="line">│ daughter │  <span class="string">'Emily'</span>  │ <span class="string">'Smith'</span>  │ <span class="number">12</span>  │</span><br><span class="line">└──────────┴───────────┴──────────┴─────┘</span><br></pre></td></tr></table></figure><h3><span id="显示列排序-sort-column-display">显示列排序 Sort Column Display</span></h3><p>还要注意，当这些表格格式在浏览器控制台中呈现时。您可以单击表列标题来按列排序。</p><blockquote><p><strong>Output</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──────────┬─────────────┬──────────┬─────┐</span><br><span class="line">│ (index)  │ firstName ▲ │ lastName │ age │</span><br><span class="line">├──────────┼─────────────┼──────────┼─────┤</span><br><span class="line">│ daughter │  <span class="string">'Emily'</span>    │ <span class="string">'Smith'</span>  │ <span class="number">12</span>  │</span><br><span class="line">│  mother  │  <span class="string">'Jane'</span>     │ <span class="string">'Smith'</span>  │ <span class="number">38</span>  │</span><br><span class="line">│  father  │  <span class="string">'John'</span>     │ <span class="string">'Smith'</span>  │ <span class="number">41</span>  │</span><br><span class="line">└──────────┴─────────────┴──────────┴─────┘</span><br></pre></td></tr></table></figure><h3><span id="限制列显示-restrict-column-display">限制列显示 Restrict Column Display</span></h3><p>同样，将第二个参数作为要显示的字段数组传递。只有那些列将以表格格式显示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.table(family, [<span class="string">"firstName"</span>, <span class="string">"age"</span>]);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──────────┬───────────┬─────┐</span><br><span class="line">│ (index)  │ firstName │ age │</span><br><span class="line">├──────────┼───────────┼─────┤</span><br><span class="line">│  mother  │  <span class="string">'Jane'</span>   │ <span class="number">38</span>  │</span><br><span class="line">│  father  │  <span class="string">'John'</span>   │ <span class="number">41</span>  │</span><br><span class="line">│ daughter │  <span class="string">'Emily'</span>  │ <span class="number">12</span>  │</span><br><span class="line">└──────────┴───────────┴─────┘</span><br></pre></td></tr></table></figure><h2><span id="总结">总结</span></h2><p>在本教程中，我们了解了 <code>console.table()</code> 如何有助于以表格格式可视化复杂数组和对象，以及如何提供对列进行排序和限制列显示的功能。</p><p>所有现代浏览器都支持这种高级日志记录方法，如 <code>chrome、edge、firefox、opera</code> 和<code>safari</code>。</p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/console-table-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/console-table-javascript/</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Console/table" target="_blank" rel="noopener">MDN web docs - https://developer.mozilla.org/en-US/docs/Web/API/Console/table</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不畏惧失败是创造力的一个基本要素。——&amp;lt;艾尔文·兰德博士&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/javasc
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>虚拟DOM（Virtual Dom） VS 影子DOM（Shadow Dom）</title>
    <link href="https://cl9000.github.io/2020/05/27/%E8%99%9A%E6%8B%9FDOMVS%E5%BD%B1%E5%AD%90DOM/"/>
    <id>https://cl9000.github.io/2020/05/27/%E8%99%9A%E6%8B%9FDOMVS%E5%BD%B1%E5%AD%90DOM/</id>
    <published>2020-05-27T06:03:31.000Z</published>
    <updated>2021-04-15T06:47:21.176Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&lt;爱因斯坦&gt;</p><blockquote><p>作者：Ashish Lahoti<br><br>译者：cl9000 <br><br>原文：<a href="https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom</a></p></blockquote><h2><span id="dom">DOM</span></h2><p><code>DOM</code>是文档对象模型的简写-这是一种通过对象表示结构化内容的方式。<code>HTML，XHTML，XML</code>是编写结构化内容的一些方法。</p><p>当浏览器呈现HTML页面时，它会在后台编译此<code>HTML</code>并生成<code>DOM</code>对象。可以通过<code>JavaScript</code>和<code>CSS</code>访问和操作此<code>DOM</code>对象，例如，当您单击按钮时，将触发DOM单击事件，JavaScript可以侦听和操作DOM以显示弹出对话框。</p><p>默认情况下，当<code>DOM</code>对象发生任何变化时，浏览器会重新呈现整个页面。这样，<code>DOM</code>的更改在性能方面是昂贵的。</p><p>为了解决这个问题，出现了新的概念。让我们看看它们：</p><h2><span id="虚拟domvirtual-dom">虚拟DOM（Virtual Dom）</span></h2><ul><li><code>虚拟DOM</code>是<code>真实DOM</code>的内存表示形式。</li><li>流行的UI框架<a href="https://reactjs.org/" target="_blank" rel="noopener">React.js</a>和<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a>都使用<code>虚拟DOM</code>。</li><li><code>虚拟DOM</code>的概念主要是为了解决性能问题，方法如下：<ul><li><code>DOM</code>中的任何更新都首先应用于<code>虚拟DOM</code>，而不是直接应用于<code>真实DOM</code>。然后，它通过流程调用差异将更改与<code>真实DOM</code>进行比较，并仅通过重新呈现更改的元素，将更改有效地应用于<code>真实DOM</code>。</li></ul><ul><li>除此之外，它还允许收集要立即应用的多个更改，因此并非每个更改都会导致重新渲染，而是仅在将一组更改从<code>虚拟DOM</code>应用于<code>真实DOM</code>之后才进行一次重新渲染。</li></ul></li></ul><h2><span id="影子domshadow-dom">影子DOM（Shadow Dom）</span></h2><ul><li>您可以将<code>影子DOM</code>视为<code>DOM</code>中的<code>DOM</code>。一个真实的<code>DOM</code>可以有许多<code>影子DOM</code>，但是每个共享<code>DOM</code>都有自己的隔离<code>DOM</code>树，它具有自己的元素和样式，与<code>真实DOM</code>完全隔离。</li><li>大多数浏览器（包括<code>Firefox，Chrome，Opera和Safari</code>）都原生支持<code>Shadow DOM</code>的概念。</li><li>您可以制作遵循<code>Shadow DOM概念</code>的可重用本机<code>Web组件</code>。本机<code>Web组件</code>的实现和样式隐藏在<code>Shadow DOM</code>中，而不受<code>外部DOM</code>的影响。</li><li><a href="https://lit-element.polymer-project.org/" target="_blank" rel="noopener">Polymer LitElement</a> 和 <a href="https://vaadin.com/components" target="_blank" rel="noopener">Vaadin</a>提供使用<code>影子DOM</code>概念构建的开源可重用<code>Web组件</code>。</li></ul><p><code>影子DOM（Shadow DOM）</code>不是一个新概念<br>尽管只是最近才指定供Web作者使用，但是<code>影子DOM</code>已被用户代理使用多年，以创建和设置诸如表单元素之类的复杂组件。让我们以范围输入元素为例。要在页面上创建一个，我们要做的就是添加以下元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"range"</span>&gt;</span><br></pre></td></tr></table></figure><p>这一要素导致以下组成部分：</p><input type="range"><p>如果我们进行更深入的研究，我们将看到该<code>&lt;input&gt;</code>元素实际上是由几个较小的<code>&lt;div&gt;</code>元素组成的，它们控制着轨道和滑块本身。<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/range-input-shadow-dom.png" alt></p><p>这是通过使用<code>影子DOM</code>来实现的。向宿主HTML文档公开的元素简单<code>&lt;input&gt;</code>，但是在其下面有与该组件相关的元素和样式，这些元素和样式不构成<code>DOM</code>全局​​范围的一部分。</p><h3><span id="参考">参考</span></h3><ul><li><p><a href="https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom" target="_blank" rel="noopener">原文 - https://codingnconcepts.com/javascript/virtual-dom-vs-shadow-dom/#shadow-dom</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_shadow_DOM" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_shadow_DOM</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&amp;lt;爱因斯坦&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;&lt;br&gt;
译者：cl9000 &lt;br&gt;&lt;br&gt;
原文：&lt;a href=&quot;https://codingncon
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cl9000.github.io/tags/DOM/"/>
    
      <category term="HTML" scheme="https://cl9000.github.io/tags/HTML/"/>
    
      <category term="Shadow Dom" scheme="https://cl9000.github.io/tags/Shadow-Dom/"/>
    
      <category term="Virtual Dom" scheme="https://cl9000.github.io/tags/Virtual-Dom/"/>
    
  </entry>
  
  <entry>
    <title>使用 JavaScript 解释区块链(Blockchain)</title>
    <link href="https://cl9000.github.io/2020/05/19/JavaScript%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <id>https://cl9000.github.io/2020/05/19/JavaScript%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%8C%BA%E5%9D%97%E9%93%BE/</id>
    <published>2020-05-19T10:36:16.000Z</published>
    <updated>2021-04-20T06:25:15.817Z</updated>
    
    <content type="html"><![CDATA[<p>创造性就是发明、实验、成长、冒险、犯规、犯错和享受乐趣。 ——&lt;玛丽·卢·库克&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/</a></p></blockquote><p>在本文中，我们将学习如何使用 <code>JavaScript</code> 实现区块链。</p><h2><span id="环境条件">环境条件</span></h2><ul><li>下载并安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">NodeJs - https://nodejs.org/zh-cn/</a>来运行我们的区块链代码</li><li>下载并安装用于代码开发的<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code IDE - Visual Studio Code IDE</a></li></ul><p>如果你之前没有 <code>JavaScript</code>、<code>NodeJS</code> 和 <code>VSCode</code> 方面的经验，也不必担心。只要跟随本文，你将学习区块链的基础知识，你可以稍后使用其它任何语言实现。</p><h2><span id="区块链-blockchain">区块链 Blockchain</span></h2><p>区块链只不过是一个数字的、分布式的、不可变的和可信的账本，它可以用来记录从金融交易、政府记录到土地所有权，甚至是购买订单的任何事情。</p><p>每个交易记录都是一个块，按时间顺序连接在一起，形成一个块链。如果你想改变一个特定块中的记录，你不需要重写它。相反，更改被记录在一个新的块中。</p><p>也请阅读<a href="https://codingnconcepts.com/post/blockchain-explained/" target="_blank" rel="noopener">区块链基础知识及其实用用例</a></p><h2><span id="块-block">块 Block</span></h2><p>让我们看看区块链中一个典型的块是由什么组成的</p><ul><li><code>Timestamp（时间戳）</code> 是事务发生时的日期和时间。</li><li><code>Record（记录）</code> 通常包含交易的详细信息，如发送方、接收方、金额等。我们将在我们的程序中使用发送方和接收方的实际名称，但在像 <code>比特币（bitcoin）</code> 这样的实际用例中，实际名称不会被披露，而是使用发送方和接收方的<code>数字签名（digital signature</code>）。</li><li><code>Hash（哈希）</code>是代表区块中交易的数字指纹，是完全唯一的。如果事务细节有任何变化，<code>Hash（哈希）</code>也会发生变化。通常，它是通过对事务细节应用 <code>SHA-256</code> 等加密算法生成的字母数字序列。</li><li><code>Previous Hash</code> 是区块链中前一个块的 <code>Hash</code> 值。这也用于生成块的<code>Hash（哈希）</code>。</li><li><code>Nonce</code> 是<code>“number only use once”</code>的缩写，它是一个添加到区块链块中的数字，再<code>Hash（哈希）</code>后，该数字满足难度级别限制。稍后我们将对此进行更多讨论</li></ul><h2><span id="步骤1创建block-block-js">步骤1:创建Block (Block .js)</span></h2><p>现在我们知道了 块 由什么组成，我们来创建它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SHA256 = <span class="built_in">require</span>(<span class="string">'crypto-js/sha256'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(timestamp, previousHash, record, difficultyLevel) &#123;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">        <span class="keyword">this</span>.record = record;</span><br><span class="line">        <span class="keyword">this</span>.previousHash = previousHash;</span><br><span class="line">        <span class="keyword">const</span> proofOfWork = <span class="keyword">this</span>.proofOfWork(difficultyLevel);</span><br><span class="line">        <span class="keyword">this</span>.hash = proofOfWork.hash;</span><br><span class="line">        <span class="keyword">this</span>.nonce = proofOfWork.nonce;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* Genesis Block */</span></span><br><span class="line">    <span class="keyword">static</span> genesis() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>(<span class="keyword">new</span> <span class="built_in">Date</span>(), </span><br><span class="line">            <span class="string">""</span>,</span><br><span class="line">            <span class="string">"GENESIS"</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Block Mining */</span></span><br><span class="line">    <span class="keyword">static</span> mineBlock(previousBlock, record, difficultyLevel) &#123;</span><br><span class="line">        <span class="keyword">const</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">const</span> previousHash = previousBlock.hash;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Block(timestamp, previousHash, record, difficultyLevel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Generate Hash using SHA256 */</span></span><br><span class="line">    <span class="keyword">static</span> computeHash(message)&#123;</span><br><span class="line">        <span class="keyword">return</span> SHA256(message).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Proof of Work */</span></span><br><span class="line">    proofOfWork(difficultyLevel) &#123;</span><br><span class="line">        <span class="keyword">const</span> message = <span class="keyword">this</span>.timestamp + <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.record) + <span class="keyword">this</span>.previousHash;</span><br><span class="line">        <span class="keyword">if</span>(difficultyLevel)&#123;          </span><br><span class="line">            <span class="keyword">const</span> leadingZeros = <span class="string">"0"</span>.repeat(difficultyLevel);</span><br><span class="line">            <span class="keyword">let</span> nonce = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> hash =  Block.computeHash(message + nonce);</span><br><span class="line">                <span class="keyword">if</span>(hash.substring(<span class="number">0</span>, difficultyLevel) == leadingZeros)&#123;             </span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        hash,</span><br><span class="line">                        nonce</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                nonce++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                hash: Block.computeHash(message),</span><br><span class="line">                nonce: <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Block;</span><br></pre></td></tr></table></figure><p>再来理解几个术语</p><ul><li><code>Genesis Block（创世区块）</code> 是区块链中第一个没有任何交易细节和先前哈希的区块。这通常是在创建区块链时添加的。也被称为 <strong>零块</strong></li><li><code>Difficulty Level （难度等级）</code> 是对块生成哈希值的限制。难度越高，生成哈希所需的时间就越多。</li><li><code>Block Mining（块挖掘）</code> 是将一个新块添加到区块链的过程。谁添加了新的块被称为 <strong>块矿工</strong>，在比特币的情况下也称为<strong>比特币矿工</strong>。任何人都可以注册他们的电脑成为 <strong>比特币矿工</strong> 之一，以像比特币这样的公开区块链。所有的 <strong>比特币矿工</strong> 在比特币网络得到整个区块链的副本，当一个新的块被添加到区块链时，每个都接收到一个通知。。</li><li><code>Proof of Work（工作量证明）</code> 是区块链中的每个块矿工都试图解决的一个加密哈希谜题。一旦一个区块矿工解决了这个难题，本质上意味着生成了具有上述难度等级的区块的哈希值，他们将这个消息传播到区块链网络，哈希值由网络中所有其他区块矿工验证。</li></ul><h4><span id="对我们来说什么是工作证明">对我们来说什么是工作证明?</span></h4><p>工作量证明是根据难度级别生成以0开头的哈希。<br>难度级别5表示，生成带有5个以0开头的哈希，例如 <code>00000b4d7m3h1s0k2s8bw0hn382</code></p><h4><span id="我们将如何实现">我们将如何实现？</span></h4><p>我们将通过对交易明细和现时值应用 <code>SHA-256</code> 算法来计算哈希。我们将从 <code>0</code> 的随机数开始，一直递增，直到找到达到难度级别并以0开头的哈希。<br>我们将通过对事务细节和<code>nonce</code> 值应用 <code>SHA-256</code> 算法来计算哈希值。我们将从 <code>nonce</code> 值为 <code>0</code> 开始，并一直递增，直到找到具有难度级别并以0开头的哈希值。</p><h2><span id="步骤2建立区块链blockchainjs">步骤2：建立区块链（blockchain.js）</span></h2><p>现在已经学到了很多术语，我们来快速创建一个区块链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Block = <span class="built_in">require</span>(<span class="string">'./block'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.difficultyLevel = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.chain = [Block.genesis()];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addBlock(record) &#123;</span><br><span class="line">        <span class="keyword">const</span> newBlock = Block.mineBlock(<span class="keyword">this</span>.chain[<span class="keyword">this</span>.chain.length<span class="number">-1</span>], record, <span class="keyword">this</span>.difficultyLevel);</span><br><span class="line">        <span class="keyword">this</span>.chain.push(newBlock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Blockchain;</span><br></pre></td></tr></table></figure><h2><span id="步骤3测试区块链serverjs">步骤3：测试区块链（server.js）</span></h2><p>让我们创建一些带有随机发送方、接收方和金额细节的交易块。同时，让我们在每2次交易后增加难度等级。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Blockchain = <span class="built_in">require</span>(<span class="string">'./blockchain'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; performance &#125; = <span class="built_in">require</span>(<span class="string">'perf_hooks'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> blockchain = <span class="keyword">new</span> Blockchain();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userList = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>, <span class="string">"David"</span>, <span class="string">"Eric"</span>, <span class="string">"Franklin"</span>, <span class="string">"Gavin"</span>, <span class="string">"Harry"</span>, <span class="string">"Iris"</span>, </span><br><span class="line">                <span class="string">"Joey"</span>, <span class="string">"Kate"</span>, <span class="string">"Leo"</span>, <span class="string">"Monica"</span>, <span class="string">"Nancy"</span>, <span class="string">"Oscar"</span>, <span class="string">"Phoebe"</span>, <span class="string">"Quinn"</span>, <span class="string">"Ross"</span>, </span><br><span class="line">                <span class="string">"Sofia"</span>, <span class="string">"Tyler"</span>, <span class="string">"Umar"</span>, <span class="string">"Victor"</span>, <span class="string">"Wilson"</span>, <span class="string">"Xena"</span>, <span class="string">"Yasmine"</span>, <span class="string">"Zara"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addNBlocks = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        blockchain.addBlock(&#123;</span><br><span class="line">            sender: userList[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * userList.length)],</span><br><span class="line">            receiver: userList[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * userList.length)],</span><br><span class="line">            amount: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1000</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t0 = performance.now();</span><br><span class="line">addNBlocks(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> t1 = performance.now()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[Difficulty Level 1] Added first 2 blocks in  "</span> + (t1 - t0) + <span class="string">" milliseconds."</span>)</span><br><span class="line"></span><br><span class="line">blockchain.difficultyLevel = <span class="number">3</span>;</span><br><span class="line">addNBlocks(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> t2 = performance.now()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[Difficulty Level 3] Added next 2 blocks in  "</span> + (t2 - t1) + <span class="string">" milliseconds."</span>)</span><br><span class="line"></span><br><span class="line">blockchain.difficultyLevel = <span class="number">5</span>;</span><br><span class="line">addNBlocks(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> t3 = performance.now()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[Difficulty Level 5] Added next 2 blocks in  "</span> + (t3 - t2) + <span class="string">" milliseconds."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Print Blockchain*/</span></span><br><span class="line"><span class="built_in">console</span>.log(blockchain.chain);</span><br></pre></td></tr></table></figure><p>现在一切都准备好了，转到终端并运行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save crypto-js</span><br><span class="line">node server</span><br></pre></td></tr></table></figure><p>看到如下输出</p><blockquote><p><strong>Output</strong><br>[Difficulty Level <span style="background-color: #fd5;color: #000;">1</span>] Added first 2 blocks in <span style="background-color: #fd5;color: #000;">6.2153230011463165</span> milliseconds.<br>[Difficulty Level <span style="background-color: #fd5;color: #000;">3</span>] Added next 2 blocks in <span style="background-color: #fd5;color: #000;">175.92524899542332</span> milliseconds.<br>[Difficulty Level <span style="background-color: #fd5;color: #000;">5</span>] Added next 2 blocks in <span style="background-color: #fd5;color: #000;">2065.910447001457</span> milliseconds.<br>[ Block {<br>timestamp: 2020-05-18T17:05:37.501Z,<br>record: <span style="background-color: #fd5;color: #000;">‘GENESIS’</span>,<br>previousHash: <span style="background-color: #fd5;color: #000;">‘’</span>,<br>hash: ‘9636ccb176c9f4825d24e1b8db51e3ffb5d448ba112ec0db9672e80f6dc855c3’,<br>nonce: 0 },<br>Block {<br>timestamp: 2020-05-18T17:05:37.504Z,<br>record: { sender: ‘Xena’, receiver: ‘Umar’, amount: 770 },<br>previousHash: ‘9636ccb176c9f4825d24e1b8db51e3ffb5d448ba112ec0db9672e80f6dc855c3’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">0</span>329bb14cb5d59a2ddce485019de8041c6790b4483afbad91516ec78e21a70f4’,<br>nonce: <span style="background-color: #fd5;color: #000;">24</span> },<br>Block {<br>timestamp: 2020-05-18T17:05:37.509Z,<br>record: { sender: ‘Harry’, receiver: ‘Wilson’, amount: 601 },<br>previousHash: ‘0329bb14cb5d59a2ddce485019de8041c6790b4483afbad91516ec78e21a70f4’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">0</span>5187dd8fa18b1ebd50565f1607e43ab9ad081955a71fb6f542cb91755192b49’,<br>nonce: <span style="background-color: #fd5;color: #000;">12</span> },<br>Block {<br>timestamp: 2020-05-18T17:05:37.512Z,<br>record: { sender: ‘David’, receiver: ‘Quinn’, amount: 600 },<br>previousHash: ‘05187dd8fa18b1ebd50565f1607e43ab9ad081955a71fb6f542cb91755192b49’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">000</span>a0f95e605831a1fa0178351a195fc6f60752fd59e251ea56b1c0d464b8920’,<br>nonce: <span style="background-color: #fd5;color: #000;">7947</span> },<br>Block {<br>timestamp: 2020-05-18T17:05:37.620Z,<br>record: { sender: ‘Yasmine’, receiver: ‘Umar’, amount: 918 },<br>previousHash: ‘000a0f95e605831a1fa0178351a195fc6f60752fd59e251ea56b1c0d464b8920’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">000</span>e8a70d4b6673f3a10cc68fdc21e0cda7a71aa0fe56d31a13cf95832596a45’,<br>nonce: <span style="background-color: #fd5;color: #000;">5384</span> },<br>Block {<br>timestamp: 2020-05-18T17:05:37.686Z,<br>record: { sender: ‘Phoebe’, receiver: ‘Victor’, amount: 336 },<br>previousHash: ‘000e8a70d4b6673f3a10cc68fdc21e0cda7a71aa0fe56d31a13cf95832596a45’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">00000</span>5b737aaa4faa3b87b56474dec9537eee843c2881cb5f6432ca9708bd7b5’,<br>nonce: <span style="background-color: #fd5;color: #000;">45944</span> },<br>Block {<br>timestamp: 2020-05-18T17:05:38.178Z,<br>record: { sender: ‘Umar’, receiver: ‘Oscar’, amount: 239 },<br>previousHash: ‘000005b737aaa4faa3b87b56474dec9537eee843c2881cb5f6432ca9708bd7b5’,<br>hash: ‘<span style="background-color: #fd5;color: #000;">00000</span>57a7a4c7caea164b4e5672a3c38fcf12c6c8bfb4b1c503ca876664f2660’,<br>nonce: <span style="background-color: #fd5;color: #000;">150796</span> } ]</p></blockquote><h3><span id="解析输出">解析输出</span></h3><ul><li>当我们将难度级别从 <code>1</code>、<code>3</code> 增加到 <code>5</code> 时，生成散列和添加新块需要更多的时间。像比特币这样的区块链技术需要以 <code>18</code> 到 <code>30</code> 的难度级别来解决哈希谜题。你可以想象一下解决这些谜题需要多少时间。</li><li>区块链的第一个区块是没有交易信息和先前哈希值的起源区块</li><li>请查看根据难度级别由1、3和5个以0开头生成的散列</li><li>变量 <code>nonce</code>的值随着难度级别的增加而增加，它还告诉我们哈希算法生成哈希的尝试次数。</li></ul><h2><span id="总结">总结</span></h2><p>希望你现在已经对区块链技术有了一个基本的了解，以及我们如何实现它。请注意，上面的例子是区块链的一个非常基本的实现。现实世界的例子非常复杂，但这是进入区块链世界的第一步。</p><p>请在<a href="https://github.com/ashishlahoti/blockchain.js" target="_blank" rel="noopener">github - https://github.com/ashishlahoti/blockchain.js</a>上查看这个例子的源代码</p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/</a></li><li><a href="https://github.com/ashishlahoti/blockchain.js" target="_blank" rel="noopener">github - https://github.com/ashishlahoti/blockchain.js</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创造性就是发明、实验、成长、冒险、犯规、犯错和享受乐趣。 ——&amp;lt;玛丽·卢·库克&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="区块链" scheme="https://cl9000.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>区块链 解释 Blockchain Explained</title>
    <link href="https://cl9000.github.io/2020/05/16/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%A7%A3%E9%87%8A/"/>
    <id>https://cl9000.github.io/2020/05/16/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%A7%A3%E9%87%8A/</id>
    <published>2020-05-16T10:35:12.000Z</published>
    <updated>2021-04-20T09:24:41.588Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/post/blockchain-explained/" target="_blank" rel="noopener">https://codingnconcepts.com/post/blockchain-explained/</a></p></blockquote><p>我们大多数人认为区块链是比特币背后的技术。虽然这是它最初的目的，但区块链有更多的功能……</p><h2><span id="什么是区块链">什么是区块链？</span></h2><p>区块链是数字的、分布式的、不可变的、可信的账本。</p><p>我们一个一个地理解每一个术语：</p><h3><span id="区块链是数字账本-blockchain-is-digital-ledger">区块链是数字账本 Blockchain is Digital Ledger</span></h3><p>你对分类账簿很熟悉，它只不过是记录金融交易的本子。类似地，区块链是一个数字账本，它可以通过编程来记录事情，这些事情不仅限于金融交易，还可以是任何事情，从政府记录到土地所有权，甚至是购买订单。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/ledger.png" alt></p><p>分类帐簿中的每一行记录可以假定为区块链中的一块，它们按时间顺序连接在一起，形成一块链。</p><p>您在财务分类帐簿上为以前交易中的任何更改写一个新记录。类似地，如果您想要更改特定块中的记录，您不需要重写它。相反，更改被记录在一个新的块中。</p><h3><span id="区块链是分布式账本-blockchain-is-distributed-ledger">区块链是分布式账本 Blockchain is Distributed Ledger</span></h3><p>让我们假设我与我的朋友们共享一个账本，其中每个人都记录了他们共同的支出。假设，我借了100美元给我的朋友 Ben 并记录在了共享的账本上。现在我的朋友 Charlie 和 David 知道了我借给 Ben 的确切数额他们基本上认可了这笔交易并做了记录。下个月，Ben 问我最初借给他多少钱，我们可以很容易地找到我的朋友 Charlie 或 David，他们有这笔交易的记录。当你结识新朋友时，他们也可以加入你的共享账簿。</p><p>与共享分类帐类似，任何人都可以选择将自己的计算机连接到区块链网络作为节点。这样一来，他们的电脑就会收到区块链的副本，每当有新的区块被添加时，区块链就会自动更新，有点像Facebook 的新闻 Feed，每当有新的状态被发布时，它就会实时更新。</p><p>从这个意义上讲，区块链是分布式的，数据是共享的。</p><h4><span id="优势">优势</span></h4><ul><li>由于数据是共享的，并且每个节点都有事务的副本，所以不需要协调。</li><li>高可用性，因为网络中有数千个分布式节点，即使有几个节点宕机也没关系。</li></ul><h3><span id="区块链是不可变分类账簿-blockchain-is-immutable-ledger">区块链是不可变分类账簿 Blockchain is Immutable Ledger</span></h3><p>让我们看看组成区块链的各个部分，以理解它的不变性</p><ul><li><p><strong>事务（transaction）</strong>: 这是创建块时发生的事务的详细信息</p></li><li><p><strong>哈希（hash）</strong>: 这是代表区块中交易的数字指纹，是完全唯一的。如果事务细节有任何变化，散列也会发生变化。一般来说，它是通过对交易细节应用某种加密算法生成的字母数字序列</p></li><li><p><strong>前哈希（previousHash）</strong>: 这是链中的前一个块的散列值。</p></li></ul><p>我们看看下面区块链的例子。其中交易有发送方、接收方和金额的详细信息。为简单起见，我们只是通过结合事务细节来生成哈希，即。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash = sender + receiver + amount</span><br></pre></td></tr></table></figure><p>请注意，<code>区块1</code> 是我们区块链的第一个区块，也被称为起源区块，没有 <code>preoushash</code> 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Block <span class="number">1</span></span><br><span class="line">transaction     &#123; <span class="attr">sender</span>: Ash, <span class="attr">receiver</span>: Ben: amount: $<span class="number">100</span> &#125;</span><br><span class="line">hash            ashben100  </span><br><span class="line">previousHash</span><br><span class="line"></span><br><span class="line">Block <span class="number">2</span></span><br><span class="line">transaction     &#123; <span class="attr">sender</span>: Ben, <span class="attr">receiver</span>: Charlie: amount: $<span class="number">200</span> &#125;  </span><br><span class="line">hash            bencharlie200  </span><br><span class="line">previousHash    ashben100</span><br><span class="line"></span><br><span class="line">Block <span class="number">3</span></span><br><span class="line">transaction     &#123; <span class="attr">sender</span>: Ash, <span class="attr">receiver</span>: David: amount: $<span class="number">300</span> &#125;  </span><br><span class="line">hash            ashdavid300  </span><br><span class="line">previousHash    bencharlie200</span><br></pre></td></tr></table></figure><p>假设黑客试图将 <code>区块2</code> 中的交易金额从200美元编辑为999美元。一旦他们编辑了交易的金额，区块的哈希值就会改变。链中的下一个 <code>区块3</code> 将仍然包含旧的 <code>preoushash</code>，黑客需要更新该区块以掩盖他们的踪迹。然而，这样做将改变该块的散列。然后是下一个，以此类推。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Block <span class="number">2</span> (Tampered Amount)</span><br><span class="line">transaction     &#123; <span class="attr">sender</span>: Ben, <span class="attr">receiver</span>: Charlie: amount: $<span class="number">999</span> &#125;  </span><br><span class="line">hash            bencharlie999</span><br><span class="line">previousHash    ashben100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Block <span class="number">3</span> (Old Previous Hash)</span><br><span class="line">transaction     &#123; <span class="attr">sender</span>: Ash, <span class="attr">receiver</span>: David: amount: $<span class="number">300</span> &#125;  </span><br><span class="line">hash            ashdavid300  </span><br><span class="line">previousHash    bencharlie200</span><br></pre></td></tr></table></figure><p>为了改变单个区块，黑客将需要改变区块链上的每一个区块。重新计算所有这些散列将需要巨大且难以置信的计算能力。换句话说，一旦一个块被添加到区块链中，它就变得非常难以编辑，也不可能被删除。</p><p>从这个意义上说，区块链是不可变的，是防篡改的。</p><h3><span id="区块链是可信分类帐-blockchain-is-trusted-ledger">区块链是可信分类帐 Blockchain is Trusted Ledger</span></h3><p>当你把钱转账给某人时，你需要通过一个调解员，通常是银行。现在所有的交易记录都集中在银行内部。黑客篡改记录的机会也更多了。</p><p>此外，当你转移像比特币这样的加密货币时，它是由区块链技术支持的，没有中介参与，基本上所有的节点，在区块链网络中有数百万的加密货币，都是中介，有他们自己的记录副本。如果黑客想篡改任何记录，他们需要在所有的百万份记录中进行。</p><p>让我们对此有更多的了解，为了能够在区块链中添加一个新块，节点必须解决一个非常复杂的数学问题，并且需要提供所谓的工作证明。从计算(时间)和电力消耗(金钱)的角度来看，解决谜题是密集的，这既需要时间，也需要金钱。</p><p>正如我们之前看到的，黑客需要篡改所有的数百万份拷贝。如果向区块链添加一个块需要花费如此多的时间和金钱，您可以想象篡改所有数百万份拷贝会是什么样子。这当然不值得付出努力，更有可能是不可能的。</p><p>从这个意义上说，区块链技术是值得信任的。</p><h2><span id="区块链的用例">区块链的用例</span></h2><h3><span id="1-比特币-bitcoin">1. 比特币 Bitcoin</span></h3><p>大多数加密货币-比特币，Dash，Ethereum（以太坊)，Litecoin，Ripple跟随公开的区块链。公共区块链向所有人开放，以查看和访问，也称为无许可区块链，因为您不需要授权。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/cryptocurrency.png" alt="Crypto Currencies"></p><p><strong>比特币协议</strong> 建立在区块链之上。比特币以数字货币的形式推出，其匿名创造者中本聪(Satoshi Nakamoto)称其为 <strong>“一种全新的电子现金系统，完全是点对点的，没有可信的第三方。”</strong></p><h4><span id="比特币是如何运作的">比特币是如何运作的?</span></h4><p>全世界都有这样的人，他们拥有比特币。世界各地可能有数百万人至少拥有比特币的一部分。假设这数百万人中的一个想把比特币花在食品杂货上。这就是区块链的作用所在。</p><ul><li><p>当一个人用比特币为另一个人支付商品时，本质上一笔交易就启动了。这种交易包含所有必要的信息，如发送方和接收方，但不包含实际的姓名，而是使用类似于用户名的唯一 <strong>数字签名</strong> 以及金额、时间戳等。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Bitcoin Block</span><br><span class="line">transaction: &#123; </span><br><span class="line">                type: BITCOIN</span><br><span class="line">                sender: g4h4g5jnsm6bd4b8d0q6d8v4zx5k2la8d9n4c6f8, </span><br><span class="line">                receiver: m1n2h3b4b5v6c7xz89sld8ff9d47d9dft47mkd,</span><br><span class="line">                amount: <span class="number">25</span></span><br><span class="line">                timestamp: dd-mm-yyyy hh:mm:sss</span><br><span class="line">            &#125;</span><br><span class="line">hash:           ???????</span><br><span class="line">previousHash:   b4h84nv46sn29n4b5h6j7k8l2l3nx6b3n8l38xn40z54n2bv68c</span><br></pre></td></tr></table></figure></li><li><p>该交易加入了比特币网络上的其他交易。</p></li></ul><h4><span id="比特币旷工">比特币旷工</span></h4><p>比特币区块链是一个公开的区块链，这意味着任何人都可以注册自己成为<strong>比特币矿工</strong>之一。比特币矿工是比特币区块链网络中的节点。网络中的所有节点本质上都拥有所有事务的副本，任何时候进行新的事务时，它们都将收到新块的通知。</p><ul><li>网络中的所有比特币矿工开始收集这些交易，并通过查看区块链到目前为止发生的所有交易进行验证，这些交易也是有效的。</li><li>每个比特币矿工尝试解决加密哈希难题，也被称为<strong>工作证明</strong>算法。现在，这是公共区块链和无许可区块链使用的<strong>共识算法</strong>，本质上，这是他们能够就下一个区块达成共识的方式。</li><li>一旦一个比特币矿工解决了这个难题，本质上意味着生成了下一个块的哈希值，他们要做的就是将该块的哈希值广播给网络中的所有其他节点。所有节点验证哈希的真实性，- 一旦所有节点都通过验证，它就作为一个新块添加到网络中的所有节点中。<br>比特币矿工也因为他们在解决这个谜题上的工作而获得比特币奖励。解决谜题也被称为<strong>挖矿</strong></li></ul><h4><span id="如果其中一个比特币矿工是黑客呢">如果其中一个比特币矿工是黑客呢?</span></h4><p>比特币矿工是比特币网络中的一个节点，如果比特币矿工是一个黑客，他们操纵自己的记录副本，那么比特币协议通过一个称为<strong>共识</strong>的过程阻止这种被操纵的区块链的存在。当存在多个不同的区块链副本时，共识协议将采用可用的最长链。</p><h4><span id="为什么加密哈希谜题耗时">为什么加密哈希谜题耗时?</span></h4><p>每个节点都尝试通过<strong>SHA-256算法</strong>从事务细节中生成唯一的哈希值来解决哈希难题，这可能会花费更少的时间。但是一些协议，比如比特币协议，限制哈希生成时必须有32个前导0。生成带有前导或尾部零的散列要复杂得多。类似地，生成带有10个前导0的散列比使用5个前导0的散列计算量更大。</p><p>现在您会说事务细节已经固定，它将根据这些细节生成散列。我们如何生成一个前缀为0的哈希?因为这个块有一个叫做<strong>nonce</strong>的特殊字段，它也被包含在生成哈希表中。每个节点都不断地尝试修改nonce值，直到找到具有指定前导零的散列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHA<span class="number">-256</span> ( nonce + transaction details ) = <span class="number">00000</span>h3bdju7vb3n9s73nf92n1b38d</span><br></pre></td></tr></table></figure><h3><span id="2-私有区块链-private-blockchain">2. 私有区块链 Private Blockchain</span></h3><p>区块链也可以用于供应链、银行和政府部门等业务。它们大多是<strong>私有区块链</strong>，可以被一组经过选择的授权用户访问，如您的公司、一组银行或政府机构。这也被称为<strong>许可</strong>区块链。</p><p>私有区块链也使用共识算法，但由于节点数量有限，它们不像公共区块链那么复杂。</p><p>在被许可的区块链中，节点是受信任的，所以它们通常彼此认识。此外，它们并不总是代表用户，而是代表整个组织。所以，在这种情况下，我们的隐私是被许可的区块链的主要租户之一，这是非常重要的。</p><h3><span id="3供应链-supply-chain">3.供应链 Supply Chain</span></h3><p>举个例子，假设有一个零售商以1000美元购买了25件商品。现在，制造商收到零售商的订单，并说:“好的，让我们批准”。让我们确保仓库里有足够的库存，并与货运公司合作。于是，他们去找船运公司，他们说，“好吧，我们把这100件商品运出去吧”他们要花100美元来装运。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Block <span class="number">1</span></span><br><span class="line">transaction: &#123; </span><br><span class="line">                type: BUY</span><br><span class="line">                company: Star Retailer Ltd., </span><br><span class="line">                items: <span class="number">25</span>,</span><br><span class="line">                total_cost: $<span class="number">1000</span>,</span><br><span class="line">                discount: $<span class="number">50</span></span><br><span class="line">             &#125;</span><br><span class="line">hash:           buystartcompanyltd25100050</span><br><span class="line">previousHash:   -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Block <span class="number">2</span></span><br><span class="line">transaction: &#123; </span><br><span class="line">                type: SHIP</span><br><span class="line">                company: Shipping Bird Co., </span><br><span class="line">                items: <span class="number">25</span>,</span><br><span class="line">                total_cost: $<span class="number">100</span>,</span><br><span class="line">                dispatch_date: DD MM YY,</span><br><span class="line">                arrival_date: DD MM YY</span><br><span class="line">             &#125; </span><br><span class="line">hash:           shipshippingbirdco25100ddmmyyddmmyy </span><br><span class="line">previousHash:   buystartcompanyltd25100050</span><br></pre></td></tr></table></figure><p>这里有一些隐私问题，</p><ul><li>制造商应该知道关于零售商和运输的所有信息</li><li>零售商不必知道运输成本</li><li>发货不一定要知道零售商花了多少钱</li><li>其他在区块链的零售商不应该知道这个零售商和装运</li></ul><p>因此在本例中，所有的组织都是区块链的一部分，只有作为交易一部分的零售商才能<br>看到该信息。因此，隐私必须是区块链的一部分，以便企业能够控制谁可以看到特定的交易细节。</p><h3><span id="4-智能合同-smart-contracts">4. 智能合同 Smart Contracts</span></h3><p>区块链技术最成功的商业应用之一是 <strong>智能合同</strong>。本质上，这是运行在区块链上的代码，只要满足某些条件，它们就会自动执行。</p><p>在之前的供应链例子中，每当零售商向制造商下订单购买一定量的商品时可能会有一个生产代理反复检查订单是否包含所有必要信息，然后，他们可能会去航运代理，以确保他们可以支付装运，如果仓库有正确的货物数量。然后他们会下装运订单。现在想象一下，如果我们可以自动化整个过程。</p><p>这就是你可以用 <strong>智能合同</strong> 做的事情，本质上是确保满足所有必要信息的代码，它会自动创建发货记录。如果不满足其中任何一个条件，它可以自动向零售商发放退款。这加快了整个过程。</p><h4><span id="房地产-real-estate">房地产 Real Estate</span></h4><p>智能合约可以自动处理业权契约，方便交易，甚至通过智能钥匙授予对物业的访问权。该技术可以简化房产销售，节省买家的时间和金钱，而不需要任何中间人或房地产代理。</p><h3><span id="5-跨境支付-cross-border-payments">5. 跨境支付 Cross Border Payments</span></h3><p>在其他国家工作的人通常会从汇款机构把钱寄回家，这需要几个小时，有时几天，而且他们还要支付一大笔费用。区块链技术将消除这些中介机构，缩短转会费和转会费的时间。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/remittance.png" alt="Blockchain innovators for Cross Border Payments"></p><h3><span id="6-在线投票-online-voting">6. 在线投票 Online Voting</span></h3><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/voting.png" alt="voting"></p><p>在许多国家，选民必须亲自到投票站投票。人们一直担心人工投票和投票机的真实性。许多国家也在网上进行投票，但他们也担心安全和欺诈。区块链可以成功地消除这些担忧，因为它将提供一个清楚的投票记录。区块链的防篡改功能使其难以破解支持区块链的投票系统。有了区块链，选民可以在舒适的家中投票。居住在国外的公民也可以投票。这可能会导致投票率大幅上升。</p><p>西弗吉尼亚州使用区块链技术实现了一种安全的移动投票应用程序，允许选民以电子方式接收、投票和返还选票，这是美国历史上2018年的第一个项目。</p><p>公司致力于在线区块链投票解决方案-</p><ul><li><a href="https://followmyvote.com/" target="_blank" rel="noopener">FollowMyVote</a>,</li><li><a href="https://voatz.com/" target="_blank" rel="noopener">Voatz, https://voatz.com/</a></li><li><a href="https://www.scytl.com/en/" target="_blank" rel="noopener">Scytl, https://www.scytl.com/en/</a></li><li><a href="https://clearballot.com/" target="_blank" rel="noopener">Clear Ballot, https://clearballot.com/</a></li><li><a href="https://www.polyas.com/" target="_blank" rel="noopener">Polyas, https://www.polyas.com/</a></li><li><a href="http://www.intelivote.com/" target="_blank" rel="noopener">Intelivote, http://www.intelivote.com/</a></li><li><a href="https://www.smartmatic.com/" target="_blank" rel="noopener">SMARTMATIC, https://www.smartmatic.com/</a></li><li><a href="https://electionrunner.com/" target="_blank" rel="noopener">electionrunner, https://electionrunner.com/</a></li></ul><h3><span id="7-银行间支付-inter-bank-payments">7. 银行间支付 Inter-bank Payments</span></h3><p>新加坡金融管理局(MAS)宣布了<a href="https://www.mas.gov.sg/schemes-and-initiatives/Project-Ubin" target="_blank" rel="noopener">Ubin-https://www.mas.gov.sg/schemes-and-initiatives/Project-Ubin</a>项目，该项目使用区块链和分布式账本技术(DLT)进行银行间支付，与美国银行美林、瑞士信贷、星展银行、汇丰银行、摩根大通、三菱UFJ金融集团、华侨银行、新加坡交易所、渣打银行、和大华银行。</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/interbankpayment.png" alt></p><h3><span id="8-身份管理-identity-management">8. 身份管理 Identity Management</span></h3><p>一个人的身份包括基本信息(姓名、年龄、性别、国籍、地址、联系方式等)和身份证明文件，如出生证明、驾驶执照、选民卡和唯一身份证。这些细节都可以存储在分布式的、安全的、不可变的区块链记录中。</p><p><strong>好处</strong></p><ol><li>分布式身份管理系统可以被全球范围内的许多服务同时使用。</li><li>银行等金融服务可以使用该功能验证客户身份，以确保KYC(了解客户)的遵从性。</li><li>像学校、大学这样的教育服务机构可以用它为学生提供学术证书。这样就解决了验证证书真实性的问题，避免了假证书的欺诈。</li><li>政府机构可以用它来保存出生证明，结婚证，土地权证，以避免腐败。</li></ol><h2><span id="总结-summary">总结 Summary</span></h2><p>我希望读完这篇文章后，你对区块链技术和它的实际应用有一个基本的了解。我会根据我的发现继续更新这篇文章。感谢你的阅读。</p><p>如果对一些区块链编码感兴趣，请阅读文章——<a href="https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/" target="_blank" rel="noopener">使用JavaScript实现区块链 - https://codingnconcepts.com/javascript/blockchain-explained-using-javascript/</a></p><h3><span id="参考">参考</span></h3><ul><li><a href="https://codingnconcepts.com/post/blockchain-explained/" target="_blank" rel="noopener">https://codingnconcepts.com/post/blockchain-explained/</a></li></ul><p><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong><br><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcept
      
    
    </summary>
    
    
      <category term="区块链" scheme="https://cl9000.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="https://cl9000.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>三个有用的JS技巧</title>
    <link href="https://cl9000.github.io/2020/04/12/JavaScript%E4%B8%89%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84JS%E6%8A%80%E5%B7%A7/"/>
    <id>https://cl9000.github.io/2020/04/12/JavaScript%E4%B8%89%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84JS%E6%8A%80%E5%B7%A7/</id>
    <published>2020-04-12T08:56:06.000Z</published>
    <updated>2021-04-16T05:51:20.749Z</updated>
    
    <content type="html"><![CDATA[<p>​<br>人只有献身于社会，才能找出那短暂而有风险的生命的意义。——&lt;阿尔伯特·爱因斯坦&gt;</p><p>原文链接<br><a href="https://www.jstips.co/en/javascript/three-useful-hacks/" target="_blank" rel="noopener">https://www.jstips.co/en/javascript/three-useful-hacks/</a></p><h2><span id="1-从后到前获取数组项">1、从后到前获取数组项</span></h2><p>如果要从后到前获取数组项，只需执行以下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-1</span>)); <span class="comment">// [4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-2</span>)); <span class="comment">// [3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-3</span>)); <span class="comment">// [2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-4</span>)); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2><span id="2-短路有条件">2、短路有条件</span></h2><p>如果必须在条件为 true 的情况下执行函数，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    dosomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以像这样使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition &amp;&amp; dosomething();</span><br></pre></td></tr></table></figure><h2><span id="3-使用-设置变量默认值">3、使用 || 设置变量默认值</span></h2><p>如果必须为变量设置默认值，则可以执行以下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefined</span></span><br><span class="line">​</span><br><span class="line">a = a || <span class="string">'default value'</span>;</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//default value</span></span><br><span class="line">​</span><br><span class="line">a = a || <span class="string">'new value'</span>;</span><br><span class="line">​</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//default valu</span></span><br></pre></td></tr></table></figure><blockquote><p>原文链接：<a href="https://www.jstips.co/en/javascript/three-useful-hacks/" target="_blank" rel="noopener">https://www.jstips.co/en/javascript/three-useful-hacks/</a></p></blockquote><p>关注【公众号】，了解更多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​&lt;br&gt;
人只有献身于社会，才能找出那短暂而有风险的生命的意义。——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;p&gt;原文链接&lt;br&gt;
&lt;a href=&quot;https://www.jstips.co/en/javascript/three-useful-hacks/&quot; ta
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用 tap 快速 debug</title>
    <link href="https://cl9000.github.io/2020/04/12/JavaScript-%E4%BD%BFtap%E6%9D%A5%E5%BF%AB%E9%80%9Fdebug/"/>
    <id>https://cl9000.github.io/2020/04/12/JavaScript-%E4%BD%BFtap%E6%9D%A5%E5%BF%AB%E9%80%9Fdebug/</id>
    <published>2020-04-12T08:29:00.000Z</published>
    <updated>2021-04-22T02:20:10.718Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/javascript-7.png" alt></p><p>在这里 <code>tap</code> 是一个可以用来快速调试、链式调用、匿名函数，还可以打印任何你想打印的东西的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么我们不用 console.log 这个老方式了？让我来示范一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bank_totals_by_client(bank_info(<span class="number">1</span>, banks), table)</span><br><span class="line">            .filter(<span class="function"><span class="params">c</span> =&gt;</span> c.balance &gt; <span class="number">25000</span>)</span><br><span class="line">            .sort(<span class="function">(<span class="params">c1, c2</span>) =&gt;</span> c1.balance &lt; = c2.balance ? <span class="number">1</span> : <span class="number">-1</span> )</span><br><span class="line">            .map(<span class="function"><span class="params">c</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;c.id&#125;</span> | <span class="subst">$&#123;c.tax_number&#125;</span> (<span class="subst">$&#123;c.name&#125;</span>) =&gt; <span class="subst">$&#123;c.balance&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>现在，加入你从这个链式调用中没有得到任何返回。 在哪里除了问题呢？或许 bank_info 没有返回东西，我们需要监听（tap）它:</p><p><code>bank_totals_by_client(tap(bank_info(1, banks)), table)</code></p><p>基于我们特殊的实现，它可能会打印一些东西，也可能什么也不打印。 我们假设，打印出来的东西是正确的，因此， <code>bank_info</code> 没有问题。</p><p>我们需要继续调试下一个函数，<code>filter</code> 。</p><p><code>.filter(c =&gt; tap(c).balance &gt; 25000)</code></p><p>我们可以得到 <code>c</code> 吗？如果可以，说明 <code>bank_totals_by_client</code> 运行正常。 可能是 <code>filter</code> 内的条件有问题？</p><p><code>.filter(c =&gt; tap(c.balance &gt; 25000))</code></p><p>我们发现除了 false 没有打印其他东西，所以说明没有一个 client &gt;25000， 这就是为什么方法什么也没返回的原因。</p><p>(附) 更先进的 tap</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span>(<span class="params">x, fn = x =&gt; x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fn(x));</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想在监听 <code>（tap）</code> 之前事先做一些操作应该怎么办？比如，我们只想方位某个对象特定的参数，位于一个逻辑运算，等等。<br>使用上面的方法，在调用的时候增加一个额外参数，这个函数在被监听 <code>（tap）</code> 的时候就会被执行。</p><p><code>tap(3, x =&gt; x + 2) === 3; // 打印出来 5 ，但是返回 true ，为什么 :-)?</code></p><br><h3><span id="参考">参考</span></h3><blockquote><p>原文：<a href="https://github.com/loverajoel/jstips/blob/master/_posts/en/javascript/2017-03-16-tapping-for-quick-debugging.md" target="_blank" rel="noopener">https://github.com/loverajoel/jstips/blob/master/_posts/en/javascript/2017-03-16-tapping-for-quick-debugging.md</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个人的价值，应该看他贡献什么，而不应当看他取得什么。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/javascript-7.png&quot; a
      
    
    </summary>
    
    
    
      <category term="debug" scheme="https://cl9000.github.io/tags/debug/"/>
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>window.location备忘录</title>
    <link href="https://cl9000.github.io/2020/04/08/window-location%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://cl9000.github.io/2020/04/08/window-location%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2020-04-08T09:46:23.000Z</published>
    <updated>2021-04-07T10:06:28.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在事情成功之前，一切总看似不可能。——&lt;纳尔逊·曼德拉&gt;</p></blockquote><blockquote><p>作者：Samantha Ming<br>译者：cl9000<br>来源：medium<br>原文：<a href="https://morioh.com/p/b444d291bdfb" target="_blank" rel="noopener">https://morioh.com/p/b444d291bdfb</a></p></blockquote><p>如果你想获取站点的URL信息，那么window.location对象什么很适合你！使用其属性获取有关当前页面地址的信息，或使用其方法进行某些页面重定向或刷新。</p><p><code>https://morioh.com/search?c=cl9000#1</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.origin    → <span class="string">'"https://morioh.com'</span></span><br><span class="line">               .protocol  → <span class="string">'https:'</span></span><br><span class="line">               .host      → <span class="string">'morioh.com'</span></span><br><span class="line">               .hostname  → <span class="string">'morioh.com'</span></span><br><span class="line">               .port      → <span class="string">''</span></span><br><span class="line">               .pathname  → <span class="string">'/search'</span></span><br><span class="line">               .search    → <span class="string">'?c=cl9000'</span></span><br><span class="line">               .hash      → <span class="string">'#1'</span></span><br><span class="line">               .href      → <span class="string">'https://morioh.com/search?c=cl9000#1'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.assign(<span class="string">'url'</span>)</span><br><span class="line">                .replace(<span class="string">'url'</span>)</span><br><span class="line">                .reload()</span><br><span class="line">                .toString()</span><br><span class="line">​</span><br></pre></td></tr></table></figure><h2><span id="windowlocation-属性">window.location 属性</span></h2><table><thead><tr><th>window.location</th><th>返回值</th></tr></thead><tbody><tr><td>.origin</td><td>站点主地址(协议 + 主机名 + 端口)</td></tr><tr><td>.protocol</td><td>协议架构 (http: 或者 htts:)</td></tr><tr><td>.host</td><td>域名 + 端口</td></tr><tr><td>.port</td><td>端口</td></tr><tr><td>.pathname</td><td>最前页的 ‘/’ 后面跟的路径</td></tr><tr><td>.search</td><td>? 后跟的查询字符串</td></tr><tr><td>.hash</td><td>从 # 号开始的部分</td></tr><tr><td>.href</td><td>完整网址</td></tr></tbody></table><h2><span id="host-和-hostname-的区别">host 和 hostname 的区别</span></h2><p>在上面的示例中，你可能注意到host和hostname返回相同的值。那么为什么要这些属性。好吧，这与端口号有关，让我们来看看。</p><h4><span id="没有端口的-url">没有端口的 URL</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//morioh.com/search</span></span><br><span class="line">​</span><br><span class="line"><span class="built_in">window</span>.location.host; <span class="comment">// 'morioh.com'</span></span><br><span class="line"><span class="built_in">window</span>.location.hostname; <span class="comment">// 'morioh.com'</span></span><br><span class="line">​</span><br><span class="line"><span class="built_in">window</span>.location.port; <span class="comment">// ''</span></span><br></pre></td></tr></table></figure><h4><span id="带端口的-url">带端口的 URL</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//morioh.com/search"8080</span></span><br><span class="line">​</span><br><span class="line"><span class="built_in">window</span>.location.host; <span class="comment">// 'morioh.com:8080'</span></span><br><span class="line"><span class="built_in">window</span>.location.hostname; <span class="comment">// 'morioh.com'</span></span><br><span class="line"><span class="built_in">window</span>.location.port; <span class="comment">// '8080'</span></span><br></pre></td></tr></table></figure><p>因此，host将包括端口号，而hostname将仅返回主机名。</p><h2><span id="如何更改-url-属性">如何更改 URL 属性</span></h2><p>我们不仅可以调用location`  属性来检索URL信息，还可以使用它来设置新属性并更改URL。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始 'https://morioh.com/'</span></span><br><span class="line"><span class="built_in">window</span>.location.pathname = <span class="string">'/cl9000'</span>; <span class="comment">// 设置 pathname</span></span><br><span class="line"><span class="comment">// 结果 'https://morioh.com/cl9000'</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>下面是你可以更改的属性的完整列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事例</span></span><br><span class="line"><span class="built_in">window</span>.location.protocol = <span class="string">'https'</span></span><br><span class="line">               .host     = <span class="string">'localhost:8080'</span></span><br><span class="line">               .hostname = <span class="string">'localhost'</span></span><br><span class="line">               .port     = <span class="string">'8080'</span></span><br><span class="line">               .pathname = <span class="string">'path'</span></span><br><span class="line">               .search   = <span class="string">'query string'</span> <span class="comment">// (这里不用写 `?`)</span></span><br><span class="line">               .hash     = <span class="string">'hash'</span> <span class="comment">// (这里不用写 `#`)</span></span><br><span class="line">               .href     = <span class="string">'url'</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>唯一不能设置的属性是window.location.origin，此属性是只读的。</p><h2><span id="location-对象">Location 对象</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location返回一个Location对象。它为我们提供有关页面当前地址的信息。但是我们还可以通过几种方式访问Location对象。</span><br><span class="line"><span class="built_in">window</span>.location          → Location</span><br><span class="line"><span class="built_in">window</span>.document.location → Location</span><br><span class="line"><span class="built_in">document</span>.location        → Location</span><br><span class="line">location                 → Location</span><br></pre></td></tr></table></figure><p>我们这样做的原因是这些是我们浏览器中的全局变量。</p><h2><span id="windowlocation-vs-location">window.location  VS  location</span></h2><p>上面四个属性都指向同一个Location对象。我个人更喜欢window.location并且实际上会避免使用location。主要是因为location看起来像一个普通变量，并且我们有时可能会不小心将其命名为变量，这将覆盖全局变量。举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.samanthaming.com</span></span><br><span class="line">​</span><br><span class="line">location.protocol; <span class="comment">// 'https'</span></span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">localFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> location = <span class="string">'/sam'</span>;</span><br><span class="line">​</span><br><span class="line">  <span class="keyword">return</span> location.protocol;</span><br><span class="line">  <span class="comment">// ❌ undefined</span></span><br><span class="line">  <span class="comment">//    b/c local "location" has override the global variable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我想大多数开发人员都知道window是一个全局变量。这样就不太可能引起混淆。老实说，直到我写了这篇文章，我才知道location 是一个全局变量。建议大家多使用 window.location 来代替其它写法。</p><h2><span id="windowlocation-方法">window.location 方法</span></h2><p>方法          作用<br>.assign()加载一个新的文档<br>.replace()用新的文档替换当前文档<br>.reload()重新加载当前页面<br>.reload()返回的URL</p><h2><span id="windowlocationtostring">window.location.toString</span></h2><p>根据 MDN :<br>此方法返回 URL 的 USVString，它是 Location.href 的只读版本。</p><p>换句话说，我们可以这样得到  href  的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.samanthaming.com</span></span><br><span class="line"><span class="built_in">window</span>.location.href; <span class="comment">// https://www.samanthaming.com</span></span><br><span class="line"><span class="built_in">window</span>.location.toString(); <span class="comment">// https://www.samanthaming.com</span></span><br></pre></td></tr></table></figure><h2><span id="assign-vs-replace">assign vs replace</span></h2><p>这两种方法都是重定向或导航到另一个URL。区别在于assign 是将当前页面保存在历史记录中，因此用户可以使用“后退”按钮导航到该页面。而使用replace方法时，不会保存它。让我们来看一个例子。</p><h2><span id="assign">Assign</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 打开一个新的空白页</span><br><span class="line"><span class="number">2.</span> 输入 www.samanthaming.com (当前页)</span><br><span class="line"><span class="number">3.</span> 使用 <span class="string">`window.location.assign('https://www.baidu.com')`</span> 载入新页面</span><br><span class="line"><span class="number">4.</span> 按 <span class="string">"返回上一页"</span></span><br><span class="line"><span class="number">5.</span> 返回到了 👉 www.samanthaming.com</span><br></pre></td></tr></table></figure><h2><span id="replace">Replace</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 打开一个新的空白页</span><br><span class="line"><span class="number">2.</span> 输入 www.samanthaming.com (当前页)</span><br><span class="line"><span class="number">3.</span> 使用 <span class="string">`window.location.assign('https://www.baidu.com')`</span> 载入新页面</span><br><span class="line"><span class="number">4.</span> 按 <span class="string">"返回上一页"</span></span><br><span class="line"><span class="number">5.</span> 返回到一个空白页</span><br></pre></td></tr></table></figure><h2><span id="如何让页面重定向">如何让页面重定向</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如何重定向到另一个页面，有<span class="number">3</span>种方法。</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="string">'https://www.samanthaming.com'</span>;</span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="string">'https://www.samanthaming.com'</span>);</span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="string">'https://www.samanthaming.com'</span>);</span><br></pre></td></tr></table></figure><h2><span id="replace-vs-assign-vs-href">replace VS assign VS href</span></h2><p>这三个都可以重定向，区别在于浏览器的历史记录。href和assign 会把当前页面保存在历史记录中，而replace则不会。因此，如果你想创建一种导航无法回到原始页面的体验，请使用replace👍</p><p>现在的问题是href与assign。我更喜欢assign，因为它是一种方法，因此感觉好像我正在执行一些操作。还有一个额外的好处是它更易于测试。我已经编写了许多Jest测试，因此通过使用一种方法，它使其更易于模拟。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.assign = jest.fn();</span><br><span class="line">​</span><br><span class="line">myUrlUpdateFunction();</span><br><span class="line">​</span><br><span class="line">expect(<span class="built_in">window</span>.location.assign).toBeCalledWith(<span class="string">'http://my.url'</span>);</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>最终希望备忘单，希望能对你有所帮助，在需要的时候，能快速给你带来答案。谢谢大家的观看。</p><p>关注【公众号】，了解更多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在事情成功之前，一切总看似不可能。——&amp;lt;纳尔逊·曼德拉&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Samantha Ming&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：medium&lt;br&gt;
原文：&lt;a 
      
    
    </summary>
    
    
    
      <category term="window.location" scheme="https://cl9000.github.io/tags/window-location/"/>
    
  </entry>
  
  <entry>
    <title>basicScroll – 独立视差滚动</title>
    <link href="https://cl9000.github.io/2020/04/07/basicScroll%E7%8B%AC%E7%AB%8B%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8/"/>
    <id>https://cl9000.github.io/2020/04/07/basicScroll%E7%8B%AC%E7%AB%8B%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8/</id>
    <published>2020-04-07T09:48:40.000Z</published>
    <updated>2021-04-07T08:20:31.212Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/basicscroll001.png" alt="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/basicscroll001.png"></p><blockquote><p>使用 CSS 变量改变动画的移动端和桌面端的独立视差滚动。</p></blockquote><p><a href="https://basicscroll.electerious.com/" target="_blank" rel="noopener">basicscroll - https://basicscroll.electerious.com/</a><br><a href="https://github.com/electerious/basicScroll" target="_blank" rel="noopener">basicScroll - https://github.com/electerious/basicScroll</a></p><p>basicScroll 可以根据 CSS 变量来改变滚动位置。你可以在 CSS 中使用变量来制作想要的动画效果。basicScroll 运行非常流畅，在桌面和移动设备上运行出色，并且支持触摸。</p><p>basicScroll 独立于框架，支持 CommonJS 和 AMD ，拥有简单的 JS API 。</p><h2><span id="特性">特性</span></h2><ul><li>框架独立</li><li>疯狂的表演</li><li>支持移动和桌面</li><li>CommonJS和AMD的支持</li><li>简单的JS API</li></ul><h2><span id="安装">安装</span></h2><p>建议使用 <code>npm 或 yarn</code> 安装 <code>basicScroll</code>。</p><p><code>$ npm install basicscroll</code></p><p><code>$ yarn add basicscroll</code></p><p>将 <code>JS</code> 文件包含在 <code>&lt;body&gt;</code> 标记的末尾</p><p><code>&lt;script src=&quot;dist/basicScroll.min.js&quot;&gt;&lt;/script&gt;</code></p><p>或者跳过<code>JS</code>文件，使用<code>basicScroll</code>作为模块:</p><p><code>const basicScroll = require('basicScroll')</code></p><p><code>import * as basicScroll from 'basicscroll'</code></p><h2><span id="用法">用法</span></h2><p>下面的示例所演示的是如何在用户滚动时更改元素的不透明度。只要元素的顶部到达视口的底部，元素就开始淡化。当元素的中间部分位于视口中间时，达到.99的不透明度。</p><p>提示：从.01到.99的动画避免了元素从完全透明变为半透明，并从半透明变为完全可见时触发的重绘。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = basicScroll.create(&#123;</span><br><span class="line">trueelem: <span class="built_in">document</span>.querySelector(<span class="string">'.element'</span>),</span><br><span class="line">true<span class="keyword">from</span>: <span class="string">'top-bottom'</span>,</span><br><span class="line">trueto: <span class="string">'middle-middle'</span>,</span><br><span class="line">trueprops: &#123;</span><br><span class="line">truetrue<span class="string">'--opacity'</span>: &#123;</span><br><span class="line">truetruetrue<span class="keyword">from</span>: <span class="number">.01</span>,</span><br><span class="line">truetruetrueto: <span class="number">.99</span></span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance.start()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.element &#123;</span><br><span class="line">true<span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用与上面实例中指定的相同的CSS变量。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">trueopacity: <span class="keyword">var</span>(--opacity);</span><br><span class="line">true<span class="comment">/*</span></span><br><span class="line"><span class="comment"> * CSS 属性 will-change 为web开发者提供了一种告知浏览器该元素会有哪些变化的方法，这样浏览器可以在元素属性真正发生变 </span></span><br><span class="line"><span class="comment">         * 化之前提前做好对应的优化准备工作。这种优化可以将一部分复杂的计算工作提前准备好，使页面的反应更为快速灵敏。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="comment">// will-change: opacity;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/basicscroll001.png&quot; alt=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogI
      
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://cl9000.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Pressure.js – 用于处理Force Touch，3D Touch的JS库</title>
    <link href="https://cl9000.github.io/2020/04/07/Pressurejs%E5%A4%84%E7%90%86Touch%E7%9A%84JS%E5%BA%93/"/>
    <id>https://cl9000.github.io/2020/04/07/Pressurejs%E5%A4%84%E7%90%86Touch%E7%9A%84JS%E5%BA%93/</id>
    <published>2020-04-07T09:11:15.000Z</published>
    <updated>2021-04-07T05:38:50.374Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>干就完了 – <cl9000></cl9000></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Pressurejs.gif" alt></p><p><a href="https://pressurejs.com/" target="_blank" rel="noopener">pressurejs - https://pressurejs.com/</a><br><a href="https://github.com/stuyam/pressure" target="_blank" rel="noopener">pressurejs - https://github.com/stuyam/pressure</a></p><blockquote><p>Pressure.js 是一个用于处理 web 上的 Force Touch ，3D Touch 和指针压力的 JavaScript 库。</p></blockquote><h2><span id="安装">安装</span></h2><p>可以从 GitHub 下载 <code>pressure.min.js</code> 或 <code>pressure.js</code> 文件，也可以使用 <code>npm</code> 或 <code>bower</code> 进行安装。</p><h4><span id="npm">npm</span></h4><p><code>$ npm install pressure --save</code></p><h4><span id="bower">bower</span></h4><p><code>$ bower install pressure --save</code></p><h2><span id="配置">配置</span></h2><p>在全局空间中使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#id-name'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者与 browserify 或 CommonJS 一起使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Pressure = <span class="built_in">require</span>(<span class="string">'pressure'</span>);</span><br><span class="line"></span><br><span class="line">Pressure.set(<span class="string">'#id-name'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="用法">用法</span></h2><p>注意:每个回调方法中的&quot;this&quot;关键字将是应用于它的元素本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#element'</span>, &#123;</span><br><span class="line">  start: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 开始时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  end: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 结束时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  startDeepPress: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 压感触控/深压时, 也就是一旦压感大于0.5时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  endDeepPress: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 当压感触控/深压结束时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 每次压感发生变化时都会被调用</span></span><br><span class="line">    <span class="comment">// 在移动设备和桌面端，压感的值始终为0到1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  unsupported: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 注意：只有在polyfill选项被禁用的情况下才会调用这个选项！</span></span><br><span class="line">    <span class="comment">// 一旦触摸元素并且设备或浏览器不支持压感触控或3D触控时调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="jquery-用法">jQuery 用法</span></h2><p>注意:每个回调方法中的&quot;this&quot;关键字将是应用于它的元素本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#element'</span>).pressure(&#123;</span><br><span class="line">    start: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 开始时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    end: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 结束时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    startDeepPress: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 压感触控/深压时, 也就是一旦压感大于0.5时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    endDeepPress: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 当压感触控/深压结束时</span></span><br><span class="line">    &#125;,</span><br><span class="line">    change: <span class="function"><span class="keyword">function</span> (<span class="params">force, event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 每次压感发生变化时都会被调用</span></span><br><span class="line">        <span class="comment">// 在移动设备和桌面端，压感的值始终为0到1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    unsupported: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 注意：只有在polyfill选项被禁用的情况下才会调用这个选项！</span></span><br><span class="line">        <span class="comment">// 一旦触摸元素并且设备或浏览器不支持压感触控或3D触控时调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="可选项">可选项</span></h2><h3><span id="polyfill-support">Polyfill Support</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;,</span><br><span class="line">  unsupported: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"Oh no, this device does not support pressure."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;<span class="attr">polyfill</span>: <span class="literal">false</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="polyfill-speed-up">Polyfill Speed Up</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;<span class="attr">polyfillSpeedUp</span>: <span class="number">5000</span>&#125;);</span><br><span class="line"><span class="comment">// takes 5 seconds to go from a force value of 0 to 1</span></span><br><span class="line"><span class="comment">// only on devices that do not support pressure</span></span><br></pre></td></tr></table></figure><h3><span id="polyfill-speed-down">Polyfill Speed Down</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>, &#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML = force;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;<span class="attr">polyfillSpeedDown</span>: <span class="number">2000</span>&#125;);</span><br><span class="line"><span class="comment">// takes 2 seconds to go from a force value of 1 to 0</span></span><br><span class="line"><span class="comment">// only on devices that do not support pressure</span></span><br></pre></td></tr></table></figure><h3><span id="只能在触控板鼠标上运行-only-run-on-force-touch-trackpads-mouse">只能在触控板(鼠标)上运行 Only run on Force Touch trackpads (mouse)</span></h3><blockquote><p>Set the option only to the type you want it to run on ‘mouse’, ‘touch’, or ‘pointer’. The names are the types of events that pressure will respond to.<br>【译】只设置选项的类型，你希望它运行在’鼠标’，‘触摸’，或’指针’。这些名称是压力响应的事件类型。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">only</span>: <span class="string">'mouse'</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="只在3d-touch上运行touch-only-run-on-3d-touch-touch">只在3D Touch上运行(Touch) Only run on 3D Touch (touch)</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">only</span>: <span class="string">'touch'</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="只在指针支持的设备上运行指针-only-run-on-pointer-supported-devices-pointer">只在指针支持的设备上运行(指针) Only run on Pointer Supported Devices (pointer)</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">only</span>: <span class="string">'pointer'</span>&#125;);</span><br></pre></td></tr></table></figure><h3><span id="更改preventselect选项-change-the-preventselect-option">更改preventSelect选项 Change the preventSelect option</span></h3><blockquote><p>The preventDefault option in “true” by default and it prevents the default actions that happen on 3D “peel and pop” actions and the Force “define word” actions as well as other defaults. To allow the defaults to run set preventDefault to “false”<br>【译】该preventDefault选项在“true”默认情况下，它防止发生在3D“剥离和弹出”行动和Force“define word”行动以及其他默认情况下的默认行动。允许默认值运行设置preventDefault为false</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pressure.set(<span class="string">'#example'</span>,&#123;</span><br><span class="line">  change: <span class="function"><span class="keyword">function</span>(<span class="params">force, event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(force);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;<span class="attr">preventSelect</span>: <span class="literal">false</span>&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;干就完了 – &lt;cl9000&gt;&lt;/cl9000&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/Pressurejs.gif&quot;
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://cl9000.github.io/tags/javascript/"/>
    
      <category term="Touch" scheme="https://cl9000.github.io/tags/Touch/"/>
    
      <category term="3d-touch" scheme="https://cl9000.github.io/tags/3d-touch/"/>
    
      <category term="Pressure" scheme="https://cl9000.github.io/tags/Pressure/"/>
    
      <category term="Pressurejs" scheme="https://cl9000.github.io/tags/Pressurejs/"/>
    
      <category term="pointer-events" scheme="https://cl9000.github.io/tags/pointer-events/"/>
    
  </entry>
  
</feed>
